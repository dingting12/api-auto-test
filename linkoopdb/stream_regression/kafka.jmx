<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="u1" elementType="Argument">
            <stringProp name="Argument.name">u1</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">node4db连接池</stringProp>
          </elementProp>
          <elementProp name="u2" elementType="Argument">
            <stringProp name="Argument.name">u2</stringProp>
            <stringProp name="Argument.value">root</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="udb" elementType="Argument">
            <stringProp name="Argument.name">udb</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="udb_password" elementType="Argument">
            <stringProp name="Argument.name">udb_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="umysql" elementType="Argument">
            <stringProp name="Argument.name">umysql</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">mysql用户</stringProp>
          </elementProp>
          <elementProp name="umysql_password" elementType="Argument">
            <stringProp name="Argument.name">umysql_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">mysql密码</stringProp>
          </elementProp>
          <elementProp name="user" elementType="Argument">
            <stringProp name="Argument.name">user</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">node4用户名</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">node4密码</stringProp>
          </elementProp>
          <elementProp name="u3" elementType="Argument">
            <stringProp name="Argument.name">u3</stringProp>
            <stringProp name="Argument.value">mysql</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">node4 mysql连接池</stringProp>
          </elementProp>
          <elementProp name="node" elementType="Argument">
            <stringProp name="Argument.name">node</stringProp>
            <stringProp name="Argument.value">${__P(host,192.168.1.71)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">node2</stringProp>
          </elementProp>
          <elementProp name="node4" elementType="Argument">
            <stringProp name="Argument.name">node4</stringProp>
            <stringProp name="Argument.value">${__P(host,192.168.1.73)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">node4</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port,9105)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dburl" elementType="Argument">
            <stringProp name="Argument.name">dburl</stringProp>
            <stringProp name="Argument.value">jdbc:linkoopdb:tcp://192.168.1.65:9205/ldb</stringProp>
            <stringProp name="Argument.desc">db的url</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysql_url" elementType="Argument">
            <stringProp name="Argument.name">mysql_url</stringProp>
            <stringProp name="Argument.value">jdbc:mysql://192.168.1.73:3306/jmeter_istreamsql?useSSL=false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="zoo_connect" elementType="Argument">
            <stringProp name="Argument.name">zoo_connect</stringProp>
            <stringProp name="Argument.value">node1:2181,node2:2181,node9:2181/linkoopdb/luyao</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kafka_server" elementType="Argument">
            <stringProp name="Argument.name">kafka_server</stringProp>
            <stringProp name="Argument.value">node6:29096</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="zoo1_connect" elementType="Argument">
            <stringProp name="Argument.name">zoo1_connect</stringProp>
            <stringProp name="Argument.value">node1:2181,node2:2181,node3:2181/istream/node6/kafka</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="kafka1_server" elementType="Argument">
            <stringProp name="Argument.name">kafka1_server</stringProp>
            <stringProp name="Argument.value">node6:9096</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="t_source_files_03_path1" elementType="Argument">
            <stringProp name="Argument.name">t_source_files_03_path1</stringProp>
            <stringProp name="Argument.value">hdfs://192.168.1.70:8020/tmp/tpcds_stream_bch100/customer_demographics/part-00000-c3b2593c-1951-4cae-9b0c-39621aaf82c6-c000.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="t_jdbcsource_formatted_bch_03_path1" elementType="Argument">
            <stringProp name="Argument.name">t_jdbcsource_formatted_bch_03_path1</stringProp>
            <stringProp name="Argument.value">hdfs://192.168.1.70:8020/tmp/tpcds_stream_bch100/customer_demographics/part-00000-c3b2593c-1951-4cae-9b0c-39621aaf82c6-c000.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sc_enginepallas" elementType="Argument">
            <stringProp name="Argument.name">sc_enginepallas</stringProp>
            <stringProp name="Argument.value">${__P(engine,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="linkoopdb" enabled="true">
        <stringProp name="dataSource">${u1}</stringProp>
        <stringProp name="poolMax">20</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="dbUrl">${dburl}</stringProp>
        <stringProp name="driver">com.datapps.linkoopdb.jdbc.JdbcDriver</stringProp>
        <stringProp name="username">${u1}</stringProp>
        <stringProp name="password">123456</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="mysql" enabled="true">
        <stringProp name="dataSource">${u3}</stringProp>
        <stringProp name="poolMax">20</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="dbUrl">${mysql_url}</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">${umysql}</stringProp>
        <stringProp name="password">123456</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
        <stringProp name="maximumValue">9999999999</stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="outputFormat">000</stringProp>
        <boolProp name="perThread">false</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">number</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DROP SCHEMA IF EXISTS streamsql CASCADE;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DROP SCHEMA IF EXISTS streamsql CASCADE;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE SCHEMA streamsql ${sc_enginepallas};" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE SCHEMA streamsql ${sc_enginepallas};</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SET SCHEMA streamsql;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">SET SCHEMA streamsql;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1149 LDBX081-12 add syntax about DESC JOB" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 drop stream if exists T_kafka_source_1031; drop stream if exists T_kafka_sink_1031;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">drop stream if exists T_kafka_source_1031;
drop stream if exists T_kafka_sink_1031;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 create stream T_kafka_source_1031( ID BIGINT,TRX_ID VARCHAR(32768),CUST_ID VARCHAR(32768),TRX_CURR VARCHAR(32768),FLAG_CASH VARCHAR(32768),FLAG_CRDR VARCHAR(32768),TRX_AMT VARCHAR(32768),BALANCE_AMT VARCHAR(32768),ACCOUNT_ID VARCHAR(32768),TARGET_CUST_ID VARCHAR(32768),TARGET_ACCOUNT_ID VARCHAR(32768),TRX_CODE VARCHAR(32768),TARGET_TYPE VARCHAR(32768),TARGET_THIRD_PAY VARCHAR(32768),TARGET_OFFSHORE VARCHAR(32768),TRX_DATE VARCHAR(32768),TRX_TIME VARCHAR(32768) )    PROPERTIES    (  &apos;type&apos;: &apos;source&apos;,  &apos;connector&apos;: &apos;kafka&apos;,  &apos;version&apos;: &apos;0.10&apos;,  &apos;topic&apos;: &apos;baisheng_kafka_1w&apos;,  &apos;zookeeper.connect&apos;: &apos;${zoo_connect}&apos;,  &apos;group.id&apos;: &apos;${__Random(1,53467,group.id)}&apos;,  &apos;bootstrap.servers&apos;: &apos;${kafka_server}&apos;,  &apos;format&apos;: &apos;csv&apos; ,  &apos;separator&apos;:&apos;,&apos;  );" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">create stream T_kafka_source_1031(
ID BIGINT,TRX_ID VARCHAR(32768),CUST_ID VARCHAR(32768),TRX_CURR VARCHAR(32768),FLAG_CASH VARCHAR(32768),FLAG_CRDR VARCHAR(32768),TRX_AMT VARCHAR(32768),BALANCE_AMT VARCHAR(32768),ACCOUNT_ID VARCHAR(32768),TARGET_CUST_ID VARCHAR(32768),TARGET_ACCOUNT_ID VARCHAR(32768),TRX_CODE VARCHAR(32768),TARGET_TYPE VARCHAR(32768),TARGET_THIRD_PAY VARCHAR(32768),TARGET_OFFSHORE VARCHAR(32768),TRX_DATE VARCHAR(32768),TRX_TIME VARCHAR(32768)
)    PROPERTIES    (
 &apos;type&apos;: &apos;source&apos;,
 &apos;connector&apos;: &apos;kafka&apos;,
 &apos;version&apos;: &apos;0.10&apos;,
 &apos;topic&apos;: &apos;baisheng_kafka_1w&apos;,
 &apos;zookeeper.connect&apos;: &apos;${zoo_connect}&apos;,
 &apos;group.id&apos;: &apos;${__Random(1,53467,group.id)}&apos;,
 &apos;bootstrap.servers&apos;: &apos;${kafka_server}&apos;,
 &apos;format&apos;: &apos;csv&apos; ,
 &apos;separator&apos;:&apos;,&apos;
 );</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 create stream T_kafka_sink_1031( ID BIGINT,TRX_ID VARCHAR(32768),CUST_ID VARCHAR(32768),TRX_CURR VARCHAR(32768),FLAG_CASH VARCHAR(32768),FLAG_CRDR VARCHAR(32768),TRX_AMT VARCHAR(32768),BALANCE_AMT VARCHAR(32768),ACCOUNT_ID VARCHAR(32768),TARGET_CUST_ID VARCHAR(32768),TARGET_ACCOUNT_ID VARCHAR(32768),TRX_CODE VARCHAR(32768),TARGET_TYPE VARCHAR(32768),TARGET_THIRD_PAY VARCHAR(32768),TARGET_OFFSHORE VARCHAR(32768),TRX_DATE VARCHAR(32768),TRX_TIME VARCHAR(32768) )    PROPERTIES    (  &apos;type&apos;: &apos;sink&apos;,  &apos;connector&apos;: &apos;kafka&apos;,  &apos;version&apos;: &apos;0.10&apos;,  &apos;topic&apos;: &apos;baisheng_kafka_1w_sink&apos;,  &apos;zookeeper.connect&apos;: &apos;${zoo_connect}&apos;,  &apos;group.id&apos;: &apos;${__Random(1,53467,group.id)}&apos;,  &apos;bootstrap.servers&apos;: &apos;${kafka_server}&apos;,  &apos;format&apos;: &apos;csv&apos; ,  &apos;separator&apos;:&apos;,&apos;  );" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">create stream T_kafka_sink_1031(
ID BIGINT,TRX_ID VARCHAR(32768),CUST_ID VARCHAR(32768),TRX_CURR VARCHAR(32768),FLAG_CASH VARCHAR(32768),FLAG_CRDR VARCHAR(32768),TRX_AMT VARCHAR(32768),BALANCE_AMT VARCHAR(32768),ACCOUNT_ID VARCHAR(32768),TARGET_CUST_ID VARCHAR(32768),TARGET_ACCOUNT_ID VARCHAR(32768),TRX_CODE VARCHAR(32768),TARGET_TYPE VARCHAR(32768),TARGET_THIRD_PAY VARCHAR(32768),TARGET_OFFSHORE VARCHAR(32768),TRX_DATE VARCHAR(32768),TRX_TIME VARCHAR(32768)
)    PROPERTIES    (
 &apos;type&apos;: &apos;sink&apos;,
 &apos;connector&apos;: &apos;kafka&apos;,
 &apos;version&apos;: &apos;0.10&apos;,
 &apos;topic&apos;: &apos;baisheng_kafka_1w_sink&apos;,
 &apos;zookeeper.connect&apos;: &apos;${zoo_connect}&apos;,
 &apos;group.id&apos;: &apos;${__Random(1,53467,group.id)}&apos;,
 &apos;bootstrap.servers&apos;: &apos;${kafka_server}&apos;,
 &apos;format&apos;: &apos;csv&apos; ,
 &apos;separator&apos;:&apos;,&apos;
 );</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 insert into T_kafka_sink_1031 select * from T_kafka_source_1031;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">insert into T_kafka_sink_1031 select * from T_kafka_source_1031;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 SHOW JOBS;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SHOW JOBS;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">jobid</stringProp>
              <stringProp name="RegexExtractor.regex">	(.+?)	20</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 TC-001-RUNNING DESC JOB &quot;${jobid_1}&quot;;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESC JOB &quot;${jobid_1}&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2085926222">JOB_STATUS	SAVEPOINT_PATH
RUNNING	</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 cancel job &quot;${jobid_1}&quot;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CANCEL JOB &quot;${jobid_1}&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 TC-002-CANCELED DESC JOB &quot;${jobid_1}&quot;;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESC JOB &quot;${jobid_1}&quot;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="766073868">JOB_STATUS	SAVEPOINT_PATH
CANCELED	</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 TC-003-Cannot Found Job DESC JOB &apos;1031&apos;;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESC JOB &apos;1031&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1074805646">JOB_STATUS	SAVEPOINT_PATH
Cannot Found Job 1031	</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">30000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1149 LDBX081-12 drop stream if exists T_kafka_source_1031; drop stream if exists T_kafka_sink_1031;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">drop stream if exists T_kafka_source_1031;
drop stream if exists T_kafka_sink_1031;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1031 LDBX081-10 DB 兼容Istream sql" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1031 LDBX081-10 TC-001" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">DESC JOB 1031;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1074805646">JOB_STATUS	SAVEPOINT_PATH
Cannot Found Job 1031	</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2214 LDBX081-56 Kafka source Json解析支持忽略大小写" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2214 LDBX081-56 properties json-origin-list is null" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 drop stream if exists t_kafka_source_ignorecase_01" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop stream if exists t_kafka_source_ignorecase_01;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 create stream t_kafka_source_ignorecase_01" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">create stream t_kafka_source_ignorecase_01(
  ID INT, NAME VARCHAR(64), AGE  INT
) properties(
&apos;type&apos;:&apos;source&apos;,
&apos;connector&apos;:&apos;kafka&apos;,
&apos;version&apos;:&apos;0.10&apos;,
&apos;topic&apos;:&apos;multi_kafka_source_10&apos;,
&apos;bootstrap.servers&apos;:&apos;${kafka_server}&apos;,
&apos;zookeeper.connect&apos;:&apos;${zoo_connect}&apos;,
&apos;group.id&apos;:&apos;${__Random(0,99996742,)}&apos;,
&apos;format&apos;:&apos;json&apos;
);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 TC-SELECT * from t_kafka_source_ignorecase_01" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">debug SELECT * from t_kafka_source_ignorecase_01;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="TestPlan.comments">id类型为int</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="643269511">null	null	29</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 drop stream if exists t_kafka_source_ignorecase_01" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop stream if exists t_kafka_source_ignorecase_01;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2214 LDBX081-56 set properties json-origin-list" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 drop stream if exists t_kafka_source_ignorecase_02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop stream if exists t_kafka_source_ignorecase_02;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 create stream t_kafka_source_ignorecase_02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">create stream t_kafka_source_ignorecase_02(
  ID INT, NAME VARCHAR(64), AGE  INT
) properties(
&apos;type&apos;:&apos;source&apos;,
&apos;connector&apos;:&apos;kafka&apos;,
&apos;version&apos;:&apos;0.10&apos;,
&apos;topic&apos;:&apos;multi_kafka_source_10&apos;,
&apos;bootstrap.servers&apos;:&apos;${kafka_server}&apos;,
&apos;zookeeper.connect&apos;:&apos;${zoo_connect}&apos;,
&apos;group.id&apos;:&apos;${__Random(0,99996742,)}&apos;,
&apos;format&apos;:&apos;json&apos;,
&apos;json-origin-list&apos;:&apos;id,Name,AGE&apos;
);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 TC-SELECT * from t_kafka_source_ignorecase_02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">debug SELECT * from t_kafka_source_ignorecase_02;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="TestPlan.comments">id类型为int</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1974687470">1	Lily	29</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 drop stream if exists t_kafka_source_ignorecase_02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop stream if exists t_kafka_source_ignorecase_02;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2214 LDBX081-56 &quot;id&quot; INT, &quot;Name&quot; VARCHAR(64), AGE INT" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 drop stream if exists t_kafka_source_ignorecase_03" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop stream if exists t_kafka_source_ignorecase_03;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 create stream t_kafka_source_ignorecase_03" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">create stream t_kafka_source_ignorecase_03(
  &quot;id&quot; INT, &quot;Name&quot; VARCHAR(64), AGE INT
) properties(
&apos;type&apos;:&apos;source&apos;,
&apos;connector&apos;:&apos;kafka&apos;,
&apos;version&apos;:&apos;0.10&apos;,
&apos;topic&apos;:&apos;multi_kafka_source_10&apos;,
&apos;bootstrap.servers&apos;:&apos;${kafka_server}&apos;,
&apos;zookeeper.connect&apos;:&apos;${zoo_connect}&apos;,
&apos;group.id&apos;:&apos;${__Random(0,99996742,)}&apos;,
&apos;format&apos;:&apos;json&apos;
);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 TC-SELECT &quot;id&quot;, &quot;Name&quot;, AGE From t_kafka_source_ignorecase_03" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">debug SELECT &quot;id&quot;, &quot;Name&quot;, AGE From t_kafka_source_ignorecase_03;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1974687470">1	Lily	29</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 TC-SELECT * from t_kafka_source_ignorecase_03" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">debug SELECT * from t_kafka_source_ignorecase_03;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="TestPlan.comments">id类型为int</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1974687470">1	Lily	29</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 drop stream if exists t_kafka_source_ignorecase_03" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop stream if exists t_kafka_source_ignorecase_03;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2214 LDBX081-56 &quot;id&quot; INT, name VARCHAR(64), AGE INT" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 drop stream if exists t_kafka_source_ignorecase_04" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop stream if exists t_kafka_source_ignorecase_04;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 create stream t_kafka_source_ignorecase_03" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">create stream t_kafka_source_ignorecase_04(
  &quot;id&quot; INT, name VARCHAR(64), AGE INT
) properties(
&apos;type&apos;:&apos;source&apos;,
&apos;connector&apos;:&apos;kafka&apos;,
&apos;version&apos;:&apos;0.10&apos;,
&apos;topic&apos;:&apos;multi_kafka_source_10&apos;,
&apos;bootstrap.servers&apos;:&apos;${kafka_server}&apos;,
&apos;zookeeper.connect&apos;:&apos;${zoo_connect}&apos;,
&apos;group.id&apos;:&apos;${__Random(0,99996742,)}&apos;,
&apos;format&apos;:&apos;json&apos;,
&apos;json-origin-list&apos;:&apos;id,Name,AGE&apos;
);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 TC-SELECT * from t_kafka_source_ignorecase_03" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">debug SELECT * from t_kafka_source_ignorecase_04;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="TestPlan.comments">id类型为int</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1974687470">1	Lily	29</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2214 LDBX081-56 drop stream if exists t_kafka_source_ignorecase_03" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop stream if exists t_kafka_source_ignorecase_04;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2281 LDBX081-59 Kafka csv and json Source支持ignore-parse-errors日志输出到sql_log" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2281 LDBX081-59 kafka_json&amp;format_json" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 DROP stream if EXISTS t_kafka_ignorelogs_json_jly01; drop table if exists t_kafka_ignorelogs_json_sink_jly01;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DROP stream if EXISTS t_kafka_ignorelogs_json_jly01;
drop table if exists t_kafka_ignorelogs_json_sink_jly01;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 CREATE STREAM t_kafka_ignorelogs_json_jly01" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">CREATE STREAM t_kafka_ignorelogs_json_jly01 (
tbool boolean,ttiny tinyint,tsmall smallint,tint int,tbint bigint,tfloat float,tdouble double
) PROPERTIES (
&apos;connector&apos;:&apos;kafka&apos;,
&apos;zookeeper.connect&apos;:&apos;${zoo_connect}&apos;,
&apos;group.id&apos;:&apos;${__Random(1,99999999999,group_id)}&apos;,
&apos;format&apos;:&apos;json&apos;,
&apos;topic&apos;:&apos;kafka_ignore_errors_jly_date_json&apos;,
&apos;bootstrap.servers&apos;:&apos;${kafka_server}&apos;,
&apos;type&apos;:&apos;source&apos;,
&apos;version&apos;:&apos;0.10&apos;, 
&apos;ignore-parse-errors&apos;:&apos;true&apos;
);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 create table t_kafka_ignorelogs_json_sink_jly01" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">create table t_kafka_ignorelogs_json_sink_jly01(tbool boolean,ttiny tinyint,tsmall smallint,tint int,tbint bigint,tfloat float,tdouble double);
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="TestPlan.comments">id类型为int</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 insert into t_kafka_ignorelogs_json_sink_jly01 select * from t_kafka_ignorelogs_json_jly01;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">insert into t_kafka_ignorelogs_json_sink_jly01 select * from t_kafka_ignorelogs_json_jly01;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">STATEMENT_ID</stringProp>
                <stringProp name="RegexExtractor.regex">http://node2:37569	(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 TC-001" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select * from information_schema.sql_log where id = &apos;${STATEMENT_ID_g1}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1359560525"> [Source: Kafka010TableSource(TBOOL, TTINY, TSMALL, TINT, TBINT, TFLOAT, TDOUBLE) -&gt; Map -&gt; to: Row -&gt; Sink: JDBCAppendTableSink(TBOOL, TTINY, TSMALL, TINT, TBINT, TFLOAT, TDOUBLE) (2/3)] --- JsonRowDeserializationSchema: parse json failed, json:{&quot;tbool&quot;:2019-09-11,&quot;ttiny&quot;:2019-09-11,&quot;tsmall&quot;:2019-09-11,&quot;tint&quot;:2019-09-11,&quot;tbint&quot;:2019-09-11,&quot;tfloat&quot;:2019-09-11,&quot;tdouble&quot;:2019-09-11}</stringProp>
                  <stringProp name="-487445518"> [Source: Kafka010TableSource(TBOOL, TTINY, TSMALL, TINT, TBINT, TFLOAT, TDOUBLE) -&gt; Map -&gt; to: Row -&gt; Sink: JDBCAppendTableSink(TBOOL, TTINY, TSMALL, TINT, TBINT, TFLOAT, TDOUBLE) (2/3)] --- JsonRowDeserializationSchema: parse json failed, json:{&quot;tbool&quot;:2019-09-12,&quot;ttiny&quot;:2019-09-12,&quot;tsmall&quot;:2019-09-12,&quot;tint&quot;:2019-09-12,&quot;tbint&quot;:2019-09-12,&quot;tfloat&quot;:2019-09-12,&quot;tdouble&quot;:2019-09-12}</stringProp>
                  <stringProp name="384669489"> [Source: Kafka010TableSource(TBOOL, TTINY, TSMALL, TINT, TBINT, TFLOAT, TDOUBLE) -&gt; Map -&gt; to: Row -&gt; Sink: JDBCAppendTableSink(TBOOL, TTINY, TSMALL, TINT, TBINT, TFLOAT, TDOUBLE) (2/3)] --- JsonRowDeserializationSchema: parse json failed, json:{&quot;tbool&quot;:2019-09-13,&quot;ttiny&quot;:2019-09-13,&quot;tsmall&quot;:2019-09-13,&quot;tint&quot;:2019-09-13,&quot;tbint&quot;:2019-09-13,&quot;tfloat&quot;:2019-09-13,&quot;tdouble&quot;:2019-09-13}</stringProp>
                  <stringProp name="1242315923">  [Source: Kafka010TableSource(TBOOL, TTINY, TSMALL, TINT, TBINT, TFLOAT, TDOUBLE) -&gt; Map -&gt; to: Row -&gt; Sink: JDBCAppendTableSink(TBOOL, TTINY, TSMALL, TINT, TBINT, TFLOAT, TDOUBLE) (2/3)] --- JsonRowDeserializationSchema: parse json failed, json:{&quot;tbool&quot;:2019-09-11,&quot;ttiny&quot;:2019-09-11,&quot;tsmall&quot;:2019-09-11,&quot;tint&quot;:2019-09-11,&quot;tbint&quot;:2019-09-11,&quot;tfloat&quot;:2019-09-11,&quot;tdouble&quot;:2019-09-11}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">30000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 DROP stream if EXISTS t_kafka_ignorelogs_json_jly01; drop table if exists t_kafka_ignorelogs_json_sink_jly01;" enabled="false">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DROP stream if EXISTS t_kafka_ignorelogs_json_jly01;
drop table if exists t_kafka_ignorelogs_json_sink_jly01;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2281 LDBX081-59 kafka_json&amp;format_csv" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 DROP stream if EXISTS t_kafka_ignorelogs_json_jly02; drop table if exists t_kafka_ignorelogs_json_sink_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DROP stream if EXISTS t_kafka_ignorelogs_json_jly02;
drop table if exists t_kafka_ignorelogs_json_sink_jly02;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 CREATE STREAM t_kafka_ignorelogs_json_jly02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">CREATE STREAM t_kafka_ignorelogs_json_jly02 (
tbool boolean,ttiny tinyint,tsmall smallint,tint int,tbint bigint,tfloat float,tdouble double
) PROPERTIES (
&apos;connector&apos;:&apos;kafka&apos;,
&apos;zookeeper.connect&apos;:&apos;${zoo_connect}&apos;,
&apos;group.id&apos;:&apos;${__Random(1,99999999999,group_id)}&apos;,
&apos;format&apos;:&apos;csv&apos;,
&apos;topic&apos;:&apos;kafka_ignore_errors_jly_date_json&apos;,
&apos;bootstrap.servers&apos;:&apos;${kafka_server}&apos;,
&apos;type&apos;:&apos;source&apos;,
&apos;version&apos;:&apos;0.10&apos;, 
&apos;ignore-parse-errors&apos;:&apos;true&apos;
);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 create table t_kafka_ignorelogs_json_sink_jly02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">create table t_kafka_ignorelogs_json_sink_jly02(tbool boolean,ttiny tinyint,tsmall smallint,tint int,tbint bigint,tfloat float,tdouble double);
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="TestPlan.comments">id类型为int</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 insert into t_kafka_ignorelogs_json_sink_jly02 select * from t_kafka_ignorelogs_json_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">insert into t_kafka_ignorelogs_json_sink_jly02 select * from t_kafka_ignorelogs_json_jly02;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">STATEMENT_ID</stringProp>
                <stringProp name="RegexExtractor.regex">http://node2:37569	(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">30000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 TC-002" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select * from information_schema.sql_log where id = &apos;${STATEMENT_ID_g1}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 DROP stream if EXISTS t_kafka_ignorelogs_json_jly02; drop table if exists t_kafka_ignorelogs_json_sink_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DROP stream if EXISTS t_kafka_ignorelogs_json_jly02;
drop table if exists t_kafka_ignorelogs_json_sink_jly02;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2281 LDBX081-59 kafka_csv&amp;format_csv" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 DROP stream if EXISTS t_kafka_ignorelogs_json_jly02; drop table if exists t_kafka_ignorelogs_json_sink_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DROP stream if EXISTS t_kafka_ignorelogs_json_jly03;
drop table if exists t_kafka_ignorelogs_json_sink_jly03;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 CREATE STREAM t_kafka_ignorelogs_json_jly02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">CREATE STREAM t_kafka_ignorelogs_json_jly03 (
tbool boolean,ttiny tinyint,tsmall smallint,tint int,tbint bigint,tfloat float,tdouble double
) PROPERTIES (
&apos;connector&apos;:&apos;kafka&apos;,
&apos;zookeeper.connect&apos;:&apos;${zoo_connect}&apos;,
&apos;group.id&apos;:&apos;${__Random(1,99999999999,group_id)}&apos;,
&apos;format&apos;:&apos;csv&apos;,
&apos;topic&apos;:&apos;kafka_ignore_errors_jly_date_csv&apos;,
&apos;bootstrap.servers&apos;:&apos;${kafka_server}&apos;,
&apos;type&apos;:&apos;source&apos;,
&apos;version&apos;:&apos;0.10&apos;, 
&apos;ignore-parse-errors&apos;:&apos;true&apos;
);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 create table t_kafka_ignorelogs_json_sink_jly02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">create table t_kafka_ignorelogs_json_sink_jly03(tbool boolean,ttiny tinyint,tsmall smallint,tint int,tbint bigint,tfloat float,tdouble double);
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="TestPlan.comments">id类型为int</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 insert into t_kafka_ignorelogs_json_sink_jly02 select * from t_kafka_ignorelogs_json_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">insert into t_kafka_ignorelogs_json_sink_jly03 select * from t_kafka_ignorelogs_json_jly03;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">STATEMENT_ID</stringProp>
                <stringProp name="RegexExtractor.regex">http://node2:37569	(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">30000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 TC-003" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select * from information_schema.sql_log where id = &apos;${STATEMENT_ID_g1}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 DROP stream if EXISTS t_kafka_ignorelogs_json_jly02; drop table if exists t_kafka_ignorelogs_json_sink_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DROP stream if EXISTS t_kafka_ignorelogs_json_jly03;
drop table if exists t_kafka_ignorelogs_json_sink_jly03;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2281 LDBX081-59 kafka_csv&amp;format_json" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 DROP stream if EXISTS t_kafka_ignorelogs_json_jly02; drop table if exists t_kafka_ignorelogs_json_sink_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DROP stream if EXISTS t_kafka_ignorelogs_json_jly04;
drop table if exists t_kafka_ignorelogs_json_sink_jly04;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 CREATE STREAM t_kafka_ignorelogs_json_jly02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">CREATE STREAM t_kafka_ignorelogs_json_jly04 (
tbool boolean,ttiny tinyint,tsmall smallint,tint int,tbint bigint,tfloat float,tdouble double
) PROPERTIES (
&apos;connector&apos;:&apos;kafka&apos;,
&apos;zookeeper.connect&apos;:&apos;${zoo_connect}&apos;,
&apos;group.id&apos;:&apos;${__Random(1,99999999999,group_id)}&apos;,
&apos;format&apos;:&apos;json&apos;,
&apos;topic&apos;:&apos;kafka_ignore_errors_jly_date_csv&apos;,
&apos;bootstrap.servers&apos;:&apos;${kafka_server}&apos;,
&apos;type&apos;:&apos;source&apos;,
&apos;version&apos;:&apos;0.10&apos;, 
&apos;ignore-parse-errors&apos;:&apos;true&apos;
);</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 create table t_kafka_ignorelogs_json_sink_jly02" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">create table t_kafka_ignorelogs_json_sink_jly04(tbool boolean,ttiny tinyint,tsmall smallint,tint int,tbint bigint,tfloat float,tdouble double);
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="TestPlan.comments">id类型为int</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 insert into t_kafka_ignorelogs_json_sink_jly02 select * from t_kafka_ignorelogs_json_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">insert into t_kafka_ignorelogs_json_sink_jly04 select * from t_kafka_ignorelogs_json_jly04;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">STATEMENT_ID</stringProp>
                <stringProp name="RegexExtractor.regex">http://node2:37569	(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">30000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 TC-004" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select * from information_schema.sql_log where id = &apos;${STATEMENT_ID_g1}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2281 LDBX081-59 DROP stream if EXISTS t_kafka_ignorelogs_json_jly02; drop table if exists t_kafka_ignorelogs_json_sink_jly02;" enabled="true">
              <stringProp name="dataSource">${u1}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">DROP stream if EXISTS t_kafka_ignorelogs_json_jly04;
drop table if exists t_kafka_ignorelogs_json_sink_jly04;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1268 LDBX081-21 LinkoopDB Query Expression支持CEP SQL" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 drop table if exists t_schema_dbout_1268; drop table if exists t_schema_db_1268; drop stream if exists t_schema_dbsource_1268; drop stream if exists t_schema_dbsink_1268; " enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">drop table if exists t_schema_dbout_1268;
drop table if exists t_schema_db_1268;
drop stream if exists streamsql.t_schema_dbsource_1268;
drop stream if exists streamsql.t_schema_dbsink_1268;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 CREATE TABLE t_schema_db_1268 (     timestamp1               TIMESTAMP,     card_id                   VARCHAR,     location                  VARCHAR,     action                 VARCHAR );" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE t_schema_db_1268 (
    timestamp1               TIMESTAMP,
    card_id                   CHAR(255),
    location                  CHAR(255),
    action                 CHAR(255)
);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 insert into t_schema_db_1268 values (&apos;2018-04-13 12:00:00&apos;,&apos;1&apos;,&apos;WW&apos;,&apos;Tom&apos;), (&apos;2018-04-13 12:05:00&apos;,&apos;1&apos;,&apos;WW1&apos;,&apos;Tom&apos;), (&apos;2018-04-13 12:10:00&apos;,&apos;1&apos;,&apos;WW2&apos;,&apos;Tom&apos;), (&apos;2018-04-13 12:20:00&apos;,&apos;1&apos;,&apos;WW&apos;,&apos;Tom&apos;);" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">insert into t_schema_db_1268 values (&apos;2018-04-13 12:00:00&apos;,&apos;1&apos;,&apos;WW&apos;,&apos;Tom&apos;),
(&apos;2018-04-13 12:05:00&apos;,&apos;1&apos;,&apos;WW1&apos;,&apos;Tom&apos;),
(&apos;2018-04-13 12:10:00&apos;,&apos;1&apos;,&apos;WW2&apos;,&apos;Tom&apos;),
(&apos;2018-04-13 12:20:00&apos;,&apos;1&apos;,&apos;WW&apos;,&apos;Tom&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 CREATE TABLE t_schema_dbout_1268 (     start_timestamp               TIMESTAMP,     end_timestamp                 TIMESTAMP,     card_id                       VARCHAR,     event                         VARCHAR )" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE t_schema_dbout_1268 (
    start_timestamp               TIMESTAMP,
    end_timestamp                 TIMESTAMP,
    card_id                      CHAR(255),
    event                         CHAR(255)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 CREATE stream t_schema_dbsource_1268 (     start_timestamp               TIMESTAMP,     end_timestamp                 TIMESTAMP,     card_id                       VARCHAR,     event                         VARCHAR ) PROPERTIES (   &apos;type&apos;: &apos;source&apos;,   &apos;connector&apos;: &apos;jdbc&apos;,   &apos;tableName&apos;: &apos;t_schema_db_1268&apos;,   &apos;driver&apos;: &apos;com.datapps.linkoopdb.jdbc.JdbcDriver&apos;,   &apos;dbUrl&apos;: &apos;${dburl}&apos;,   &apos;username&apos;: &apos;${udb}&apos;,   &apos;password&apos;: &apos;${udb_password}&apos;,   &apos;fetchSize&apos;: &apos;5&apos; ) ;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE stream streamsql.t_schema_dbsource_1268 (
    timestamp1               TIMESTAMP,
    card_id                   string,
    location                 string,
    action                string
) PROPERTIES (
  &apos;type&apos;: &apos;source&apos;,
  &apos;connector&apos;: &apos;jdbc&apos;,
  &apos;tableName&apos;: &apos;t_schema_db_1268&apos;,
  &apos;driver&apos;: &apos;com.datapps.linkoopdb.jdbc.JdbcDriver&apos;,
  &apos;dbUrl&apos;: &apos;${dburl}&apos;,
  &apos;username&apos;: &apos;${udb}&apos;,
  &apos;password&apos;: &apos;${udb_password}&apos;,
  &apos;fetchSize&apos;: &apos;5&apos;
) ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 CREATE stream t_schema_dbsink_1268 (     start_timestamp               TIMESTAMP,     end_timestamp                 TIMESTAMP,     card_id                       VARCHAR,     event                         VARCHAR ) PROPERTIES (   &apos;type&apos;: &apos;sink&apos;,   &apos;connector&apos;: &apos;jdbc&apos;,   &apos;tableName&apos;: &apos;t_schema_dbout_1268&apos;,   &apos;driver&apos;: &apos;com.datapps.linkoopdb.jdbc.JdbcDriver&apos;,   &apos;dbUrl&apos;: &apos;${dburl}&apos;,   &apos;username&apos;: &apos;${udb}&apos;,   &apos;password&apos;: &apos;${udb_password}&apos;,   &apos;batchSize&apos;: &apos;5&apos; ) ;" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE stream streamsql.t_schema_dbsink_1268 (
    start_timestamp               TIMESTAMP,
    end_timestamp                 TIMESTAMP,
    card_id                       string,
    event                         string
) PROPERTIES (
  &apos;type&apos;: &apos;sink&apos;,
  &apos;connector&apos;: &apos;jdbc&apos;,
  &apos;tableName&apos;: &apos;t_schema_dbout_1268&apos;,
  &apos;driver&apos;: &apos;com.datapps.linkoopdb.jdbc.JdbcDriver&apos;,
  &apos;dbUrl&apos;: &apos;${dburl}&apos;,
  &apos;username&apos;: &apos;${udb}&apos;,
  &apos;password&apos;: &apos;${udb_password}&apos;,
  &apos;batchSize&apos;: &apos;5&apos;
) ;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 insert into streamsql.t_schema_dbsink_1268 select  start_timestamp,  end_timestamp,  card_id, event from streamsql.t_schema_dbsource_1268 MATCH_RECOGNIZE (     PARTITION BY card_id       ORDER BY timestamp        MEASURES                       e2.action as event,                         e1.timestamp as start_timestamp,           LAST(e2.timestamp) as end_timestamp     ONE ROW PER MATCH               AFTER MATCH SKIP TO NEXT ROW     PATTERN (e1 e2+) WITHIN INTERVAL &apos;10&apos; MINUTE      DEFINE                             e1 as e1.action = &apos;Tom&apos;,           e2 as e2.action = &apos;Tom&apos; and e2.location &lt;&gt; e1.location  );" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">insert into streamsql.t_schema_dbsink_1268
select 
start_timestamp, 
end_timestamp, 
card_id, event
from streamsql.t_schema_dbsource_1268
MATCH_RECOGNIZE (
    PARTITION BY card_id  
    ORDER BY timestamp1   
    MEASURES              
        e2.action as event,                
        e1.timestamp1 as start_timestamp,  
        LAST(e2.timestamp1) as end_timestamp
    ONE ROW PER MATCH          
    AFTER MATCH SKIP TO NEXT ROW
    PATTERN (e1 e2+) WITHIN INTERVAL &apos;10&apos; MINUTE 
    DEFINE                    
        e1 as e1.action = &apos;Tom&apos;,  
        e2 as e2.action = &apos;Tom&apos; and e2.location &lt;&gt; e1.location 
);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 CREATE TABLE t_schema_dbout_1268 (     start_timestamp               TIMESTAMP,     end_timestamp                 TIMESTAMP,     card_id                       VARCHAR,     event                         VARCHAR )" enabled="true">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">select * from t_schema_dbout_1268;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1268 LDBX081-21 drop table if exists t_schema_dbout_1268; drop table if exists t_schema_db_1268; drop stream if exists t_schema_dbsource_1268; drop stream if exists t_schema_dbsink_1268; " enabled="false">
            <stringProp name="dataSource">${u1}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">drop table if exists t_schema_dbout_1268;
drop table if exists t_schema_db_1268;
drop stream if exists streamsql.t_schema_dbsource_1268;
drop stream if exists streamsql.t_schema_dbsink_1268;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
