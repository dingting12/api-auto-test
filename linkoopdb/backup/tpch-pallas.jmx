<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="node" elementType="Argument">
            <stringProp name="Argument.name">node</stringProp>
            <stringProp name="Argument.value">192.168.1.77</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">linkoopdb host</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">9105</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="a" elementType="Argument">
            <stringProp name="Argument.name">a</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">dba user</stringProp>
          </elementProp>
          <elementProp name="a_password" elementType="Argument">
            <stringProp name="Argument.name">a_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.desc">dba user password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="b" elementType="Argument">
            <stringProp name="Argument.name">b</stringProp>
            <stringProp name="Argument.value">PALLASTPCH1G</stringProp>
            <stringProp name="Argument.desc">dba user1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="b_password" elementType="Argument">
            <stringProp name="Argument.name">b_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.desc">dba user password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="u1" elementType="Argument">
            <stringProp name="Argument.name">u1</stringProp>
            <stringProp name="Argument.value">T_USER1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ordinary user1</stringProp>
          </elementProp>
          <elementProp name="u1_password" elementType="Argument">
            <stringProp name="Argument.name">u1_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ordinary user1 password</stringProp>
          </elementProp>
          <elementProp name="u2" elementType="Argument">
            <stringProp name="Argument.name">u2</stringProp>
            <stringProp name="Argument.value">T_USER2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ordinary user2</stringProp>
          </elementProp>
          <elementProp name="u2_password" elementType="Argument">
            <stringProp name="Argument.name">u2_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ordinary user2 password</stringProp>
          </elementProp>
          <elementProp name="u3" elementType="Argument">
            <stringProp name="Argument.name">u3</stringProp>
            <stringProp name="Argument.value">T_USER3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="u3_password" elementType="Argument">
            <stringProp name="Argument.name">u3_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="part1" elementType="Argument">
            <stringProp name="Argument.name">part1</stringProp>
            <stringProp name="Argument.value">part1</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="customer1" elementType="Argument">
            <stringProp name="Argument.name">customer1</stringProp>
            <stringProp name="Argument.value">customer1</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lineitem1" elementType="Argument">
            <stringProp name="Argument.name">lineitem1</stringProp>
            <stringProp name="Argument.value">lineitem1</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nation1" elementType="Argument">
            <stringProp name="Argument.name">nation1</stringProp>
            <stringProp name="Argument.value">nation1</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="orders1" elementType="Argument">
            <stringProp name="Argument.name">orders1</stringProp>
            <stringProp name="Argument.value">orders1</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="region1" elementType="Argument">
            <stringProp name="Argument.name">region1</stringProp>
            <stringProp name="Argument.value">region1</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplier1" elementType="Argument">
            <stringProp name="Argument.name">supplier1</stringProp>
            <stringProp name="Argument.value">supplier1</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="partsupp1" elementType="Argument">
            <stringProp name="Argument.name">partsupp1</stringProp>
            <stringProp name="Argument.value">partsupp1</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="revenue" elementType="Argument">
            <stringProp name="Argument.name">revenue</stringProp>
            <stringProp name="Argument.value">revenue</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplier_tmp" elementType="Argument">
            <stringProp name="Argument.name">supplier_tmp</stringProp>
            <stringProp name="Argument.value">supplier_tmp</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="q22_customer_tmp" elementType="Argument">
            <stringProp name="Argument.name">q22_customer_tmp</stringProp>
            <stringProp name="Argument.value">q22_customer_tmp</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="part" elementType="Argument">
            <stringProp name="Argument.name">part</stringProp>
            <stringProp name="Argument.value">part</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="customer" elementType="Argument">
            <stringProp name="Argument.name">customer</stringProp>
            <stringProp name="Argument.value">customer</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lineitem" elementType="Argument">
            <stringProp name="Argument.name">lineitem</stringProp>
            <stringProp name="Argument.value">lineitem</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nation" elementType="Argument">
            <stringProp name="Argument.name">nation</stringProp>
            <stringProp name="Argument.value">nation</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="orders" elementType="Argument">
            <stringProp name="Argument.name">orders</stringProp>
            <stringProp name="Argument.value">orders</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="region" elementType="Argument">
            <stringProp name="Argument.name">region</stringProp>
            <stringProp name="Argument.value">region</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="supplier" elementType="Argument">
            <stringProp name="Argument.name">supplier</stringProp>
            <stringProp name="Argument.value">supplier</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="partsupp" elementType="Argument">
            <stringProp name="Argument.name">partsupp</stringProp>
            <stringProp name="Argument.value">partsupp</stringProp>
            <stringProp name="Argument.desc"> TPC-H test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tpcds_data_url" elementType="Argument">
            <stringProp name="Argument.name">tpcds_data_url</stringProp>
            <stringProp name="Argument.value">${__P(dataurl,hdfs://node1:8020/user/jianweiyang/data/tpch-1g)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">hdfs://node3:8020/node7/linkoopdb/testdb7/tpch-1g-parquet</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="admin" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">${a}</stringProp>
        <stringProp name="dbUrl">jdbc:linkoopdb:tcp://${node}:${port}/ldb</stringProp>
        <stringProp name="driver">com.datapps.linkoopdb.jdbc.JdbcDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">123456</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${a}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="TPCH" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">${b}</stringProp>
        <stringProp name="dbUrl">jdbc:linkoopdb:tcp://${node}:${port}/ldb</stringProp>
        <stringProp name="driver">com.datapps.linkoopdb.jdbc.JdbcDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">123456</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${b}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LDB EXT: TPCH on pallas" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CREATE USER" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="drop user ${b} if exists cascade;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">drop user ${b} if exists cascade;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE USER ${b} PASSWORD &apos;${b_password}&apos;;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE USER ${b} PASSWORD &apos;${b_password}&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="grant change_authorization to ${b};" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">grant change_authorization to ${b};</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="connect user ${b} password &apos;${b_password}&apos;;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">connect user ${b} password &apos;${b_password}&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CREATE TABLE" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DROP TABLE ${part} IF EXISTS;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">DROP TABLE ${part1} IF EXISTS;
DROP TABLE ${customer1} IF EXISTS;
DROP TABLE ${lineitem1} IF EXISTS;
DROP TABLE ${nation1} IF EXISTS;
DROP TABLE ${orders1} IF EXISTS;
DROP TABLE ${region1} IF EXISTS;
DROP TABLE ${supplier1} IF EXISTS;
DROP TABLE ${partsupp1} IF EXISTS;
DROP TABLE ${part} IF EXISTS;
DROP TABLE ${customer} IF EXISTS;
DROP TABLE ${lineitem} IF EXISTS;
DROP TABLE ${nation} IF EXISTS;
DROP TABLE ${orders} IF EXISTS;
DROP TABLE ${region} IF EXISTS;
DROP TABLE ${supplier} IF EXISTS;
DROP TABLE ${partsupp} IF EXISTS;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE EXTERNAL TABLE ${customer}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/customer/&apos;);" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE EXTERNAL TABLE ${customer1}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/customer/&apos;);

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE EXTERNAL TABLE ${lineitem}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/lineitem/&apos;); " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE EXTERNAL TABLE ${lineitem1}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/lineitem/&apos;);

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE EXTERNAL TABLE ${nation}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/nation/&apos;);" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE EXTERNAL TABLE ${nation1}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/nation/&apos;);

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE EXTERNAL TABLE ${part}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/part/&apos;);" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE EXTERNAL TABLE ${part1}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/part/&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE EXTERNAL TABLE ${partsupp}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/partsupp/&apos;);" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE EXTERNAL TABLE ${partsupp1}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/partsupp/&apos;);</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE EXTERNAL TABLE ${supplier}  BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/supplier/&apos;);" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE EXTERNAL TABLE ${supplier1} BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/supplier/&apos;);

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE EXTERNAL TABLE ${region}    BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/region/&apos;);" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE EXTERNAL TABLE ${region1}    BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/region/&apos;);

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE EXTERNAL TABLE ${orders}    BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/orders/&apos;);" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE EXTERNAL TABLE ${orders1}    BY parquet(&apos;location&apos;:&apos;${tpcds_data_url}/orders/&apos;);

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLE ${part} AS (SELECT * FROM ${part1}) WITH DATA" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE ${part} AS (SELECT * FROM ${part1}) WITH DATA properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLE ${lineitem} AS (SELECT * FROM ${lineitem1}) WITH DATA " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE ${lineitem} AS (SELECT * FROM ${lineitem1}) WITH DATA properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLE ${customer} AS (SELECT * FROM ${customer1}) WITH DATA " enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE ${customer} AS (SELECT * FROM ${customer1}) WITH DATA properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;


</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLE ${supplier} AS (SELECT * FROM ${supplier1}) WITH DATA;   " enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE ${supplier} AS (SELECT * FROM ${supplier1}) WITH DATA properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;



</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLE ${partsupp} AS (SELECT * FROM ${partsupp1}) WITH DATA; " enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE ${partsupp} AS (SELECT * FROM ${partsupp1}) WITH DATA properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;



</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLE ${region} AS (SELECT * FROM ${region1}) WITH DATA " enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE ${region} AS (SELECT * FROM ${region1}) WITH DATA properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLE ${orders} AS (SELECT * FROM ${orders1}) WITH DATA " enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE ${orders} AS (SELECT * FROM ${orders1}) WITH DATA properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE TABLE ${nation} AS (SELECT * FROM ${nation1}) WITH DATA " enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE TABLE ${nation} AS (SELECT * FROM ${nation1}) WITH DATA properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CHANGE AUTHORIZATION" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="drop user ${b} if exists cascade;" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">drop user ${b} if exists cascade;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE USER ${b} PASSWORD &apos;${b_password}&apos;;" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">CREATE USER ${b} PASSWORD &apos;${b_password}&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="grant change_authorization to ${b};" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">grant change_authorization to ${b};</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="connect user ${b} password &apos;${b_password}&apos;;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">connect user ${b} password &apos;${b_password}&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="sql" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="jianwei test" enabled="false">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT count(1) FROM LINEITEM WHERE L_LINENUMBER &gt;5 
UNION ALL SELECT count(1) FROM LINEITEM WHERE L_LINENUMBER &lt; 5</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-001" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty,
  sum(l_extendedprice) as sum_base_price,
  sum(l_extendedprice*(1-l_discount)) as sum_disc_price,
  sum(l_extendedprice*(1-l_discount)*(1+l_tax)) as sum_charge,
  avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price,
  avg(l_discount) as avg_disc, count(*) as count_order
from ${lineitem}
where l_shipdate &lt;= date &apos;1998-12-01&apos; - interval &apos;90&apos; day
group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-002" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	s_acctbal,
	s_name,
	n_name,
	p_partkey,
	p_mfgr,
	s_address,
	s_phone,
	s_comment
from
	${part},
	${supplier},
	${partsupp},
	${nation},
	${region}
where
	p_partkey = ps_partkey
	and s_suppkey = ps_suppkey
	and p_size = 15
	and p_type like &apos;%BRASS&apos;
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = &apos;EUROPE&apos;
	and ps_supplycost = (
		select
			min(ps_supplycost)
		from
			${partsupp},
			${supplier},
			${nation},
			${region}
		where
			p_partkey = ps_partkey
			and s_suppkey = ps_suppkey
			and s_nationkey = n_nationkey
			and n_regionkey = r_regionkey
			and r_name = &apos;EUROPE&apos;
	)
order by
	s_acctbal desc,
	n_name,
	s_name,
	p_partkey
limit 100
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-003" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	l_orderkey,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	o_orderdate,
	o_shippriority
from
	${customer},
	${orders},
	${lineitem}
where
	c_mktsegment = &apos;BUILDING&apos;
	and c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate &lt; date &apos;1995-03-15&apos;
	and l_shipdate &gt; date &apos;1995-03-15&apos;
group by
	l_orderkey,
	o_orderdate,
	o_shippriority
order by
	revenue desc,
	o_orderdate
limit 10
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-004" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	o_orderpriority,
	count(*) as order_count
from
	${orders}
where
	o_orderdate &gt;= date &apos;1993-07-01&apos;
	and o_orderdate &lt; date &apos;1993-07-01&apos; + interval &apos;3&apos; month
	and exists (
		select
			*
		from
			${lineitem}
		where
			l_orderkey = o_orderkey
			and l_commitdate &lt; l_receiptdate
	)
group by
	o_orderpriority
order by
	o_orderpriority</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-005" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	n_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue
from
	${customer},
	${orders},
	${lineitem},
	${supplier},
	${nation},
	${region}
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and l_suppkey = s_suppkey
	and c_nationkey = s_nationkey
	and s_nationkey = n_nationkey
	and n_regionkey = r_regionkey
	and r_name = &apos;ASIA&apos;
	and o_orderdate &gt;= date &apos;1994-01-01&apos;
	and o_orderdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year
group by
	n_name
order by
	revenue desc</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-006" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	sum(l_extendedprice * l_discount) as revenue
from
	${lineitem}
where
	l_shipdate &gt;= date &apos;1994-01-01&apos;
	and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year
	and l_discount between .06 - 0.01 and .06 + 0.01
	and l_quantity &lt; 24
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-007" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT SUPP_NATION,
       CUST_NATION,
       L_YEAR,
       SUM(VOLUME) AS REVENUE
FROM
  (SELECT N1.N_NAME AS SUPP_NATION,
          N2.N_NAME AS CUST_NATION,
          year(L_SHIPDATE) AS L_YEAR,
          L_EXTENDEDPRICE*(1-L_DISCOUNT) AS VOLUME
   FROM 
        ${supplier},
        ${lineitem},
        ${orders},
        ${customer},
        ${nation} N1,
        ${nation} N2
   WHERE S_SUPPKEY = L_SUPPKEY
     AND O_ORDERKEY = L_ORDERKEY
     AND C_CUSTKEY = O_CUSTKEY
     AND S_NATIONKEY = N1.N_NATIONKEY
     AND C_NATIONKEY = N2.N_NATIONKEY
     AND ((N1.N_NAME = &apos;FRANCE&apos;
           AND N2.N_NAME = &apos;GERMANY&apos;)
          OR (N1.N_NAME = &apos;GERMANY&apos;
              AND N2.N_NAME = &apos;FRANCE&apos;))
     AND L_SHIPDATE BETWEEN &apos;1995-01-01&apos; AND &apos;1996-12-31&apos; ) AS SHIPPING
GROUP BY SUPP_NATION,
         CUST_NATION,
         L_YEAR
ORDER BY SUPP_NATION,
         CUST_NATION,
         L_YEAR
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-008" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select 
o_year, sum(case when nation = &apos;BRAZIL&apos; then volume else 0.0 end) / sum(volume) as mkt_share
from (
  select year(o_orderdate) as o_year, l_extendedprice * (1-l_discount) as volume, n2.n_name as nation
  from ${nation} n2 join (
   select o_orderdate, l_discount, l_extendedprice, s_nationkey
   from (
     select o_orderdate, l_discount, l_extendedprice, l_suppkey
     from (
       select o_orderdate, l_partkey, l_discount, l_extendedprice, l_suppkey
         from (
           select o_orderdate, o_orderkey 
           from (
             select c.c_custkey
             from (
               select n1.n_nationkey
               from ${nation} n1 join ${region} r
               on n1.n_regionkey = r.r_regionkey and r.r_name = &apos;AMERICA&apos;
             ) n11 join ${customer} c on c.c_nationkey = n11.n_nationkey
           ) c1 join ${orders} o on c1.c_custkey = o.o_custkey
         ) o1 join ${lineitem} l on l.l_orderkey = o1.o_orderkey and o1.o_orderdate &gt;= &apos;1995-01-01&apos;
                 and o1.o_orderdate &lt; &apos;1996-12-31&apos;
     ) l1 join ${part} p on p.p_partkey = l1.l_partkey and p.p_type = &apos;ECONOMY ANODIZED STEEL&apos;
   ) p1 join ${supplier} s on s.s_suppkey = p1.l_suppkey
  ) s1 on s1.s_nationkey = n2.n_nationkey
) all_nation
group by o_year
order by o_year;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-009" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select nation, o_year, sum(amount) as sum_profit
from (
  select n_name as nation, year(o_orderdate) as o_year,
         l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
  from (
    select l_extendedprice, l_discount, l_quantity, l_orderkey, n_name, ps_supplycost
    from ( 
      select l_extendedprice, l_discount, l_quantity, l_partkey, l_orderkey, n_name, ps_supplycost
      from (
        select ps_suppkey, ps_partkey, ps_supplycost, n_name
        from (
          select s_suppkey, n_name
          from ${nation} n join ${supplier} s on n.n_nationkey = s.s_nationkey
        ) s1 join ${partsupp} ps on s1.s_suppkey = ps.ps_suppkey
      ) s2 join ${lineitem} l on s2.ps_suppkey = l.l_suppkey and s2.ps_partkey = l.l_partkey   
    ) l2 join ${part} p on p.p_name like &apos;%green%&apos; and p.p_partkey = l2.l_partkey
  ) l3 join ${orders} o on o.o_orderkey = l3.l_orderkey
) profilt
group by nation, o_year
order by nation, o_year desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-010" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	${customer},
	${orders},
	${lineitem},
	${nation}
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate &gt;= date &apos;1993-10-01&apos;
	and o_orderdate &lt; date &apos;1993-10-01&apos; + interval &apos;3&apos; month
	and l_returnflag = &apos;R&apos;
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
limit 20

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-011" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	ps_partkey,
	sum(ps_supplycost * ps_availqty) as value
from
	${partsupp},
	${supplier},
	${nation}
where
	ps_suppkey = s_suppkey
	and s_nationkey = n_nationkey
	and n_name = &apos;GERMANY&apos;
group by
	ps_partkey having
		sum(ps_supplycost * ps_availqty) &gt; (
			select
				sum(ps_supplycost * ps_availqty) * 0.0001000000
			from
				${partsupp},
				${supplier},
				${nation}
			where
				ps_suppkey = s_suppkey
				and s_nationkey = n_nationkey
				and n_name = &apos;GERMANY&apos;
		)
order by
	value desc
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-012" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	l_shipmode,
	sum(case
		when o_orderpriority = &apos;1-URGENT&apos;
			or o_orderpriority = &apos;2-HIGH&apos;
			then 1
		else 0
	end) as high_line_count,
	sum(case
		when o_orderpriority &lt;&gt; &apos;1-URGENT&apos;
			and o_orderpriority &lt;&gt; &apos;2-HIGH&apos;
			then 1
		else 0
	end) as low_line_count
from
	${orders},
	${lineitem}
where
	o_orderkey = l_orderkey
	and l_shipmode in (&apos;MAIL&apos;, &apos;SHIP&apos;)
	and l_commitdate &lt; l_receiptdate
	and l_shipdate &lt; l_commitdate
	and l_receiptdate &gt;= date &apos;1994-01-01&apos;
	and l_receiptdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year
group by
	l_shipmode
order by
	l_shipmode
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-013" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_count, count(1) as custdist
from (
   select c_custkey, count(o_orderkey) as c_count
     from
     ${customer} c left outer join (
        select o_custkey, o_orderkey
        from ${orders} where not o_comment like &apos;%special%requests%&apos;
     ) o on c.c_custkey = o.o_custkey     
   group by c_custkey
) c_orders
group by c_count
order by custdist desc, c_count desc;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-014" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
  100.00 * sum(case
    when p_type like &apos;PROMO%&apos;
    then l_extendedprice*(1-l_discount)
    else 0.0
    end
  ) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from
  ${part} , 
  ${lineitem} 
where
	l_partkey = p_partkey
	and l_shipdate &gt;= date &apos;1995-09-01&apos;
	and l_shipdate &lt; date &apos;1995-09-01&apos; + interval &apos;1&apos; month

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-015" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">with revenue0 as
	(select
		l_suppkey as supplier_no,
		sum(l_extendedprice * (1 - l_discount)) as total_revenue
	from
		${lineitem}
	where
		l_shipdate &gt;= date &apos;1996-01-01&apos;
		and l_shipdate &lt; date &apos;1996-01-01&apos; + interval &apos;3&apos; month
	group by
		l_suppkey) select
	s_suppkey,
	s_name,
	s_address,
	s_phone,
	total_revenue
from
	${supplier},
	revenue0
where
	s_suppkey = supplier_no
	and total_revenue = (
		select
			max(total_revenue)
		from
			revenue0
	)
order by
	s_suppkey
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-016" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	p_brand,
	p_type,
	p_size,
	count(distinct ps_suppkey) as supplier_cnt
from
	${partsupp},
	${part}
where
	p_partkey = ps_partkey
	and p_brand &lt;&gt; &apos;Brand#45&apos;
	and p_type not like &apos;MEDIUM POLISHED%&apos;
	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
	and ps_suppkey not in (
		select
			s_suppkey
		from
			${supplier}
		where
			s_comment like &apos;%Customer%Complaints%&apos;
	)
group by
	p_brand,
	p_type,
	p_size
order by
	supplier_cnt desc,
	p_brand,
	p_type,
	p_size</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-017" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select sum(l_extendedprice) / 7.0 as avg_yearly
from (
  select l_quantity, l_extendedprice, t_avg_quantity
   from (
     select b.tt_partkey as t_partkey, b.tt_avg_quantity as t_avg_quantity
     from (
       select l_partkey as tt_partkey, 0.2 * avg(l_quantity) as tt_avg_quantity
       from ${lineitem} where l_partkey &lt;= 5000000 group by l_partkey
     UNION ALL
       select l_partkey as tt_partkey, 0.2 * avg(l_quantity) as tt_avg_quantity
       from ${lineitem} where l_partkey &gt; 5000000 AND l_partkey &lt;= 10000000 group by l_partkey
     UNION ALL
       select l_partkey as tt_partkey, 0.2 * avg(l_quantity) as tt_avg_quantity
       from ${lineitem} where l_partkey &gt; 10000000 AND l_partkey &lt;= 15000000 group by l_partkey
     UNION ALL
       select l_partkey as tt_partkey, 0.2 * avg(l_quantity) as tt_avg_quantity
       from ${lineitem} where l_partkey &gt; 15000000 group by l_partkey
     ) b
   ) t join (
       select l_quantity, l_partkey, l_extendedprice
       from (
	select p_partkey, p_brand, p_container
        from ${part} p
          where p.p_brand = &apos;Brand#23&apos;
          and p.p_container = &apos;MED BOX&apos;
	limit 20100
       ) pp, lineitem l where pp.p_partkey = l.l_partkey
   ) l1 on l1.l_partkey = t.t_partkey
) a where l_quantity &lt; t_avg_quantity;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-018" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select c_name,c_custkey,o_orderkey,o_orderdate,o_totalprice,sum(l_quantity)
 from (
    select c_name,c_custkey,o_orderkey,o_orderdate,o_totalprice
      from
        ${customer} c join ${orders} o 
        on c.c_custkey = o.o_custkey
        join (
          select l_orderkey, t_sum_quantity from (
            select l_orderkey, sum(l_quantity) as t_sum_quantity
              from ${lineitem} where l_orderkey &lt;= 200000000 group by l_orderkey
            UNION ALL
            select l_orderkey, sum(l_quantity) as t_sum_quantity
              from ${lineitem} where l_orderkey &gt; 200000000 AND l_orderkey &lt;= 400000000 group by l_orderkey
            UNION ALL
            select l_orderkey, sum(l_quantity) as t_sum_quantity
              from ${lineitem} where l_orderkey &gt; 400000000 group by l_orderkey
          ) b
        ) t 
          on o.o_orderkey = t.l_orderkey and t.t_sum_quantity &gt; 300
    limit 7000
 ) aa join ${lineitem} l 
   on aa.o_orderkey = l.l_orderkey
 group by aa.c_name,aa.c_custkey,aa.o_orderkey,aa.o_orderdate,aa.o_totalprice
 order by aa.o_totalprice desc, aa.o_orderdate
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-019" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
  sum(a.l_extendedprice * (1 - a.l_discount) ) as revenue
  from
    (select l_extendedprice, l_discount
     from ${lineitem} l join ${part} p on p.p_partkey = l.l_partkey
     where
       p_brand = &apos;Brand#12&apos;
       and p_container IN (&apos;SM CASE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;)
       and l_quantity &gt;= 1 and l_quantity &lt;= 11
       and p_size &gt;= 1 and p_size &lt;= 5
       and l_shipmode IN (&apos;AIR&apos;, &apos;AIR REG&apos;)
       and l_shipinstruct = &apos;DELIVER IN PERSON&apos;
     UNION ALL
     select l_extendedprice, l_discount
     from ${lineitem} l join ${part} p on p.p_partkey = l.l_partkey
     where
       p_brand = &apos;Brand#23&apos;
       and p_container IN (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;)
       and l_quantity &gt;= 10 and l_quantity &lt;= 20
       and p_size &gt;= 1 and p_size &lt;= 10
       and l_shipmode IN (&apos;AIR&apos;, &apos;AIR REG&apos;)
       and l_shipinstruct = &apos;DELIVER IN PERSON&apos;
     UNION ALL
     select l_extendedprice, l_discount
     from ${lineitem} l join ${part} p on p.p_partkey = l.l_partkey
     where
       p_brand = &apos;Brand#34&apos;
       and p_container IN ( &apos;LG CASE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;)
       and l_quantity &gt;= 20 and l_quantity &lt;= 30
       and p_size &gt;= 1 and p_size &lt;= 15
       and l_shipmode IN (&apos;AIR&apos;, &apos;AIR REG&apos;)
       and l_shipinstruct = &apos;DELIVER IN PERSON&apos; 
    ) a;

  </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-020" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, s_address
   from ${nation} n join ${supplier} s 
     on s.s_nationkey = n.n_nationkey and n.n_name = &apos;CANADA&apos;
   join (
	select ps_suppkey
	from (
	  select ps.ps_suppkey, ps.ps_availqty, sum_quantity
	  from ${partsupp} ps join (
	    select distinct p_partkey
	    from part where p_name like &apos;forest%&apos;
	  ) t1 on ps.ps_partkey = t1.p_partkey 
	  join (
	    select l_partkey, l_suppkey, 0.5 * sum(l_quantity) as sum_quantity
	    from ${lineitem} where l_shipdate &gt;= &apos;1994-01-01&apos; and l_shipdate &lt; &apos;1995-01-01&apos;
	    group by l_partkey, l_suppkey
	  ) t2 on ps.ps_partkey = t2.l_partkey and ps.ps_suppkey = t2.l_suppkey
	) t3 where t3.ps_availqty &gt; t3.sum_quantity
	group by ps_suppkey
   ) t4 on s.s_suppkey = t4.ps_suppkey
order by s_name;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-021" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select s_name, count(1) as numwait
from (
  select s_name 
  from (
    select s_name, t2.l_orderkey, l_suppkey, t2.count_suppkey, t2.max_suppkey
    from (
      select l_orderkey, count(distinct l_suppkey) as count_suppkey, max(l_suppkey) as max_suppkey
      from ${lineitem} where l_receiptdate &gt; l_commitdate
      group by l_orderkey     
    ) t2 right outer join (
      select s_name, l_orderkey, l_suppkey 
      from (
        select s_name, t1.l_orderkey, l_suppkey, t1.count_suppkey, t1.max_suppkey
        from (
         select l_orderkey, count(distinct l_suppkey) as count_suppkey, max(l_suppkey) as max_suppkey
         from ${lineitem} group by l_orderkey
        ) t1 join (
          select s_name, l_orderkey, l_suppkey
          from ${orders} o join (
            select s_name, l_orderkey, l_suppkey
            from ${nation} n join ${supplier} s
            on s.s_nationkey = n.n_nationkey
               and n.n_name = &apos;SAUDI ARABIA&apos;
            join ${lineitem} l
            on s.s_suppkey = l.l_suppkey
            where
            l.l_receiptdate &gt; l.l_commitdate
          ) l1 on o.o_orderkey = l1.l_orderkey
                  and o.o_orderstatus = &apos;F&apos;
       ) l2 on l2.l_orderkey = t1.l_orderkey
    ) a
    where
      (count_suppkey &gt; 1) or ((count_suppkey=1)
      and (l_suppkey &lt;&gt; max_suppkey))
   ) l3 on l3.l_orderkey = t2.l_orderkey
  ) b
  where
    (count_suppkey is null) or ((count_suppkey=1)
    and (l_suppkey = max_suppkey))
) c
group by s_name
order by numwait desc, s_name
limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-022" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	sum(l_extendedprice) / 7.0 as avg_yearly
from
	${lineitem},
	${part}
where
	p_partkey = l_partkey
	and p_brand = &apos;Brand#23&apos;
	and p_container = &apos;MED BOX&apos;
	and l_quantity &lt; (
		select
			0.2 * avg(l_quantity)
		from
			${lineitem}
		where
			l_partkey = p_partkey
	)

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-023" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice,
	sum(l_quantity)
from
	${customer},
	${orders},
	${lineitem}
where
	o_orderkey in (
		select
			l_orderkey
		from
			${lineitem}
		group by
			l_orderkey having
				sum(l_quantity) &gt; 300
	)
	and c_custkey = o_custkey
	and o_orderkey = l_orderkey
group by
	c_name,
	c_custkey,
	o_orderkey,
	o_orderdate,
	o_totalprice
order by
	o_totalprice desc,
	o_orderdate
limit 100
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-024" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	sum(l_extendedprice* (1 - l_discount)) as revenue
from
	${lineitem},
	${part}
where
	(
		p_partkey = l_partkey
		and p_brand = &apos;Brand#12&apos;
		and p_container in (&apos;SM CASE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;)
		and l_quantity &gt;= 1 and l_quantity &lt;= 1 + 10
		and p_size between 1 and 5
		and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;)
		and l_shipinstruct = &apos;DELIVER IN PERSON&apos;
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = &apos;Brand#23&apos;
		and p_container in (&apos;MED BAG&apos;, &apos;MED BOX&apos;, &apos;MED PKG&apos;, &apos;MED PACK&apos;)
		and l_quantity &gt;= 10 and l_quantity &lt;= 10 + 10
		and p_size between 1 and 10
		and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;)
		and l_shipinstruct = &apos;DELIVER IN PERSON&apos;
	)
	or
	(
		p_partkey = l_partkey
		and p_brand = &apos;Brand#34&apos;
		and p_container in (&apos;LG CASE&apos;, &apos;LG BOX&apos;, &apos;LG PACK&apos;, &apos;LG PKG&apos;)
		and l_quantity &gt;= 20 and l_quantity &lt;= 20 + 10
		and p_size between 1 and 15
		and l_shipmode in (&apos;AIR&apos;, &apos;AIR REG&apos;)
		and l_shipinstruct = &apos;DELIVER IN PERSON&apos;
	)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-025" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	s_name,
	s_address
from
	${supplier},
	${nation}
where
	s_suppkey in (
		select
			ps_suppkey
		from
			${partsupp}
		where
			ps_partkey in (
				select
					p_partkey
				from
					${part}
				where
					p_name like &apos;forest%&apos;
			)
			and ps_availqty &gt; (
				select
					0.5 * sum(l_quantity)
				from
					${lineitem}
				where
					l_partkey = ps_partkey
					and l_suppkey = ps_suppkey
					and l_shipdate &gt;= date &apos;1994-01-01&apos;
					and l_shipdate &lt; date &apos;1994-01-01&apos; + interval &apos;1&apos; year
			)
	)
	and s_nationkey = n_nationkey
	and n_name = &apos;CANADA&apos;
order by
	s_name

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-026" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	s_name,
	count(*) as numwait
from
	${supplier},
	${lineitem} l1,
	${orders},
	${nation}
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = &apos;F&apos;
	and l1.l_receiptdate &gt; l1.l_commitdate
	and exists (
		select
			*
		from
			${lineitem} l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey &lt;&gt; l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			${lineitem} l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey &lt;&gt; l1.l_suppkey
			and l3.l_receiptdate &gt; l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = &apos;SAUDI ARABIA&apos;
group by
	s_name
order by
	numwait desc,
	s_name
limit 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TC-027" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
	cntrycode,
	count(*) as numcust,
	sum(c_acctbal) as totacctbal
from
	(
		select
			substring(c_phone, 1, 2) as cntrycode,
			c_acctbal
		from
			${customer}
		where
			substring(c_phone, 1, 2) in
				(&apos;13&apos;, &apos;31&apos;, &apos;23&apos;, &apos;29&apos;, &apos;30&apos;, &apos;18&apos;, &apos;17&apos;)
			and c_acctbal &gt; (
				select
					avg(c_acctbal)
				from
					${customer}
				where
					c_acctbal &gt; 0.00
					and substring(c_phone, 1, 2) in
						(&apos;13&apos;, &apos;31&apos;, &apos;23&apos;, &apos;29&apos;, &apos;30&apos;, &apos;18&apos;, &apos;17&apos;)
			)
			and not exists (
				select
					*
				from
					${orders}
				where
					o_custkey = c_custkey
			)
	) as custsale
group by
	cntrycode
order by
	cntrycode
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
