<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="tpcds_url" elementType="Argument">
            <stringProp name="Argument.name">tpcds_url</stringProp>
            <stringProp name="Argument.value">hdfs://node1:8020/node3/linkoopdb/gloway/tpcds-1g</stringProp>
            <stringProp name="Argument.desc">data url on hdfs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="node4" elementType="Argument">
            <stringProp name="Argument.name">node4</stringProp>
            <stringProp name="Argument.value">a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ip" elementType="Argument">
            <stringProp name="Argument.name">ip</stringProp>
            <stringProp name="Argument.value">192.168.1.73</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="node4" enabled="true">
        <stringProp name="TestPlan.comments">JDBC连接</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">${node4}</stringProp>
        <stringProp name="dbUrl">jdbc:linkoopdb:tcp://${ip}:9105/ldb</stringProp>
        <stringProp name="driver">com.datapps.linkoopdb.jdbc.JdbcDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">123456</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">admin</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="simple performance test" enabled="true">
        <stringProp name="TestPlan.comments">性能测试</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create external table" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="drop table" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">drop table ex_customer_address if exists cascade;
drop table ex_customer_demographics if exists cascade;
drop table ex_date_dim if exists cascade;
drop table ex_warehouse if exists cascade;
drop table ex_ship_mode if exists cascade;
drop table ex_time_dim if exists cascade;
drop table ex_reason if exists cascade;
drop table ex_income_band if exists cascade;
drop table ex_item if exists cascade;
drop table ex_store if exists cascade;
drop table ex_call_center if exists cascade;
drop table ex_customer if exists cascade;
drop table ex_web_site if exists cascade;
drop table ex_store_returns if exists cascade;
drop table ex_household_demographics if exists cascade;
drop table ex_web_page if exists cascade;
drop table ex_promotion if exists cascade;
drop table ex_catalog_page if exists cascade;
drop table ex_inventory if exists cascade;
drop table ex_catalog_returns if exists cascade;
drop table ex_web_returns if exists cascade;
drop table ex_web_sales if exists cascade;
drop table ex_catalog_sales if exists cascade;
drop table ex_store_sales if exists cascade;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_customer_address" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_customer_address
(
    ca_address_sk             integer               not null,
    ca_address_id             char(16)              not null,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)                      ,
    primary key (ca_address_sk)
) location (&apos;${tpcds_url}/customer_address&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_customer_demographics" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_customer_demographics
(
    cd_demo_sk                integer               not null,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      integer                       ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              integer                       ,
    cd_dep_employed_count     integer                       ,
    cd_dep_college_count      integer                       ,
    primary key (cd_demo_sk)
) location (&apos;${tpcds_url}/customer_demographics&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_date_dim" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_date_dim
(
    d_date_sk                 integer               not null,
    d_date_id                 char(16)              not null,
    d_date                    date                          ,
    d_month_seq               integer                       ,
    d_week_seq                integer                       ,
    d_quarter_seq             integer                       ,
    d_year                    integer                       ,
    d_dow                     integer                       ,
    d_moy                     integer                       ,
    d_dom                     integer                       ,
    d_qoy                     integer                       ,
    d_fy_year                 integer                       ,
    d_fy_quarter_seq          integer                       ,
    d_fy_week_seq             integer                       ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               integer                       ,
    d_last_dom                integer                       ,
    d_same_day_ly             integer                       ,
    d_same_day_lq             integer                       ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)                       ,
    primary key (d_date_sk)
) location (&apos;${tpcds_url}/date_dim&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_warehouse" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_warehouse
(
    w_warehouse_sk            integer               not null,
    w_warehouse_id            char(16)              not null,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         integer                       ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)                  ,
    primary key (w_warehouse_sk)
) location (&apos;${tpcds_url}/warehouse&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_ship_mode" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_ship_mode
(
    sm_ship_mode_sk           integer               not null,
    sm_ship_mode_id           char(16)              not null,
    sm_type                   char(30)                      ,
    sm_code                   char(10)                      ,
    sm_carrier                char(20)                      ,
    sm_contract               char(20)                      ,
    primary key (sm_ship_mode_sk)
) location (&apos;${tpcds_url}/ship_mode&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_time_dim" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_time_dim
(
    t_time_sk                 integer               not null,
    t_time_id                 char(16)              not null,
    t_time                    integer                       ,
    t_hour                    integer                       ,
    t_minute                  integer                       ,
    t_second                  integer                       ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                      ,
    primary key (t_time_sk)
) location (&apos;${tpcds_url}/time_dim&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_reason" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_reason
(
    r_reason_sk               integer               not null,
    r_reason_id               char(16)              not null,
    r_reason_desc             char(100)                     ,
    primary key (r_reason_sk)
) location (&apos;${tpcds_url}/reason&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_income_band" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_income_band
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer                       ,
    primary key (ib_income_band_sk)
) location (&apos;${tpcds_url}/income_band&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_item" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_item
(
    i_item_sk                 integer               not null,
    i_item_id                 char(16)              not null,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                integer                       ,
    i_brand                   char(50)                      ,
    i_class_id                integer                       ,
    i_class                   char(50)                      ,
    i_category_id             integer                       ,
    i_category                char(50)                      ,
    i_manufact_id             integer                       ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              integer                       ,
    i_product_name            char(50)                      ,
    primary key (i_item_sk)
) location (&apos;${tpcds_url}/item&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_store" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          integer                       ,
    s_store_name              varchar(50)                   ,
    s_number_employees        integer                       ,
    s_floor_space             integer                       ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               integer                       ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             integer                       ,
    s_division_name           varchar(50)                   ,
    s_company_id              integer                       ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  ,
    primary key (s_store_sk)
) location (&apos;${tpcds_url}/store&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_call_center" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_rec_start_date         date                          ,
    cc_rec_end_date           date                          ,
    cc_closed_date_sk         integer                       ,
    cc_open_date_sk           integer                       ,
    cc_name                   varchar(50)                   ,
    cc_class                  varchar(50)                   ,
    cc_employees              integer                       ,
    cc_sq_ft                  integer                       ,
    cc_hours                  char(20)                      ,
    cc_manager                varchar(40)                   ,
    cc_mkt_id                 integer                       ,
    cc_mkt_class              char(50)                      ,
    cc_mkt_desc               varchar(100)                  ,
    cc_market_manager         varchar(40)                   ,
    cc_division               integer                       ,
    cc_division_name          varchar(50)                   ,
    cc_company                integer                       ,
    cc_company_name           char(50)                      ,
    cc_street_number          char(10)                      ,
    cc_street_name            varchar(60)                   ,
    cc_street_type            char(15)                      ,
    cc_suite_number           char(10)                      ,
    cc_city                   varchar(60)                   ,
    cc_county                 varchar(30)                   ,
    cc_state                  char(2)                       ,
    cc_zip                    char(10)                      ,
    cc_country                varchar(20)                   ,
    cc_gmt_offset             decimal(5,2)                  ,
    cc_tax_percentage         decimal(5,2)                  ,
    primary key (cc_call_center_sk)
) location (&apos;${tpcds_url}/call_center&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_customer" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_customer
(
    c_customer_sk             integer               not null,
    c_customer_id             char(16)              not null,
    c_current_cdemo_sk        integer                       ,
    c_current_hdemo_sk        integer                       ,
    c_current_addr_sk         integer                       ,
    c_first_shipto_date_sk    integer                       ,
    c_first_sales_date_sk     integer                       ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               integer                       ,
    c_birth_month             integer                       ,
    c_birth_year              integer                       ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)                      ,
    primary key (c_customer_sk)
) location (&apos;${tpcds_url}/customer&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_web_site" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_web_site
(
    web_site_sk               integer               not null,
    web_site_id               char(16)              not null,
    web_rec_start_date        date                          ,
    web_rec_end_date          date                          ,
    web_name                  varchar(50)                   ,
    web_open_date_sk          integer                       ,
    web_close_date_sk         integer                       ,
    web_class                 varchar(50)                   ,
    web_manager               varchar(40)                   ,
    web_mkt_id                integer                       ,
    web_mkt_class             varchar(50)                   ,
    web_mkt_desc              varchar(100)                  ,
    web_market_manager        varchar(40)                   ,
    web_company_id            integer                       ,
    web_company_name          char(50)                      ,
    web_street_number         char(10)                      ,
    web_street_name           varchar(60)                   ,
    web_street_type           char(15)                      ,
    web_suite_number          char(10)                      ,
    web_city                  varchar(60)                   ,
    web_county                varchar(30)                   ,
    web_state                 char(2)                       ,
    web_zip                   char(10)                      ,
    web_country               varchar(20)                   ,
    web_gmt_offset            decimal(5,2)                  ,
    web_tax_percentage        decimal(5,2)                  ,
    primary key (web_site_sk)
) location (&apos;${tpcds_url}/web_site&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_store_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_store_returns
(
    sr_returned_date_sk       integer                       ,
    sr_return_time_sk         integer                       ,
    sr_item_sk                integer               not null,
    sr_customer_sk            integer                       ,
    sr_cdemo_sk               integer                       ,
    sr_hdemo_sk               integer                       ,
    sr_addr_sk                integer                       ,
    sr_store_sk               integer                       ,
    sr_reason_sk              integer                       ,
    sr_ticket_number          bigint               not null,
    sr_return_quantity        integer                       ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)                  ,
    primary key (sr_item_sk, sr_ticket_number)
) location (&apos;${tpcds_url}/store_returns&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_household_demographics" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_household_demographics
(
    hd_demo_sk                integer               not null,
    hd_income_band_sk         integer                       ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              integer                       ,
    hd_vehicle_count          integer                       ,
    primary key (hd_demo_sk)
) location (&apos;${tpcds_url}/household_demographics&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_web_page" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_web_page
(
    wp_web_page_sk            integer               not null,
    wp_web_page_id            char(16)              not null,
    wp_rec_start_date         date                          ,
    wp_rec_end_date           date                          ,
    wp_creation_date_sk       integer                       ,
    wp_access_date_sk         integer                       ,
    wp_autogen_flag           char(1)                       ,
    wp_customer_sk            integer                       ,
    wp_url                    varchar(100)                  ,
    wp_type                   char(50)                      ,
    wp_char_count             integer                       ,
    wp_link_count             integer                       ,
    wp_image_count            integer                       ,
    wp_max_ad_count           integer                       ,
    primary key (wp_web_page_sk)
) location (&apos;${tpcds_url}/web_page&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_promotion" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_promotion
(
    p_promo_sk                integer               not null,
    p_promo_id                char(16)              not null,
    p_start_date_sk           integer                       ,
    p_end_date_sk             integer                       ,
    p_item_sk                 integer                       ,
    p_cost                    decimal(15,2)                 ,
    p_response_target         integer                       ,
    p_promo_name              char(50)                      ,
    p_channel_dmail           char(1)                       ,
    p_channel_email           char(1)                       ,
    p_channel_catalog         char(1)                       ,
    p_channel_tv              char(1)                       ,
    p_channel_radio           char(1)                       ,
    p_channel_press           char(1)                       ,
    p_channel_event           char(1)                       ,
    p_channel_demo            char(1)                       ,
    p_channel_details         varchar(100)                  ,
    p_purpose                 char(15)                      ,
    p_discount_active         char(1)                       ,
    primary key (p_promo_sk)
) location (&apos;${tpcds_url}/promotion&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_catalog_page" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_catalog_page
(
    cp_catalog_page_sk        integer               not null,
    cp_catalog_page_id        char(16)              not null,
    cp_start_date_sk          integer                       ,
    cp_end_date_sk            integer                       ,
    cp_department             varchar(50)                   ,
    cp_catalog_number         integer                       ,
    cp_catalog_page_number    integer                       ,
    cp_description            varchar(100)                  ,
    cp_type                   varchar(100)                  ,
    primary key (cp_catalog_page_sk)
) location (&apos;${tpcds_url}/catalog_page&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_inventory" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_inventory
(
    inv_date_sk               integer               not null,
    inv_item_sk               integer               not null,
    inv_warehouse_sk          integer               not null,
    inv_quantity_on_hand      integer                       ,
    primary key (inv_date_sk, inv_item_sk, inv_warehouse_sk)
) location (&apos;${tpcds_url}/inventory&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_catalog_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_catalog_returns
(
    cr_returned_date_sk       integer                       ,
    cr_returned_time_sk       integer                       ,
    cr_item_sk                integer               not null,
    cr_refunded_customer_sk   integer                       ,
    cr_refunded_cdemo_sk      integer                       ,
    cr_refunded_hdemo_sk      integer                       ,
    cr_refunded_addr_sk       integer                       ,
    cr_returning_customer_sk  integer                       ,
    cr_returning_cdemo_sk     integer                       ,
    cr_returning_hdemo_sk     integer                       ,
    cr_returning_addr_sk      integer                       ,
    cr_call_center_sk         integer                       ,
    cr_catalog_page_sk        integer                       ,
    cr_ship_mode_sk           integer                       ,
    cr_warehouse_sk           integer                       ,
    cr_reason_sk              integer                       ,
    cr_order_number           bigint               not null,
    cr_return_quantity        integer                       ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)                  ,
    primary key (cr_item_sk, cr_order_number)
) location (&apos;${tpcds_url}/catalog_returns&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_web_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_web_returns
(
    wr_returned_date_sk       integer                       ,
    wr_returned_time_sk       integer                       ,
    wr_item_sk                integer               not null,
    wr_refunded_customer_sk   integer                       ,
    wr_refunded_cdemo_sk      integer                       ,
    wr_refunded_hdemo_sk      integer                       ,
    wr_refunded_addr_sk       integer                       ,
    wr_returning_customer_sk  integer                       ,
    wr_returning_cdemo_sk     integer                       ,
    wr_returning_hdemo_sk     integer                       ,
    wr_returning_addr_sk      integer                       ,
    wr_web_page_sk            integer                       ,
    wr_reason_sk              integer                       ,
    wr_order_number           bigint               not null,
    wr_return_quantity        integer                       ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)                  ,
    primary key (wr_item_sk, wr_order_number)
) location (&apos;${tpcds_url}/web_returns&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_web_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_web_sales
(
    ws_sold_date_sk           integer                       ,
    ws_sold_time_sk           integer                       ,
    ws_ship_date_sk           integer                       ,
    ws_item_sk                integer               not null,
    ws_bill_customer_sk       integer                       ,
    ws_bill_cdemo_sk          integer                       ,
    ws_bill_hdemo_sk          integer                       ,
    ws_bill_addr_sk           integer                       ,
    ws_ship_customer_sk       integer                       ,
    ws_ship_cdemo_sk          integer                       ,
    ws_ship_hdemo_sk          integer                       ,
    ws_ship_addr_sk           integer                       ,
    ws_web_page_sk            integer                       ,
    ws_web_site_sk            integer                       ,
    ws_ship_mode_sk           integer                       ,
    ws_warehouse_sk           integer                       ,
    ws_promo_sk               integer                       ,
    ws_order_number           bigint               not null,
    ws_quantity               integer                       ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)                  ,
    primary key (ws_item_sk, ws_order_number)
) location (&apos;${tpcds_url}/web_sales&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_catalog_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_catalog_sales
(
    cs_sold_date_sk           integer                       ,
    cs_sold_time_sk           integer                       ,
    cs_ship_date_sk           integer                       ,
    cs_bill_customer_sk       integer                       ,
    cs_bill_cdemo_sk          integer                       ,
    cs_bill_hdemo_sk          integer                       ,
    cs_bill_addr_sk           integer                       ,
    cs_ship_customer_sk       integer                       ,
    cs_ship_cdemo_sk          integer                       ,
    cs_ship_hdemo_sk          integer                       ,
    cs_ship_addr_sk           integer                       ,
    cs_call_center_sk         integer                       ,
    cs_catalog_page_sk        integer                       ,
    cs_ship_mode_sk           integer                       ,
    cs_warehouse_sk           integer                       ,
    cs_item_sk                integer               not null,
    cs_promo_sk               integer                       ,
    cs_order_number           bigint               not null,
    cs_quantity               integer                       ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)                  ,
    primary key (cs_item_sk, cs_order_number)
) location (&apos;${tpcds_url}/catalog_sales&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create external table ex_store_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create external table ex_store_sales
(
    ss_sold_date_sk           integer                       ,
    ss_sold_time_sk           integer                       ,
    ss_item_sk                integer               not null,
    ss_customer_sk            integer                       ,
    ss_cdemo_sk               integer                       ,
    ss_hdemo_sk               integer                       ,
    ss_addr_sk                integer                       ,
    ss_store_sk               integer                       ,
    ss_promo_sk               integer                       ,
    ss_ticket_number          bigint               not null,
    ss_quantity               integer                       ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)                  ,
    primary key (ss_item_sk, ss_ticket_number)
) location (&apos;${tpcds_url}/store_sales&apos;) format &apos;parquet&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create inner table with data" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="drop table" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">drop table customer_address if exists cascade;
drop table customer_demographics if exists cascade;
drop table date_dim if exists cascade;
drop table warehouse if exists cascade;
drop table ship_mode if exists cascade;
drop table time_dim if exists cascade;
drop table reason if exists cascade;
drop table income_band if exists cascade;
drop table item if exists cascade;
drop table store if exists cascade;
drop table call_center if exists cascade;
drop table customer if exists cascade;
drop table web_site if exists cascade;
drop table store_returns if exists cascade;
drop table household_demographics if exists cascade;
drop table web_page if exists cascade;
drop table promotion if exists cascade;
drop table catalog_page if exists cascade;
drop table inventory if exists cascade;
drop table catalog_returns if exists cascade;
drop table web_returns if exists cascade;
drop table web_sales if exists cascade;
drop table catalog_sales if exists cascade;
drop table store_sales if exists cascade;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table customer_address" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table customer_address
(
    ca_address_sk             integer               not null,
    ca_address_id             char(16)              not null,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)                      ,
    primary key (ca_address_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table customer_demographics" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table customer_demographics
(
    cd_demo_sk                integer               not null,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      integer                       ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              integer                       ,
    cd_dep_employed_count     integer                       ,
    cd_dep_college_count      integer                       ,
    primary key (cd_demo_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table date_dim" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table date_dim
(
    d_date_sk                 integer               not null,
    d_date_id                 char(16)              not null,
    d_date                    date                          ,
    d_month_seq               integer                       ,
    d_week_seq                integer                       ,
    d_quarter_seq             integer                       ,
    d_year                    integer                       ,
    d_dow                     integer                       ,
    d_moy                     integer                       ,
    d_dom                     integer                       ,
    d_qoy                     integer                       ,
    d_fy_year                 integer                       ,
    d_fy_quarter_seq          integer                       ,
    d_fy_week_seq             integer                       ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               integer                       ,
    d_last_dom                integer                       ,
    d_same_day_ly             integer                       ,
    d_same_day_lq             integer                       ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)                       ,
    primary key (d_date_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table warehouse" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table warehouse
(
    w_warehouse_sk            integer               not null,
    w_warehouse_id            char(16)              not null,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         integer                       ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)                  ,
    primary key (w_warehouse_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table ship_mode" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table ship_mode
(
    sm_ship_mode_sk           integer               not null,
    sm_ship_mode_id           char(16)              not null,
    sm_type                   char(30)                      ,
    sm_code                   char(10)                      ,
    sm_carrier                char(20)                      ,
    sm_contract               char(20)                      ,
    primary key (sm_ship_mode_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table time_dim" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table time_dim
(
    t_time_sk                 integer               not null,
    t_time_id                 char(16)              not null,
    t_time                    integer                       ,
    t_hour                    integer                       ,
    t_minute                  integer                       ,
    t_second                  integer                       ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                      ,
    primary key (t_time_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table reason" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table reason
(
    r_reason_sk               integer               not null,
    r_reason_id               char(16)              not null,
    r_reason_desc             char(100)                     ,
    primary key (r_reason_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table income_band" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table income_band
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer                       ,
    primary key (ib_income_band_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table item" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table item
(
    i_item_sk                 integer               not null,
    i_item_id                 char(16)              not null,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                integer                       ,
    i_brand                   char(50)                      ,
    i_class_id                integer                       ,
    i_class                   char(50)                      ,
    i_category_id             integer                       ,
    i_category                char(50)                      ,
    i_manufact_id             integer                       ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              integer                       ,
    i_product_name            char(50)                      ,
    primary key (i_item_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table store" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          integer                       ,
    s_store_name              varchar(50)                   ,
    s_number_employees        integer                       ,
    s_floor_space             integer                       ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               integer                       ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             integer                       ,
    s_division_name           varchar(50)                   ,
    s_company_id              integer                       ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  ,
    primary key (s_store_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table call_center" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_rec_start_date         date                          ,
    cc_rec_end_date           date                          ,
    cc_closed_date_sk         integer                       ,
    cc_open_date_sk           integer                       ,
    cc_name                   varchar(50)                   ,
    cc_class                  varchar(50)                   ,
    cc_employees              integer                       ,
    cc_sq_ft                  integer                       ,
    cc_hours                  char(20)                      ,
    cc_manager                varchar(40)                   ,
    cc_mkt_id                 integer                       ,
    cc_mkt_class              char(50)                      ,
    cc_mkt_desc               varchar(100)                  ,
    cc_market_manager         varchar(40)                   ,
    cc_division               integer                       ,
    cc_division_name          varchar(50)                   ,
    cc_company                integer                       ,
    cc_company_name           char(50)                      ,
    cc_street_number          char(10)                      ,
    cc_street_name            varchar(60)                   ,
    cc_street_type            char(15)                      ,
    cc_suite_number           char(10)                      ,
    cc_city                   varchar(60)                   ,
    cc_county                 varchar(30)                   ,
    cc_state                  char(2)                       ,
    cc_zip                    char(10)                      ,
    cc_country                varchar(20)                   ,
    cc_gmt_offset             decimal(5,2)                  ,
    cc_tax_percentage         decimal(5,2)                  ,
    primary key (cc_call_center_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table customer" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table customer
(
    c_customer_sk             integer               not null,
    c_customer_id             char(16)              not null,
    c_current_cdemo_sk        integer                       ,
    c_current_hdemo_sk        integer                       ,
    c_current_addr_sk         integer                       ,
    c_first_shipto_date_sk    integer                       ,
    c_first_sales_date_sk     integer                       ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               integer                       ,
    c_birth_month             integer                       ,
    c_birth_year              integer                       ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)                      ,
    primary key (c_customer_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table web_site" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table web_site
(
    web_site_sk               integer               not null,
    web_site_id               char(16)              not null,
    web_rec_start_date        date                          ,
    web_rec_end_date          date                          ,
    web_name                  varchar(50)                   ,
    web_open_date_sk          integer                       ,
    web_close_date_sk         integer                       ,
    web_class                 varchar(50)                   ,
    web_manager               varchar(40)                   ,
    web_mkt_id                integer                       ,
    web_mkt_class             varchar(50)                   ,
    web_mkt_desc              varchar(100)                  ,
    web_market_manager        varchar(40)                   ,
    web_company_id            integer                       ,
    web_company_name          char(50)                      ,
    web_street_number         char(10)                      ,
    web_street_name           varchar(60)                   ,
    web_street_type           char(15)                      ,
    web_suite_number          char(10)                      ,
    web_city                  varchar(60)                   ,
    web_county                varchar(30)                   ,
    web_state                 char(2)                       ,
    web_zip                   char(10)                      ,
    web_country               varchar(20)                   ,
    web_gmt_offset            decimal(5,2)                  ,
    web_tax_percentage        decimal(5,2)                  ,
    primary key (web_site_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table store_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table store_returns
(
    sr_returned_date_sk       integer                       ,
    sr_return_time_sk         integer                       ,
    sr_item_sk                integer               not null,
    sr_customer_sk            integer                       ,
    sr_cdemo_sk               integer                       ,
    sr_hdemo_sk               integer                       ,
    sr_addr_sk                integer                       ,
    sr_store_sk               integer                       ,
    sr_reason_sk              integer                       ,
    sr_ticket_number          bigint               not null,
    sr_return_quantity        integer                       ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)                  ,
    primary key (sr_item_sk, sr_ticket_number)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table household_demographics" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table household_demographics
(
    hd_demo_sk                integer               not null,
    hd_income_band_sk         integer                       ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              integer                       ,
    hd_vehicle_count          integer                       ,
    primary key (hd_demo_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table web_page" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table web_page
(
    wp_web_page_sk            integer               not null,
    wp_web_page_id            char(16)              not null,
    wp_rec_start_date         date                          ,
    wp_rec_end_date           date                          ,
    wp_creation_date_sk       integer                       ,
    wp_access_date_sk         integer                       ,
    wp_autogen_flag           char(1)                       ,
    wp_customer_sk            integer                       ,
    wp_url                    varchar(100)                  ,
    wp_type                   char(50)                      ,
    wp_char_count             integer                       ,
    wp_link_count             integer                       ,
    wp_image_count            integer                       ,
    wp_max_ad_count           integer                       ,
    primary key (wp_web_page_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table promotion" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table promotion
(
    p_promo_sk                integer               not null,
    p_promo_id                char(16)              not null,
    p_start_date_sk           integer                       ,
    p_end_date_sk             integer                       ,
    p_item_sk                 integer                       ,
    p_cost                    decimal(15,2)                 ,
    p_response_target         integer                       ,
    p_promo_name              char(50)                      ,
    p_channel_dmail           char(1)                       ,
    p_channel_email           char(1)                       ,
    p_channel_catalog         char(1)                       ,
    p_channel_tv              char(1)                       ,
    p_channel_radio           char(1)                       ,
    p_channel_press           char(1)                       ,
    p_channel_event           char(1)                       ,
    p_channel_demo            char(1)                       ,
    p_channel_details         varchar(100)                  ,
    p_purpose                 char(15)                      ,
    p_discount_active         char(1)                       ,
    primary key (p_promo_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table catalog_page" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table catalog_page
(
    cp_catalog_page_sk        integer               not null,
    cp_catalog_page_id        char(16)              not null,
    cp_start_date_sk          integer                       ,
    cp_end_date_sk            integer                       ,
    cp_department             varchar(50)                   ,
    cp_catalog_number         integer                       ,
    cp_catalog_page_number    integer                       ,
    cp_description            varchar(100)                  ,
    cp_type                   varchar(100)                  ,
    primary key (cp_catalog_page_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table inventory" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table inventory
(
    inv_date_sk               integer               not null,
    inv_item_sk               integer               not null,
    inv_warehouse_sk          integer               not null,
    inv_quantity_on_hand      integer                       ,
    primary key (inv_date_sk, inv_item_sk, inv_warehouse_sk)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table catalog_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table catalog_returns
(
    cr_returned_date_sk       integer                       ,
    cr_returned_time_sk       integer                       ,
    cr_item_sk                integer               not null,
    cr_refunded_customer_sk   integer                       ,
    cr_refunded_cdemo_sk      integer                       ,
    cr_refunded_hdemo_sk      integer                       ,
    cr_refunded_addr_sk       integer                       ,
    cr_returning_customer_sk  integer                       ,
    cr_returning_cdemo_sk     integer                       ,
    cr_returning_hdemo_sk     integer                       ,
    cr_returning_addr_sk      integer                       ,
    cr_call_center_sk         integer                       ,
    cr_catalog_page_sk        integer                       ,
    cr_ship_mode_sk           integer                       ,
    cr_warehouse_sk           integer                       ,
    cr_reason_sk              integer                       ,
    cr_order_number           bigint               not null,
    cr_return_quantity        integer                       ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)                  ,
    primary key (cr_item_sk, cr_order_number)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table web_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table web_returns
(
    wr_returned_date_sk       integer                       ,
    wr_returned_time_sk       integer                       ,
    wr_item_sk                integer               not null,
    wr_refunded_customer_sk   integer                       ,
    wr_refunded_cdemo_sk      integer                       ,
    wr_refunded_hdemo_sk      integer                       ,
    wr_refunded_addr_sk       integer                       ,
    wr_returning_customer_sk  integer                       ,
    wr_returning_cdemo_sk     integer                       ,
    wr_returning_hdemo_sk     integer                       ,
    wr_returning_addr_sk      integer                       ,
    wr_web_page_sk            integer                       ,
    wr_reason_sk              integer                       ,
    wr_order_number           bigint               not null,
    wr_return_quantity        integer                       ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)                  ,
    primary key (wr_item_sk, wr_order_number)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table web_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table web_sales
(
    ws_sold_date_sk           integer                       ,
    ws_sold_time_sk           integer                       ,
    ws_ship_date_sk           integer                       ,
    ws_item_sk                integer               not null,
    ws_bill_customer_sk       integer                       ,
    ws_bill_cdemo_sk          integer                       ,
    ws_bill_hdemo_sk          integer                       ,
    ws_bill_addr_sk           integer                       ,
    ws_ship_customer_sk       integer                       ,
    ws_ship_cdemo_sk          integer                       ,
    ws_ship_hdemo_sk          integer                       ,
    ws_ship_addr_sk           integer                       ,
    ws_web_page_sk            integer                       ,
    ws_web_site_sk            integer                       ,
    ws_ship_mode_sk           integer                       ,
    ws_warehouse_sk           integer                       ,
    ws_promo_sk               integer                       ,
    ws_order_number           bigint               not null,
    ws_quantity               integer                       ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)                  ,
    primary key (ws_item_sk, ws_order_number)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table catalog_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table catalog_sales
(
    cs_sold_date_sk           integer                       ,
    cs_sold_time_sk           integer                       ,
    cs_ship_date_sk           integer                       ,
    cs_bill_customer_sk       integer                       ,
    cs_bill_cdemo_sk          integer                       ,
    cs_bill_hdemo_sk          integer                       ,
    cs_bill_addr_sk           integer                       ,
    cs_ship_customer_sk       integer                       ,
    cs_ship_cdemo_sk          integer                       ,
    cs_ship_hdemo_sk          integer                       ,
    cs_ship_addr_sk           integer                       ,
    cs_call_center_sk         integer                       ,
    cs_catalog_page_sk        integer                       ,
    cs_ship_mode_sk           integer                       ,
    cs_warehouse_sk           integer                       ,
    cs_item_sk                integer               not null,
    cs_promo_sk               integer                       ,
    cs_order_number           bigint               not null,
    cs_quantity               integer                       ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)                  ,
    primary key (cs_item_sk, cs_order_number)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create table store_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">create table store_sales
(
    ss_sold_date_sk           integer                       ,
    ss_sold_time_sk           integer                       ,
    ss_item_sk                integer               not null,
    ss_customer_sk            integer                       ,
    ss_cdemo_sk               integer                       ,
    ss_hdemo_sk               integer                       ,
    ss_addr_sk                integer                       ,
    ss_store_sk               integer                       ,
    ss_promo_sk               integer                       ,
    ss_ticket_number          bigint               not null,
    ss_quantity               integer                       ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)                  ,
    primary key (ss_item_sk, ss_ticket_number)
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="load data" enabled="false"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into customer_address select * from ex_customer_address" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into customer_address
select * from ex_customer_address</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into customer_demographics select * from ex_customer_demographics" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into customer_demographics
select * from ex_customer_demographics</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into date_dim select * from ex_date_dim" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into date_dim
select * from ex_date_dim</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into warehouse select * from ex_warehouse" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into warehouse
select * from ex_warehouse</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into ship_mode select * from ex_ship_mode" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into ship_mode
select * from ex_ship_mode</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into time_dim select * from ex_time_dim" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into time_dim
select * from ex_time_dim</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into reason select * from ex_reason" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into reason
select * from ex_reason</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into income_band select * from ex_income_band" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into income_band
select * from ex_income_band</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into item select * from ex_item" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into item
select * from ex_item</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into store select * from ex_store" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into store
select * from ex_store</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into call_center select * from ex_call_center" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into call_center
select * from ex_call_center</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into customer select * from ex_customer" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into customer
select * from ex_customer</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into web_site select * from ex_web_site" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into web_site
select * from ex_web_site</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into store_returns select * from ex_store_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into store_returns
select * from ex_store_returns</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into household_demographics select * from ex_household_demographics" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into household_demographics
select * from ex_household_demographics</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into web_page select * from ex_web_page" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into web_page
select * from ex_web_page</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into promotion select * from ex_promotion" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into promotion
select * from ex_promotion</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into catalog_page select * from ex_catalog_page" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into catalog_page
select * from ex_catalog_page</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into inventory select * from ex_inventory" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into inventory
select * from ex_inventory</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into catalog_returns select * from ex_catalog_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into catalog_returns
select * from ex_catalog_returns</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into web_returns select * from ex_web_returns" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into web_returns
select * from ex_web_returns</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into web_sales select * from ex_web_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into web_sales
select * from ex_web_sales</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into catalog_sales select * from ex_catalog_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into catalog_sales
select * from ex_catalog_sales</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into store_sales select * from ex_store_sales" enabled="true">
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="query">insert into store_sales
select * from ex_store_sales</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="test with Grouping and Aggregation" enabled="true">
          <stringProp name="TestPlan.comments">分组与聚合</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Aggregation" enabled="true">
            <stringProp name="TestPlan.comments">聚合</stringProp>
          </GenericController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT COUNT(CR_SHIP_MODE_SK) AS COUNTS, SUM(CR_RETURNED_DATE_SK) AS SUMS, AVG(CR_ITEM_SK) AS AVGS, MAX(CR_REFUNDED_CUSTOMER_SK) AS MAXS, MIN(CR_REFUNDED_CDEMO_SK) AS MINS  FROM PUBLIC.PUBLIC.CATALOG_RETURNS;" enabled="true">
              <stringProp name="TestPlan.comments">聚合函数</stringProp>
              <stringProp name="dataSource">${node4}</stringProp>
              <stringProp name="query">SELECT COUNT(CR_SHIP_MODE_SK) AS COUNTS,
SUM(CR_RETURNED_DATE_SK) AS SUMS,
AVG(CR_ITEM_SK) AS AVGS,
MAX(CR_REFUNDED_CUSTOMER_SK) AS MAXS,
MIN(CR_REFUNDED_CDEMO_SK) AS MINS 
FROM PUBLIC.PUBLIC.CATALOG_RETURNS;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT COUNT(I_CURRENT_PRICE),SUM(I_CURRENT_PRICE),AVG(I_CURRENT_PRICE),MAX(I_CURRENT_PRICE),MIN(I_CURRENT_PRICE) FROM ITEM;" enabled="true">
              <stringProp name="TestPlan.comments">聚合函数</stringProp>
              <stringProp name="dataSource">${node4}</stringProp>
              <stringProp name="query">SELECT COUNT(I_CURRENT_PRICE),SUM(I_CURRENT_PRICE),AVG(I_CURRENT_PRICE),MAX(I_CURRENT_PRICE),MIN(I_CURRENT_PRICE) FROM ITEM;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT COUNT(I_CURRENT_PRICE)A,SUM(I_CURRENT_PRICE)B,AVG(I_CURRENT_PRICE)C,MAX(I_CURRENT_PRICE)D,MIN(I_CURRENT_PRICE)E FROM ITEM;" enabled="true">
              <stringProp name="TestPlan.comments">聚合函数</stringProp>
              <stringProp name="dataSource">${node4}</stringProp>
              <stringProp name="query">SELECT COUNT(I_CURRENT_PRICE)A,SUM(I_CURRENT_PRICE)B,AVG(I_CURRENT_PRICE)C,MAX(I_CURRENT_PRICE)D,MIN(I_CURRENT_PRICE)E FROM ITEM;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Grouping" enabled="true">
            <stringProp name="TestPlan.comments">分组</stringProp>
          </GenericController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CP_CATALOG_PAGE_SK  FROM PUBLIC.PUBLIC.CATALOG_PAGE GROUP BY CP_CATALOG_PAGE_SK;" enabled="true">
              <stringProp name="TestPlan.comments">分组</stringProp>
              <stringProp name="dataSource">${node4}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT CP_CATALOG_PAGE_SK 
FROM PUBLIC.PUBLIC.CATALOG_PAGE
GROUP BY CP_CATALOG_PAGE_SK;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_CLASS,I_ITEM_ID, SUM(I_CURRENT_PRICE) FROM ITEM GROUP BY CUBE(I_CLASS,I_ITEM_ID) ORDER BY I_CLASS,I_ITEM_ID;" enabled="true">
              <stringProp name="TestPlan.comments">分组</stringProp>
              <stringProp name="dataSource">${node4}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT I_CLASS,I_ITEM_ID, SUM(I_CURRENT_PRICE) FROM ITEM
GROUP BY CUBE(I_CLASS,I_ITEM_ID)
ORDER BY I_CLASS,I_ITEM_ID;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Group by" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CS_SOLD_DATE_SK,CS_SOLD_TIME_SK,COUNT(CS_SOLD_DATE_SK) AS COUNTS,SUM(CS_SOLD_TIME_SK) AS SUMS,AVG(CS_ORDER_NUMBER) FROM PUBLIC.PUBLIC.CATALOG_SALES GROUP BY CS_SOLD_DATE_SK,CS_SOLD_TIME_SK;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组group by</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT CS_SOLD_DATE_SK,CS_SOLD_TIME_SK,
COUNT(CS_SOLD_DATE_SK) AS COUNTS,
SUM(CS_SOLD_TIME_SK) AS SUMS,
AVG(CS_ORDER_NUMBER)
FROM PUBLIC.PUBLIC.CATALOG_SALES
GROUP BY CS_SOLD_DATE_SK,CS_SOLD_TIME_SK;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT C_CUSTOMER_SK,C_CUSTOMER_ID, AVG(C_CURRENT_CDEMO_SK) AS AVGS, MAX(C_BIRTH_COUNTRY) AS MAXS, MIN(C_FIRST_SHIPTO_DATE_SK) AS MINS  FROM PUBLIC.PUBLIC.CUSTOMER GROUP BY ROLLUP(C_CUSTOMER_SK,C_CUSTOMER_ID);" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组group by rollup</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT C_CUSTOMER_SK,C_CUSTOMER_ID,
AVG(C_CURRENT_CDEMO_SK) AS AVGS,
MAX(C_BIRTH_COUNTRY) AS MAXS,
MIN(C_FIRST_SHIPTO_DATE_SK) AS MINS 
FROM PUBLIC.PUBLIC.CUSTOMER
GROUP BY ROLLUP(C_CUSTOMER_SK,C_CUSTOMER_ID);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CA_ADDRESS_SK,CA_ADDRESS_ID, COUNT(CA_ADDRESS_SK) AS COUNTS, SUM(CA_GMT_OFFSET) AS SUMS, AVG(CA_GMT_OFFSET) AS AVGS, MAX(CA_STREET_NAME) AS MAXS, MIN(CA_LOCATION_TYPE) AS MINS  FROM PUBLIC.PUBLIC.CUSTOMER_ADDRESS GROUP BY cube(CA_ADDRESS_SK,CA_ADDRESS_ID);" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组group by cube</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT CA_ADDRESS_SK,CA_ADDRESS_ID,
COUNT(CA_ADDRESS_SK) AS COUNTS,
SUM(CA_GMT_OFFSET) AS SUMS,
AVG(CA_GMT_OFFSET) AS AVGS,
MAX(CA_STREET_NAME) AS MAXS,
MIN(CA_LOCATION_TYPE) AS MINS 
FROM PUBLIC.PUBLIC.CUSTOMER_ADDRESS
GROUP BY cube(CA_ADDRESS_SK,CA_ADDRESS_ID);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CD_DEMO_SK,CD_DEMO_SK, COUNT(CD_DEP_COUNT) AS COUNTS, SUM(CD_DEP_EMPLOYED_COUNT) AS SUMS, AVG(CD_DEP_COLLEGE_COUNT) AS AVGS  FROM PUBLIC.PUBLIC.CUSTOMER_DEMOGRAPHICS GROUP BY GROUPING SETS((CD_DEMO_SK,CD_DEMO_SK));" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组group by grouping sets</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT CD_DEMO_SK,CD_DEMO_SK,
COUNT(CD_DEP_COUNT) AS COUNTS,
SUM(CD_DEP_EMPLOYED_COUNT) AS SUMS,
AVG(CD_DEP_COLLEGE_COUNT) AS AVGS 
FROM PUBLIC.PUBLIC.CUSTOMER_DEMOGRAPHICS
GROUP BY GROUPING SETS((CD_DEMO_SK,CD_DEMO_SK));</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Order by" enabled="true"/>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CD_DEMO_SK,CD_GENDER, SUM(CD_DEP_COUNT) AS SUMS, AVG(CD_DEP_COUNT) AS AVGS, MIN(CD_EDUCATION_STATUS) AS MINS  FROM PUBLIC.PUBLIC.CUSTOMER_DEMOGRAPHICS1 GROUP BY CD_DEMO_SK,CD_GENDER ORDER BY CD_DEMO_SK DESC,CD_GENDER ASC;" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT CD_DEMO_SK,CD_GENDER,
SUM(CD_DEP_COUNT) AS SUMS,
AVG(CD_DEP_COUNT) AS AVGS,
MIN(CD_EDUCATION_STATUS) AS MINS 
FROM PUBLIC.PUBLIC.CUSTOMER_DEMOGRAPHICS
GROUP BY CD_DEMO_SK,CD_GENDER
ORDER BY CD_DEMO_SK DESC,CD_GENDER ASC;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT P_PROMO_SK,P_PROMO_ID, SUM(P_PROMO_SK) AS SUMS, AVG(P_END_DATE_SK) AS AVGS, COUNT(P_ITEM_SK) AS COUNTS, MAX(P_COST) AS MAXS, MIN(P_PROMO_NAME) AS MINS  FROM PUBLIC.PUBLIC.PROMOTION GROUP BY P_PROMO_SK,P_PROMO_ID ORDER BY P_PROMO_SK DESC,P_PROMO_ID ASC;" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT P_PROMO_SK,P_PROMO_ID,
SUM(P_PROMO_SK) AS SUMS,
AVG(P_END_DATE_SK) AS AVGS,
COUNT(P_ITEM_SK) AS COUNTS,
MAX(P_COST) AS MAXS,
MIN(P_PROMO_NAME) AS MINS 
FROM PUBLIC.PUBLIC.PROMOTION
GROUP BY P_PROMO_SK,P_PROMO_ID
ORDER BY P_PROMO_SK DESC,P_PROMO_ID ASC;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_CLASS,AVG(I_CURRENT_PRICE),I_CURRENT_PRICE FROM ITEM  WHERE I_CURRENT_PRICE IS NOT NULL  GROUP BY I_CLASS,I_CURRENT_PRICE ORDER BY I_CURRENT_PRICE" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT I_CLASS,AVG(I_CURRENT_PRICE),I_CURRENT_PRICE FROM ITEM 
WHERE I_CURRENT_PRICE IS NOT NULL 
GROUP BY I_CLASS,I_CURRENT_PRICE
ORDER BY I_CURRENT_PRICE</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="select I_CLASS,I_ITEM_ID,COUNT(DISTINCT I_ITEM_ID) c1 from ITEM group by I_CLASS,I_ITEM_ID order by c1; " enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">select I_CLASS,I_ITEM_ID,COUNT(DISTINCT I_ITEM_ID) c1 from ITEM group by I_CLASS,I_ITEM_ID order by c1; </stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Having" enabled="true"/>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT D_DATE_SK,D_DATE_ID, MAX(D_MOY) AS MAXS, MIN(D_QOY) AS MINS, SUM(D_FY_WEEK_SEQ) AS SUMS FROM PUBLIC.PUBLIC.DATE_DIM GROUP BY D_DATE_SK,D_DATE_ID HAVING (SUM(D_FY_WEEK_SEQ) &lt; 4) OR (D_DATE_SK BETWEEN 241500 AND 241520) ORDER BY D_DATE_SK DESC,D_DATE_ID ASC;" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by加having</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT D_DATE_SK,D_DATE_ID,
MAX(D_MOY) AS MAXS,
MIN(D_QOY) AS MINS,
SUM(D_FY_WEEK_SEQ) AS SUMS
FROM PUBLIC.PUBLIC.DATE_DIM
GROUP BY D_DATE_SK,D_DATE_ID
HAVING (SUM(D_FY_WEEK_SEQ) &lt; 4) OR (D_DATE_SK BETWEEN 241500 AND 241520)
ORDER BY D_DATE_SK DESC,D_DATE_ID ASC;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT D_DATE_SK,D_DATE_ID, MAX(D_MOY) AS MAXS, MIN(D_QOY) AS MINS, SUM(D_FY_WEEK_SEQ) AS SUMS, COUNT(D_FY_WEEK_SEQ) AS COUNTS, AVG(D_MOY) AS AVGS FROM PUBLIC.PUBLIC.DATE_DIM GROUP BY D_DATE_SK,D_DATE_ID HAVING SUM(D_FY_WEEK_SEQ) &lt; 4 ORDER BY D_DATE_SK DESC,D_DATE_ID ASC;" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by加having</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT D_DATE_SK,D_DATE_ID,
MAX(D_MOY) AS MAXS,
MIN(D_QOY) AS MINS,
SUM(D_FY_WEEK_SEQ) AS SUMS,
COUNT(D_FY_WEEK_SEQ) AS COUNTS,
AVG(D_MOY) AS AVGS
FROM PUBLIC.PUBLIC.DATE_DIM
GROUP BY D_DATE_SK,D_DATE_ID
HAVING SUM(D_FY_WEEK_SEQ) &lt; 4 
ORDER BY D_DATE_SK DESC,D_DATE_ID ASC;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_ITEM_ID ,COUNT (1) ,SUM (I_CURRENT_PRICE) ,MAX (I_CURRENT_PRICE) ,MIN (I_CURRENT_PRICE) ,AVG (I_CURRENT_PRICE) FROM ITEM  GROUP BY I_ITEM_ID HAVING AVG (I_CURRENT_PRICE) &gt;50 AND SUM (I_CURRENT_PRICE)&gt;100 AND MIN (I_CURRENT_PRICE)&gt;0" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by加having</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT I_ITEM_ID
,COUNT (1)
,SUM (I_CURRENT_PRICE)
,MAX (I_CURRENT_PRICE)
,MIN (I_CURRENT_PRICE)
,AVG (I_CURRENT_PRICE)
FROM ITEM 
GROUP BY I_ITEM_ID
HAVING AVG (I_CURRENT_PRICE) &gt;50 AND SUM (I_CURRENT_PRICE)&gt;100 AND MIN (I_CURRENT_PRICE)&gt;0</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_ITEM_ID,I_ITEM_SK ,COUNT (1) ,SUM (I_CURRENT_PRICE) ,MAX (I_CURRENT_PRICE) ,MIN (I_CURRENT_PRICE) ,AVG (I_CURRENT_PRICE) FROM ITEM  GROUP BY I_ITEM_ID,I_ITEM_SK HAVING AVG (I_CURRENT_PRICE) &gt;50 ORDER BY I_ITEM_ID,I_ITEM_SK;" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by加having</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT I_ITEM_ID,I_ITEM_SK
,COUNT (1)
,SUM (I_CURRENT_PRICE)
,MAX (I_CURRENT_PRICE)
,MIN (I_CURRENT_PRICE)
,AVG (I_CURRENT_PRICE)
FROM ITEM 
GROUP BY I_ITEM_ID,I_ITEM_SK
HAVING AVG (I_CURRENT_PRICE) &gt;50
ORDER BY I_ITEM_ID,I_ITEM_SK;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_ITEM_ID,I_ITEM_SK ,COUNT (1) ,SUM (I_CURRENT_PRICE) ,MAX (I_CURRENT_PRICE) ,MIN (I_CURRENT_PRICE) ,AVG (I_CURRENT_PRICE) FROM ITEM  GROUP BY I_ITEM_ID,I_ITEM_SK HAVING AVG (I_CURRENT_PRICE) &gt;50 ORDER BY I_ITEM_ID,I_ITEM_SK;" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加order by加having</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT I_CLASS,I_ITEM_ID, ROUND(AVG(I_CURRENT_PRICE),2) , COUNT(I_ITEM_ID) 
FROM ITEM
GROUP BY I_CLASS,I_ITEM_ID
HAVING AVG(I_CURRENT_PRICE)&gt;20
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CD_DEMO_SK,CD_DEMO_SK, COUNT(CD_DEP_COUNT) AS COUNTS, SUM(CD_DEP_EMPLOYED_COUNT) AS SUMS, AVG(CD_DEP_COLLEGE_COUNT) AS AVGS  FROM PUBLIC.PUBLIC.CUSTOMER_DEMOGRAPHICS GROUP BY GROUPING SETS((CD_DEMO_SK,CD_DEMO_SK));" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组group by grouping sets</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT CD_DEMO_SK,CD_DEMO_SK,
COUNT(CD_DEP_COUNT) AS COUNTS,
SUM(CD_DEP_EMPLOYED_COUNT) AS SUMS,
AVG(CD_DEP_COLLEGE_COUNT) AS AVGS 
FROM PUBLIC.PUBLIC.CUSTOMER_DEMOGRAPHICS
GROUP BY GROUPING SETS((CD_DEMO_SK,CD_DEMO_SK));</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CP_CATALOG_PAGE_SK  FROM PUBLIC.PUBLIC.CATALOG_PAGE GROUP BY CP_CATALOG_PAGE_SK;" enabled="true">
              <stringProp name="TestPlan.comments">分组</stringProp>
              <stringProp name="dataSource">${node4}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT CP_CATALOG_PAGE_SK 
FROM PUBLIC.PUBLIC.CATALOG_PAGE
GROUP BY CP_CATALOG_PAGE_SK;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="test with Where" enabled="true">
          <stringProp name="TestPlan.comments">条件</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Logic" enabled="true">
            <stringProp name="TestPlan.comments">逻辑</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="In" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT S_STORE_ID,S_REC_START_DATE, SUM(S_STORE_SK) AS SUMS, AVG(S_FLOOR_SPACE) AS AVGS, MAX(S_MANAGER) AS MAXS, MIN(S_MARKET_ID) AS MINS , COUNT(S_REC_START_DATE) AS COUNTS FROM PUBLIC.PUBLIC.STORE WHERE S_STORE_SK IN (4,16) GROUP BY S_STORE_ID,S_REC_START_DATE ORDER BY S_STORE_ID DESC,S_REC_START_DATE ASC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组加where条件in</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT S_STORE_ID,S_REC_START_DATE,
SUM(S_STORE_SK) AS SUMS,
AVG(S_FLOOR_SPACE) AS AVGS,
MAX(S_MANAGER) AS MAXS,
MIN(S_MARKET_ID) AS MINS ,
COUNT(S_REC_START_DATE) AS COUNTS
FROM PUBLIC.PUBLIC.STORE
WHERE S_STORE_SK IN (4,16)
GROUP BY S_STORE_ID,S_REC_START_DATE
ORDER BY S_STORE_ID DESC,S_REC_START_DATE ASC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT SR_TICKET_NUMBER,SR_RETURN_TAX, SUM(SR_RETURNED_DATE_SK) AS SUMS, AVG(SR_CDEMO_SK) AS AVGS, MAX(SR_ADDR_SK) AS MAXS, MIN(SR_RETURN_AMT) AS MINS , COUNT(SR_RETURN_AMT_INC_TAX) AS COUNTS FROM PUBLIC.PUBLIC.STORE_RETURNS WHERE SR_RETURN_TIME_SK NOT IN (50143,52528) GROUP BY SR_TICKET_NUMBER,SR_RETURN_TAX ORDER BY SR_RETURN_TAX DESC,SR_TICKET_NUMBER ASC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组加where条件not in</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT SR_TICKET_NUMBER,SR_RETURN_TAX,
SUM(SR_RETURNED_DATE_SK) AS SUMS,
AVG(SR_CDEMO_SK) AS AVGS,
MAX(SR_ADDR_SK) AS MAXS,
MIN(SR_RETURN_AMT) AS MINS ,
COUNT(SR_RETURN_AMT_INC_TAX) AS COUNTS
FROM PUBLIC.PUBLIC.STORE_RETURNS
WHERE SR_RETURN_TIME_SK NOT IN (50143,52528)
GROUP BY SR_TICKET_NUMBER,SR_RETURN_TAX
ORDER BY SR_RETURN_TAX DESC,SR_TICKET_NUMBER ASC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Having" enabled="true"/>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT HD_DEMO_SK,HD_INCOME_BAND_SK, COUNT(HD_DEMO_SK) AS COUNTS, SUM(HD_INCOME_BAND_SK) AS SUMS, AVG(HD_DEP_COUNT) AS AVGS, MAX(HD_BUY_POTENTIAL) AS MAXS, MIN(HD_VEHICLE_COUNT) AS MINS  FROM PUBLIC.PUBLIC.HOUSEHOLD_DEMOGRAPHICS1 WHERE HD_DEMO_SK IN (2,18) GROUP BY HD_DEMO_SK,HD_INCOME_BAND_SK HAVING SUM(HD_INCOME_BAND_SK) &lt; 10 ORDER BY HD_DEMO_SK DESC,HD_INCOME_BAND_SK ASC;" enabled="true">
                  <stringProp name="TestPlan.comments">聚合函数分组加where条件加order by加having</stringProp>
                  <stringProp name="dataSource">${node4}</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT HD_DEMO_SK,HD_INCOME_BAND_SK,
COUNT(HD_DEMO_SK) AS COUNTS,
SUM(HD_INCOME_BAND_SK) AS SUMS,
AVG(HD_DEP_COUNT) AS AVGS,
MAX(HD_BUY_POTENTIAL) AS MAXS,
MIN(HD_VEHICLE_COUNT) AS MINS 
FROM PUBLIC.PUBLIC.HOUSEHOLD_DEMOGRAPHICS
WHERE HD_DEMO_SK IN (2,18)
GROUP BY HD_DEMO_SK,HD_INCOME_BAND_SK
HAVING SUM(HD_INCOME_BAND_SK) &lt; 10
ORDER BY HD_DEMO_SK DESC,HD_INCOME_BAND_SK ASC;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                </JDBCSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Between and" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT W_WAREHOUSE_SK,W_WAREHOUSE_NAME, SUM(W_WAREHOUSE_SK) AS SUMS, AVG(W_WAREHOUSE_SQ_FT) AS AVGS, MAX(W_STREET_NAME) AS MAXS, MIN(W_SUITE_NUMBER) AS MINS , COUNT(W_CITY) AS COUNTS FROM PUBLIC.PUBLIC.WAREHOUSE WHERE W_WAREHOUSE_SK BETWEEN 9 AND 20 GROUP BY W_WAREHOUSE_SK,W_WAREHOUSE_NAME HAVING SUM(W_WAREHOUSE_SK) &lt; 16 ORDER BY W_WAREHOUSE_NAME DESC, W_WAREHOUSE_SK ASC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组加where条件between and</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT W_WAREHOUSE_SK,W_WAREHOUSE_NAME,
SUM(W_WAREHOUSE_SK) AS SUMS,
AVG(W_WAREHOUSE_SQ_FT) AS AVGS,
MAX(W_STREET_NAME) AS MAXS,
MIN(W_SUITE_NUMBER) AS MINS ,
COUNT(W_CITY) AS COUNTS
FROM PUBLIC.PUBLIC.WAREHOUSE
WHERE W_WAREHOUSE_SK BETWEEN 9 AND 20
GROUP BY W_WAREHOUSE_SK,W_WAREHOUSE_NAME
HAVING SUM(W_WAREHOUSE_SK) &lt; 16
ORDER BY W_WAREHOUSE_NAME DESC, W_WAREHOUSE_SK ASC;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT WEB_SITE_SK,WEB_SITE_SK, SUM(WEB_OPEN_DATE_SK) AS SUMS, AVG(WEB_COMPANY_ID) AS AVGS, MAX(WEB_REC_END_DATE) AS MAXS, MIN(WEB_STREET_NAME) AS MINS , COUNT(WEB_GMT_OFFSET) AS COUNTS FROM PUBLIC.PUBLIC.WEB_SITE WHERE (WEB_TAX_PERCENTAGE NOT BETWEEN 0.04 AND 0.11) AND (WEB_REC_END_DATE &lt;&gt; &apos;2000-08-15&apos;) GROUP BY WEB_SITE_SK,WEB_SITE_SK HAVING SUM(WEB_OPEN_DATE_SK) &gt; 245097 ORDER BY WEB_SITE_SK DESC, WEB_SITE_SK ASC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组加where条件not between and</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT WEB_SITE_SK,WEB_SITE_SK,
SUM(WEB_OPEN_DATE_SK) AS SUMS,
AVG(WEB_COMPANY_ID) AS AVGS,
MAX(WEB_REC_END_DATE) AS MAXS,
MIN(WEB_STREET_NAME) AS MINS ,
COUNT(WEB_GMT_OFFSET) AS COUNTS
FROM PUBLIC.PUBLIC.WEB_SITE
WHERE (WEB_TAX_PERCENTAGE NOT BETWEEN 0.04 AND 0.11) AND (WEB_REC_END_DATE &lt;&gt; &apos;2000-08-15&apos;)
GROUP BY WEB_SITE_SK,WEB_SITE_SK
HAVING SUM(WEB_OPEN_DATE_SK) &gt; 245097
ORDER BY WEB_SITE_SK DESC, WEB_SITE_SK ASC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Like" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_ITEM_SK,I_ITEM_ID,COUNT(I_CURRENT_PRICE) AS COUNTS, SUM(I_WHOLESALE_COST) AS SUMS, AVG(I_ITEM_SK) AS AVGS, MAX(I_MANAGER_ID) AS MAXS, MIN(I_UNITS) AS MINS  FROM PUBLIC.PUBLIC.ITEM WHERE (I_ITEM_ID LIKE &apos;%GF%&apos; OR I_ITEM_ID LIKE &apos;%B&apos;) AND  (I_REC_START_DATE &lt;&gt; &apos;1997-10-27&apos;) GROUP BY I_ITEM_SK,I_ITEM_ID ORDER BY I_ITEM_SK DESC,I_ITEM_ID ASC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件like</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT I_ITEM_SK,I_ITEM_ID,COUNT(I_CURRENT_PRICE) AS COUNTS,
SUM(I_WHOLESALE_COST) AS SUMS,
AVG(I_ITEM_SK) AS AVGS,
MAX(I_MANAGER_ID) AS MAXS,
MIN(I_UNITS) AS MINS 
FROM PUBLIC.PUBLIC.ITEM
WHERE (I_ITEM_ID LIKE &apos;%GF%&apos; OR I_ITEM_ID LIKE &apos;%B&apos;) AND (I_REC_START_DATE &lt;&gt; &apos;1997-10-27&apos;)
GROUP BY I_ITEM_SK,I_ITEM_ID
ORDER BY I_ITEM_SK DESC,I_ITEM_ID ASC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CD_DEMO_SK,CD_GENDER,COUNT(CD_DEMO_SK) AS COUNTS, SUM(CD_DEP_COUNT) AS SUMS, AVG(CD_DEP_COUNT) AS AVGS, MAX(CD_DEP_EMPLOYED_COUNT) AS MAXS, MIN(CD_MARITAL_STATUS) AS MINS  FROM PUBLIC.PUBLIC.CUSTOMER_DEMOGRAPHICS WHERE CD_MARITAL_STATUS LIKE &apos;%M%&apos; GROUP BY CD_DEMO_SK,CD_GENDER HAVING CD_DEMO_SK IN(1920782,1920792) ORDER BY CD_DEMO_SK DESC,CD_GENDER ASC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件 not like</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT CD_DEMO_SK,CD_GENDER,COUNT(CD_DEMO_SK) AS COUNTS,
SUM(CD_DEP_COUNT) AS SUMS,
AVG(CD_DEP_COUNT) AS AVGS,
MAX(CD_DEP_EMPLOYED_COUNT) AS MAXS,
MIN(CD_MARITAL_STATUS) AS MINS 
FROM PUBLIC.PUBLIC.CUSTOMER_DEMOGRAPHICS
WHERE CD_MARITAL_STATUS LIKE &apos;%M%&apos;
GROUP BY CD_DEMO_SK,CD_GENDER
HAVING CD_DEMO_SK IN(1920782,1920792)
ORDER BY CD_DEMO_SK DESC,CD_GENDER ASC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NULL" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_REC_START_DATE, COUNT(I_ITEM_SK) AS COUNTS, SUM(I_CURRENT_PRICE) AS SUMS, AVG(I_WHOLESALE_COST) AS AVGS, MAX(I_CLASS) AS MAXS, MIN(I_CATEGORY) AS MINS  FROM PUBLIC.PUBLIC.ITEM WHERE ((I_REC_START_DATE IS NOT NULL) OR (I_CURRENT_PRICE&gt;=466646.58))  GROUP BY I_REC_START_DATE HAVING AVG(I_WHOLESALE_COST) &gt;5.58 ORDER BY I_REC_START_DATE ASC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件 not null</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT I_REC_START_DATE,
COUNT(I_ITEM_SK) AS COUNTS,
SUM(I_CURRENT_PRICE) AS SUMS,
AVG(I_WHOLESALE_COST) AS AVGS,
MAX(I_CLASS) AS MAXS,
MIN(I_CATEGORY) AS MINS 
FROM PUBLIC.PUBLIC.ITEM
WHERE ((I_REC_START_DATE IS NOT NULL) OR (I_CURRENT_PRICE&gt;=466646.58)) 
GROUP BY I_REC_START_DATE
HAVING AVG(I_WHOLESALE_COST) &gt;5.58
ORDER BY I_REC_START_DATE ASC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_REC_START_DATE, COUNT(I_ITEM_SK) AS COUNTS, SUM(I_CURRENT_PRICE) AS SUMS, AVG(I_WHOLESALE_COST) AS AVGS FROM PUBLIC.PUBLIC.ITEM WHERE ((I_REC_START_DATE IS NULL) AND  (I_CURRENT_PRICE&lt;=466646.58 OR I_ITEM_SK&gt;2))  GROUP BY I_REC_START_DATE HAVING AVG(I_WHOLESALE_COST) &lt;=5.58 ORDER BY I_REC_START_DATE ASC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件 null</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT I_REC_START_DATE,
COUNT(I_ITEM_SK) AS COUNTS,
SUM(I_CURRENT_PRICE) AS SUMS,
AVG(I_WHOLESALE_COST) AS AVGS
FROM PUBLIC.PUBLIC.ITEM
WHERE ((I_REC_START_DATE IS NULL) AND  (I_CURRENT_PRICE&lt;=466646.58 OR I_ITEM_SK&gt;2)) 
GROUP BY I_REC_START_DATE
HAVING AVG(I_WHOLESALE_COST) &lt;=5.58
ORDER BY I_REC_START_DATE ASC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="And Or Not " enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_REC_START_DATE,COUNT(I_CURRENT_PRICE) AS COUNTS,SUM(I_CURRENT_PRICE) AS SUMS,AVG(I_CURRENT_PRICE) AS AVGS,MAX(I_CURRENT_PRICE) AS MAXS,MIN(I_CURRENT_PRICE) AS MINS  FROM PUBLIC.PUBLIC.ITEM WHERE I_CURRENT_PRICE&lt;50 OR I_ITEM_SK&gt;50 GROUP BY I_REC_START_DATE;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件 group by 加多个and...or</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT I_CURRENT_PRICE,
COUNT(I_CURRENT_PRICE) AS COUNTS,
SUM(I_CLASS_ID) AS SUMS,
AVG(I_BRAND_ID) AS AVGS,
MAX(I_CATEGORY) AS MAXS,
MIN(I_FORMULATION) AS MINS 
FROM PUBLIC.PUBLIC.ITEM
WHERE (I_CURRENT_PRICE&gt;70 OR I_ITEM_SK=50) AND (I_CURRENT_PRICE&lt;80 OR I_ITEM_SK=51)
GROUP BY I_CURRENT_PRICE
ORDER BY I_CURRENT_PRICE ASC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_ITEM_SK,I_ITEM_ID, COUNT(I_ITEM_SK) AS COUNTS, MAX(I_REC_START_DATE) AS MAXS, MIN(I_ITEM_DESC) AS MINS FROM PUBLIC.PUBLIC.ITEM WHERE (NOT (I_ITEM_SK=1)) OR (I_CURRENT_PRICE NOT BETWEEN 10 AND 50)  GROUP BY I_ITEM_SK,I_ITEM_ID HAVING SUM(I_BRAND_ID) BETWEEN 5000000 AND 8000000 ORDER BY I_ITEM_SK ASC,I_ITEM_ID DESC;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数分组加where条件not</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT I_ITEM_SK,I_ITEM_ID,
COUNT(I_ITEM_SK) AS COUNTS,
MAX(I_REC_START_DATE) AS MAXS,
MIN(I_ITEM_DESC) AS MINS
FROM PUBLIC.PUBLIC.ITEM
WHERE (NOT (I_ITEM_SK=1)) OR (I_CURRENT_PRICE NOT BETWEEN 10 AND 50) 
GROUP BY I_ITEM_SK,I_ITEM_ID
HAVING SUM(I_BRAND_ID) BETWEEN 5000000 AND 8000000
ORDER BY I_ITEM_SK ASC,I_ITEM_ID DESC;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="&lt;= and &gt;=" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_CLASS,I_ITEM_ID FROM ITEM WHERE SUBSTR(TO_CHAR(CAST(I_REC_START_DATE AS timestamp),&apos;yyyy-mm-dd &apos;),1,7)&gt;=&apos;1999-10&apos;  AND SUBSTR(TO_CHAR(CAST(I_REC_START_DATE AS timestamp),&apos;yyyy-mm-dd &apos;),1,7)&lt;=&apos;2000-10&apos; AND I_REC_START_DATE IS NOT NULL " enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件 group by 加多个and...or</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT I_CLASS,I_ITEM_ID FROM ITEM
WHERE SUBSTR(TO_CHAR(CAST(I_REC_START_DATE AS timestamp),&apos;yyyy-mm-dd &apos;),1,7)&gt;=&apos;1999-10&apos; 
AND SUBSTR(TO_CHAR(CAST(I_REC_START_DATE AS timestamp),&apos;yyyy-mm-dd &apos;),1,7)&lt;=&apos;2000-10&apos;
AND I_REC_START_DATE IS NOT NULL
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="not" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_CLASS,I_ITEM_ID FROM ITEM WHERE SUBSTR(TO_CHAR(CAST(I_REC_START_DATE AS timestamp),&apos;yyyy-mm-dd &apos;),1,7)&gt;=&apos;1999-10&apos;  AND SUBSTR(TO_CHAR(CAST(I_REC_START_DATE AS timestamp),&apos;yyyy-mm-dd &apos;),1,7)&lt;=&apos;2000-10&apos; AND I_REC_START_DATE IS NOT NULL " enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件 group by 加多个and...or</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT I_REC_START_DATE,I_CLASS,I_ITEM_ID, I_CURRENT_PRICE,I_CLASS_ID FROM ITEM
WHERE NOT (I_CLASS=&apos;kids&apos;OR I_CLASS=&apos;mens&apos;)
AND I_REC_END_DATE IS NOT NULL
AND I_ITEM_ID LIKE &apos;%BD%&apos;
GROUP BY I_REC_START_DATE,I_CLASS,I_ITEM_ID, I_CURRENT_PRICE,I_CLASS_ID ORDER BY I_REC_START_DATE,I_CLASS,I_ITEM_ID, I_CURRENT_PRICE,I_CLASS_ID</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_CLASS,I_ITEM_ID, I_CURRENT_PRICE,I_CLASS_ID FROM ITEM WHERE NOT(I_CURRENT_PRICE = 10 OR I_CURRENT_PRICE = 30)" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件 group by 加多个and...or</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT I_CLASS,I_ITEM_ID, I_CURRENT_PRICE,I_CLASS_ID FROM ITEM WHERE NOT(I_CURRENT_PRICE = 10 OR I_CURRENT_PRICE = 30)</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="case when " enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT CAST (count( CASE  WHEN I_SIZE=&apos;large&apos; THEN I_CURRENT_PRICE WHEN I_SIZE=&apos;extra large&apos; THEN I_CURRENT_PRICE ELSE 0 END) AS NUMERIC(6,2)) AS TOTAL_PRICE,I_CLASS,TRIM(BOTH  &apos;A&apos;  FROM I_ITEM_ID) FROM ITEM  WHERE I_CLASS IS NOT NULL  GROUP BY I_CLASS,I_ITEM_ID;" enabled="true">
                <stringProp name="TestPlan.comments">聚合函数加where条件 group by 加多个and...or</stringProp>
                <stringProp name="dataSource">${node4}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT CAST (count(
CASE 
WHEN I_SIZE=&apos;large&apos; THEN I_CURRENT_PRICE
WHEN I_SIZE=&apos;extra large&apos; THEN I_CURRENT_PRICE
ELSE 0
END) AS NUMERIC(6,2))
AS TOTAL_PRICE,I_CLASS,TRIM(BOTH  &apos;A&apos;  FROM I_ITEM_ID)
FROM ITEM 
WHERE I_CLASS IS NOT NULL 
GROUP BY I_CLASS,I_ITEM_ID;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Single table subquery" enabled="true">
          <stringProp name="TestPlan.comments">单表子查询</stringProp>
        </GenericController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_ITEM_SK,I_ITEM_ID, COUNT(I_ITEM_SK) AS COUNTS, MAX(I_REC_START_DATE) AS MAXS, MIN(I_ITEM_DESC) AS MINS FROM PUBLIC.PUBLIC.ITEM WHERE (NOT (I_ITEM_SK=1)) OR (I_CURRENT_PRICE NOT BETWEEN 10 AND 50)  GROUP BY I_ITEM_SK,I_ITEM_ID HAVING SUM(I_BRAND_ID) BETWEEN 5000000 AND 8000000 ORDER BY I_ITEM_SK ASC,I_ITEM_ID DESC;" enabled="true">
            <stringProp name="TestPlan.comments">聚合函数分组加where条件not</stringProp>
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT I_ITEM_SK,I_ITEM_ID,
COUNT(I_ITEM_SK) AS COUNTS,
MAX(I_REC_START_DATE) AS MAXS,
MIN(I_ITEM_DESC) AS MINS
FROM PUBLIC.PUBLIC.ITEM
WHERE (NOT (I_ITEM_SK=1)) OR (I_CURRENT_PRICE NOT BETWEEN 10 AND 50) 
GROUP BY I_ITEM_SK,I_ITEM_ID
HAVING SUM(I_BRAND_ID) BETWEEN 5000000 AND 8000000
ORDER BY I_ITEM_SK ASC,I_ITEM_ID DESC;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_REC_START_DATE,I_CLASS,I_ITEM_ID, I_CURRENT_PRICE  FROM ITEM a           WHERE I_CURRENT_PRICE&gt;(SELECT avg(I_CURRENT_PRICE) FROM ITEM b WHERE a.I_REC_START_DATE=b.I_REC_START_DATE) GROUP BY I_REC_START_DATE,I_CLASS,I_ITEM_ID, I_CURRENT_PRICE" enabled="true">
            <stringProp name="TestPlan.comments">聚合函数分组加where条件not</stringProp>
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT I_REC_START_DATE,I_CLASS,I_ITEM_ID, I_CURRENT_PRICE  FROM ITEM a          
WHERE I_CURRENT_PRICE&gt;(SELECT avg(I_CURRENT_PRICE) FROM ITEM b WHERE a.I_REC_START_DATE=b.I_REC_START_DATE)
GROUP BY I_REC_START_DATE,I_CLASS,I_ITEM_ID, I_CURRENT_PRICE</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_CLASS,I_ITEM_ID, I_CURRENT_PRICE , FROM (SELECT I_CLASS, AVG (I_CURRENT_PRICE) FROM ITEM GROUP BY I_CLASS) ITEM_TABLE (I_CLASS, avgprice),ITEM WHERE I_CURRENT_PRICE &gt; avgprice AND I_ITEM_ID LIKE &apos;%BD%&apos; AND I_CLASS LIKE &apos;__a%&apos;; " enabled="true">
            <stringProp name="TestPlan.comments">聚合函数分组加where条件not</stringProp>
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT I_CLASS,I_ITEM_ID, I_CURRENT_PRICE 
FROM (SELECT I_CLASS, AVG (I_CURRENT_PRICE)
FROM ITEM GROUP BY I_CLASS) ITEM_TABLE (I_CLASS, avgprice),ITEM
WHERE I_CURRENT_PRICE &gt; avgprice AND I_ITEM_ID LIKE &apos;%BD%&apos; AND I_CLASS LIKE &apos;__a%&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT count(CASE WHEN I_CURRENT_PRICE&gt;=50 THEN I_CURRENT_PRICE ELSE NULL END )aa,I_ITEM_ID FROM ITEM  WHERE I_ITEM_ID  NOT IN (SELECT I_ITEM_ID FROM ITEM WHERE I_ITEM_ID LIKE &apos;%F______&apos; GROUP BY I_ITEM_ID ) AND I_CURRENT_PRICE&gt;=50 AND  I_CLASS IS NOT NULL GROUP BY I_ITEM_ID;" enabled="true">
            <stringProp name="TestPlan.comments">聚合函数分组加where条件not</stringProp>
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT count(CASE WHEN I_CURRENT_PRICE&gt;=50 THEN I_CURRENT_PRICE ELSE NULL END )aa,I_ITEM_ID
FROM ITEM 
WHERE I_ITEM_ID  NOT IN (SELECT I_ITEM_ID FROM ITEM WHERE I_ITEM_ID LIKE &apos;%F______&apos; GROUP BY I_ITEM_ID )
AND I_CURRENT_PRICE&gt;=50 AND  I_CLASS IS NOT NULL
GROUP BY I_ITEM_ID;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT I_CLASS ||&apos;-&apos;|| I_ITEM_ID ,I_CLASS || I_ITEM_ID  FROM ITEM  WHERE I_CLASS IS NOT NULL AND I_ITEM_ID IN (SELECT I_ITEM_ID FROM ITEM WHERE I_ITEM_ID LIKE &apos;%CA%&apos; ) " enabled="true">
            <stringProp name="TestPlan.comments">聚合函数分组加where条件not</stringProp>
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT I_CLASS ||&apos;-&apos;|| I_ITEM_ID ,I_CLASS || I_ITEM_ID 
FROM ITEM 
WHERE I_CLASS IS NOT NULL AND I_ITEM_ID IN (SELECT I_ITEM_ID FROM ITEM WHERE I_ITEM_ID LIKE &apos;%CA%&apos; )
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="select I_CLASS,I_ITEM_ID,sum(I_CURRENT_PRICE) as sum_price FROM ITEM  GROUP BY I_CLASS,I_ITEM_ID  HAVING sum(I_CURRENT_PRICE)&gt;(SELECT max(I_CURRENT_PRICE) from ITEM  WHERE I_ITEM_ID like&apos;%GG%&apos;); " enabled="true">
            <stringProp name="TestPlan.comments">聚合函数分组加where条件not</stringProp>
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select I_CLASS,I_ITEM_ID,sum(I_CURRENT_PRICE) as sum_price
FROM ITEM 
GROUP BY I_CLASS,I_ITEM_ID 
HAVING sum(I_CURRENT_PRICE)&gt;(SELECT max(I_CURRENT_PRICE) from ITEM  WHERE I_ITEM_ID like&apos;%GG%&apos;);
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="OVER function" enabled="true">
            <stringProp name="TestPlan.comments">聚合函数分组加where条件not</stringProp>
            <stringProp name="dataSource">${node4}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT I_SIZE,I_CURRENT_PRICE,I_ITEM_ID,
SUM(I_CURRENT_PRICE) OVER(PARTITION BY I_SIZE ORDER BY I_SIZE) MAX_SAL,
AVGPRICEL FROM (SELECT avg(I_CURRENT_PRICE),I_SIZE,I_ITEM_ID FROM ITEM  GROUP BY I_SIZE,I_ITEM_ID HAVING sum(I_CURRENT_PRICE)&gt;(SELECT max(I_CURRENT_PRICE) from ITEM  WHERE I_ITEM_ID like&apos;%GG%&apos;)) ITEM_TABLE(AVGPRICEL,I_SIZE,I_ITEM_ID) ,ITEM
WHERE I_ITEM_ID  NOT IN (SELECT I_ITEM_ID FROM ITEM WHERE I_ITEM_ID LIKE &apos;%F______&apos; GROUP BY I_ITEM_ID )
AND I_CURRENT_PRICE&gt;=50 AND  I_CLASS IS NOT NULL 
AND SUBSTR(TO_CHAR(CAST(I_REC_START_DATE AS timestamp),&apos;yyyy-mm-dd &apos;),1,7)&gt;=&apos;1999-10&apos; 
AND SUBSTR(TO_CHAR(CAST(I_REC_START_DATE AS timestamp),&apos;yyyy-mm-dd &apos;),1,7)&lt;=&apos;2000-10&apos;
AND I_REC_START_DATE IS NOT NULL
ORDER BY I_SIZE,I_CURRENT_PRICE,I_ITEM_ID</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="图形结果" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
        <stringProp name="FileSaver.filename"></stringProp>
        <boolProp name="FileSaver.errorsonly">false</boolProp>
        <boolProp name="FileSaver.skipautonumber">false</boolProp>
        <boolProp name="FileSaver.skipsuffix">false</boolProp>
        <boolProp name="FileSaver.successonly">false</boolProp>
      </ResultSaver>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="查看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
