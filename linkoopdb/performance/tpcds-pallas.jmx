<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TPCDSTEST" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="node" elementType="Argument">
            <stringProp name="Argument.name">node</stringProp>
            <stringProp name="Argument.value">${__P(host,192.168.1.77)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">linkoopdb host</stringProp>
          </elementProp>
          <elementProp name="a" elementType="Argument">
            <stringProp name="Argument.name">a</stringProp>
            <stringProp name="Argument.value">admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">dba user</stringProp>
          </elementProp>
          <elementProp name="a_password" elementType="Argument">
            <stringProp name="Argument.name">a_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.desc">dba user password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scale" elementType="Argument">
            <stringProp name="Argument.name">scale</stringProp>
            <stringProp name="Argument.value">${__P(scale,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="b" elementType="Argument">
            <stringProp name="Argument.name">b</stringProp>
            <stringProp name="Argument.value">TPCDS1G</stringProp>
            <stringProp name="Argument.desc">dba user2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="b_password" elementType="Argument">
            <stringProp name="Argument.name">b_password</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.desc">dba user1 password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tpcds_data_url" elementType="Argument">
            <stringProp name="Argument.name">tpcds_data_url</stringProp>
            <stringProp name="Argument.value">${__P(dataurl,hdfs://node3:8020/node7/linkoopdb/testdb7/tpcds-1g-parquet)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stats" elementType="Argument">
            <stringProp name="Argument.name">stats</stringProp>
            <stringProp name="Argument.value">${__P(stats,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="onlytest" elementType="Argument">
            <stringProp name="Argument.name">onlytest</stringProp>
            <stringProp name="Argument.value">${__P(onlytest,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createindex" elementType="Argument">
            <stringProp name="Argument.name">createindex</stringProp>
            <stringProp name="Argument.value">${__P(createindex,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port,9105)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="admin" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">${a}</stringProp>
        <stringProp name="dbUrl">jdbc:linkoopdb:tcp://${node}:${port}/ldb</stringProp>
        <stringProp name="driver">com.datapps.linkoopdb.jdbc.JdbcDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">123456</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${a}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="TPCDS" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">${b}</stringProp>
        <stringProp name="dbUrl">jdbc:linkoopdb:tcp://${node}:${port}/ldb</stringProp>
        <stringProp name="driver">com.datapps.linkoopdb.jdbc.JdbcDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">123456</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${b}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TPCDSTEST-PALLAS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;b&quot;,&quot;PALLASTPCDS${scale}G&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="collect statistics or not" enabled="true">
          <stringProp name="IfController.condition">${stats} == false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ANALYZE TRUNCATE STATISTICS;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">ANALYZE TRUNCATE STATISTICS;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="skip create table or not" enabled="true">
          <stringProp name="IfController.condition">${onlytest} == false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="close tpcds user seesion if currently connected" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SELECT * FROM INFORMATION_SCHEMA.SYSTEM_SESSIONS WHERE USER_NAME = &apos;${b}&apos;" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT count(SESSION_ID)  FROM INFORMATION_SCHEMA.SYSTEM_SESSIONS WHERE USER_NAME = &apos;${b}&apos;

--SELECT SESSION_ID,count(SESSION_ID) AS num   FROM INFORMATION_SCHEMA.SYSTEM_SESSIONS 
--WHERE USER_NAME = &apos;${b}&apos;
--GROUP BY SESSION_ID</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">sessioncount</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${sessioncount} != 0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TODO A SP" enabled="false">
                <stringProp name="dataSource">${a}</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- TODO A SP</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CREATE USER" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="drop user ${b} if exists cascade;" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">drop user ${b} if exists cascade;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CREATE USER ${b} PASSWORD &apos;${b_password}&apos;;" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">CREATE USER ${b} PASSWORD &apos;${b_password}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="grant change_authorization to ${b};" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">grant change_authorization to ${b};</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="connect user ${b} password &apos;${b_password}&apos;;" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">connect user ${b} password &apos;${b_password}&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create pallas table" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="drop table" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">drop table ex_csv_customer_address if exists cascade;
drop table ex_csv_customer_demographics if exists cascade;
drop table ex_csv_date_dim if exists cascade;
drop table ex_csv_warehouse if exists cascade;
drop table ex_csv_ship_mode if exists cascade;
drop table ex_csv_time_dim if exists cascade;
drop table ex_csv_reason if exists cascade;
drop table ex_csv_income_band if exists cascade;
drop table ex_csv_item if exists cascade;
drop table ex_csv_store if exists cascade;
drop table ex_csv_call_center if exists cascade;
drop table ex_csv_customer if exists cascade;
drop table ex_csv_web_site if exists cascade;
drop table ex_csv_store_returns if exists cascade;
drop table ex_csv_household_demographics if exists cascade;
drop table ex_csv_web_page if exists cascade;
drop table ex_csv_promotion if exists cascade;
drop table ex_csv_catalog_page if exists cascade;
drop table ex_csv_inventory if exists cascade;
drop table ex_csv_catalog_returns if exists cascade;
drop table ex_csv_web_returns if exists cascade;
drop table ex_csv_web_sales if exists cascade;
drop table ex_csv_catalog_sales if exists cascade;
drop table ex_csv_store_sales if exists cascade;

drop table customer_address if exists cascade;
drop table customer_demographics if exists cascade;
drop table date_dim if exists cascade;
drop table warehouse if exists cascade;
drop table ship_mode if exists cascade;
drop table time_dim if exists cascade;
drop table reason if exists cascade;
drop table income_band if exists cascade;
drop table item if exists cascade;
drop table store if exists cascade;
drop table call_center if exists cascade;
drop table customer if exists cascade;
drop table web_site if exists cascade;
drop table store_returns if exists cascade;
drop table household_demographics if exists cascade;
drop table web_page if exists cascade;
drop table promotion if exists cascade;
drop table catalog_page if exists cascade;
drop table inventory if exists cascade;
drop table catalog_returns if exists cascade;
drop table web_returns if exists cascade;
drop table web_sales if exists cascade;
drop table catalog_sales if exists cascade;
drop table store_sales if exists cascade;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create parquet external table" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">create external table ex_parquet_customer_address
(
    ca_address_sk             integer               not null,
    ca_address_id             char(16)              not null,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)                      
) location (&apos;${tpcds_data_url}/customer_address&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_customer_demographics
(
    cd_demo_sk                integer               not null,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      integer                       ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              integer                       ,
    cd_dep_employed_count     integer                       ,
    cd_dep_college_count      integer                       
) location (&apos;${tpcds_data_url}/customer_demographics&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_date_dim
(
    d_date_sk                 integer               not null,
    d_date_id                 char(16)              not null,
    d_date                    date                          ,
    d_month_seq               integer                       ,
    d_week_seq                integer                       ,
    d_quarter_seq             integer                       ,
    d_year                    integer                       ,
    d_dow                     integer                       ,
    d_moy                     integer                       ,
    d_dom                     integer                       ,
    d_qoy                     integer                       ,
    d_fy_year                 integer                       ,
    d_fy_quarter_seq          integer                       ,
    d_fy_week_seq             integer                       ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               integer                       ,
    d_last_dom                integer                       ,
    d_same_day_ly             integer                       ,
    d_same_day_lq             integer                       ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)                       
) location (&apos;${tpcds_data_url}/date_dim&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_warehouse
(
    w_warehouse_sk            integer               not null,
    w_warehouse_id            char(16)              not null,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         integer                       ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)                  
) location (&apos;${tpcds_data_url}/warehouse&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_ship_mode
(
    sm_ship_mode_sk           integer               not null,
    sm_ship_mode_id           char(16)              not null,
    sm_type                   char(30)                      ,
    sm_code                   char(10)                      ,
    sm_carrier                char(20)                      ,
    sm_contract               char(20)                      
) location (&apos;${tpcds_data_url}/ship_mode&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_time_dim
(
    t_time_sk                 integer               not null,
    t_time_id                 char(16)              not null,
    t_time                    integer                       ,
    t_hour                    integer                       ,
    t_minute                  integer                       ,
    t_second                  integer                       ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                      
) location (&apos;${tpcds_data_url}/time_dim&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_reason
(
    r_reason_sk               integer               not null,
    r_reason_id               char(16)              not null,
    r_reason_desc             char(100)                     
) location (&apos;${tpcds_data_url}/reason&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_income_band
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer                       
) location (&apos;${tpcds_data_url}/income_band&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_item
(
    i_item_sk                 integer               not null,
    i_item_id                 char(16)              not null,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                integer                       ,
    i_brand                   char(50)                      ,
    i_class_id                integer                       ,
    i_class                   char(50)                      ,
    i_category_id             integer                       ,
    i_category                char(50)                      ,
    i_manufact_id             integer                       ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              integer                       ,
    i_product_name            char(50)                      
) location (&apos;${tpcds_data_url}/item&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          integer                       ,
    s_store_name              varchar(50)                   ,
    s_number_employees        integer                       ,
    s_floor_space             integer                       ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               integer                       ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             integer                       ,
    s_division_name           varchar(50)                   ,
    s_company_id              integer                       ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  
) location (&apos;${tpcds_data_url}/store&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_rec_start_date         date                          ,
    cc_rec_end_date           date                          ,
    cc_closed_date_sk         integer                       ,
    cc_open_date_sk           integer                       ,
    cc_name                   varchar(50)                   ,
    cc_class                  varchar(50)                   ,
    cc_employees              integer                       ,
    cc_sq_ft                  integer                       ,
    cc_hours                  char(20)                      ,
    cc_manager                varchar(40)                   ,
    cc_mkt_id                 integer                       ,
    cc_mkt_class              char(50)                      ,
    cc_mkt_desc               varchar(100)                  ,
    cc_market_manager         varchar(40)                   ,
    cc_division               integer                       ,
    cc_division_name          varchar(50)                   ,
    cc_company                integer                       ,
    cc_company_name           char(50)                      ,
    cc_street_number          char(10)                      ,
    cc_street_name            varchar(60)                   ,
    cc_street_type            char(15)                      ,
    cc_suite_number           char(10)                      ,
    cc_city                   varchar(60)                   ,
    cc_county                 varchar(30)                   ,
    cc_state                  char(2)                       ,
    cc_zip                    char(10)                      ,
    cc_country                varchar(20)                   ,
    cc_gmt_offset             decimal(5,2)                  ,
    cc_tax_percentage         decimal(5,2)                  
) location (&apos;${tpcds_data_url}/call_center&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_customer
(
    c_customer_sk             integer               not null,
    c_customer_id             char(16)              not null,
    c_current_cdemo_sk        integer                       ,
    c_current_hdemo_sk        integer                       ,
    c_current_addr_sk         integer                       ,
    c_first_shipto_date_sk    integer                       ,
    c_first_sales_date_sk     integer                       ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               integer                       ,
    c_birth_month             integer                       ,
    c_birth_year              integer                       ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)                      
) location (&apos;${tpcds_data_url}/customer&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_web_site
(
    web_site_sk               integer               not null,
    web_site_id               char(16)              not null,
    web_rec_start_date        date                          ,
    web_rec_end_date          date                          ,
    web_name                  varchar(50)                   ,
    web_open_date_sk          integer                       ,
    web_close_date_sk         integer                       ,
    web_class                 varchar(50)                   ,
    web_manager               varchar(40)                   ,
    web_mkt_id                integer                       ,
    web_mkt_class             varchar(50)                   ,
    web_mkt_desc              varchar(100)                  ,
    web_market_manager        varchar(40)                   ,
    web_company_id            integer                       ,
    web_company_name          char(50)                      ,
    web_street_number         char(10)                      ,
    web_street_name           varchar(60)                   ,
    web_street_type           char(15)                      ,
    web_suite_number          char(10)                      ,
    web_city                  varchar(60)                   ,
    web_county                varchar(30)                   ,
    web_state                 char(2)                       ,
    web_zip                   char(10)                      ,
    web_country               varchar(20)                   ,
    web_gmt_offset            decimal(5,2)                  ,
    web_tax_percentage        decimal(5,2)                  
) location (&apos;${tpcds_data_url}/web_site&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_store_returns
(
    sr_returned_date_sk       integer                       ,
    sr_return_time_sk         integer                       ,
    sr_item_sk                integer               not null,
    sr_customer_sk            integer                       ,
    sr_cdemo_sk               integer                       ,
    sr_hdemo_sk               integer                       ,
    sr_addr_sk                integer                       ,
    sr_store_sk               integer                       ,
    sr_reason_sk              integer                       ,
    sr_ticket_number          bigint               not null,
    sr_return_quantity        integer                       ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)                  
) location (&apos;${tpcds_data_url}/store_returns&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_household_demographics
(
    hd_demo_sk                integer               not null,
    hd_income_band_sk         integer                       ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              integer                       ,
    hd_vehicle_count          integer                       
) location (&apos;${tpcds_data_url}/household_demographics&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_web_page
(
    wp_web_page_sk            integer               not null,
    wp_web_page_id            char(16)              not null,
    wp_rec_start_date         date                          ,
    wp_rec_end_date           date                          ,
    wp_creation_date_sk       integer                       ,
    wp_access_date_sk         integer                       ,
    wp_autogen_flag           char(1)                       ,
    wp_customer_sk            integer                       ,
    wp_url                    varchar(100)                  ,
    wp_type                   char(50)                      ,
    wp_char_count             integer                       ,
    wp_link_count             integer                       ,
    wp_image_count            integer                       ,
    wp_max_ad_count           integer                       
) location (&apos;${tpcds_data_url}/web_page&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_promotion
(
    p_promo_sk                integer               not null,
    p_promo_id                char(16)              not null,
    p_start_date_sk           integer                       ,
    p_end_date_sk             integer                       ,
    p_item_sk                 integer                       ,
    p_cost                    decimal(15,2)                 ,
    p_response_target         integer                       ,
    p_promo_name              char(50)                      ,
    p_channel_dmail           char(1)                       ,
    p_channel_email           char(1)                       ,
    p_channel_catalog         char(1)                       ,
    p_channel_tv              char(1)                       ,
    p_channel_radio           char(1)                       ,
    p_channel_press           char(1)                       ,
    p_channel_event           char(1)                       ,
    p_channel_demo            char(1)                       ,
    p_channel_details         varchar(100)                  ,
    p_purpose                 char(15)                      ,
    p_discount_active         char(1)                       
) location (&apos;${tpcds_data_url}/promotion&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_catalog_page
(
    cp_catalog_page_sk        integer               not null,
    cp_catalog_page_id        char(16)              not null,
    cp_start_date_sk          integer                       ,
    cp_end_date_sk            integer                       ,
    cp_department             varchar(50)                   ,
    cp_catalog_number         integer                       ,
    cp_catalog_page_number    integer                       ,
    cp_description            varchar(100)                  ,
    cp_type                   varchar(100)                  
) location (&apos;${tpcds_data_url}/catalog_page&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_inventory
(
    inv_date_sk               integer               not null,
    inv_item_sk               integer               not null,
    inv_warehouse_sk          integer               not null,
    inv_quantity_on_hand      integer                       
) location (&apos;${tpcds_data_url}/inventory&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_catalog_returns
(
    cr_returned_date_sk       integer                       ,
    cr_returned_time_sk       integer                       ,
    cr_item_sk                integer               not null,
    cr_refunded_customer_sk   integer                       ,
    cr_refunded_cdemo_sk      integer                       ,
    cr_refunded_hdemo_sk      integer                       ,
    cr_refunded_addr_sk       integer                       ,
    cr_returning_customer_sk  integer                       ,
    cr_returning_cdemo_sk     integer                       ,
    cr_returning_hdemo_sk     integer                       ,
    cr_returning_addr_sk      integer                       ,
    cr_call_center_sk         integer                       ,
    cr_catalog_page_sk        integer                       ,
    cr_ship_mode_sk           integer                       ,
    cr_warehouse_sk           integer                       ,
    cr_reason_sk              integer                       ,
    cr_order_number           bigint               not null,
    cr_return_quantity        integer                       ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)                  
) location (&apos;${tpcds_data_url}/catalog_returns&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_web_returns
(
    wr_returned_date_sk       integer                       ,
    wr_returned_time_sk       integer                       ,
    wr_item_sk                integer               not null,
    wr_refunded_customer_sk   integer                       ,
    wr_refunded_cdemo_sk      integer                       ,
    wr_refunded_hdemo_sk      integer                       ,
    wr_refunded_addr_sk       integer                       ,
    wr_returning_customer_sk  integer                       ,
    wr_returning_cdemo_sk     integer                       ,
    wr_returning_hdemo_sk     integer                       ,
    wr_returning_addr_sk      integer                       ,
    wr_web_page_sk            integer                       ,
    wr_reason_sk              integer                       ,
    wr_order_number           bigint               not null,
    wr_return_quantity        integer                       ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)                  
) location (&apos;${tpcds_data_url}/web_returns&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_web_sales
(
    ws_sold_date_sk           integer                       ,
    ws_sold_time_sk           integer                       ,
    ws_ship_date_sk           integer                       ,
    ws_item_sk                integer               not null,
    ws_bill_customer_sk       integer                       ,
    ws_bill_cdemo_sk          integer                       ,
    ws_bill_hdemo_sk          integer                       ,
    ws_bill_addr_sk           integer                       ,
    ws_ship_customer_sk       integer                       ,
    ws_ship_cdemo_sk          integer                       ,
    ws_ship_hdemo_sk          integer                       ,
    ws_ship_addr_sk           integer                       ,
    ws_web_page_sk            integer                       ,
    ws_web_site_sk            integer                       ,
    ws_ship_mode_sk           integer                       ,
    ws_warehouse_sk           integer                       ,
    ws_promo_sk               integer                       ,
    ws_order_number           bigint               not null,
    ws_quantity               integer                       ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)                  
) location (&apos;${tpcds_data_url}/web_sales&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_catalog_sales
(
    cs_sold_date_sk           integer                       ,
    cs_sold_time_sk           integer                       ,
    cs_ship_date_sk           integer                       ,
    cs_bill_customer_sk       integer                       ,
    cs_bill_cdemo_sk          integer                       ,
    cs_bill_hdemo_sk          integer                       ,
    cs_bill_addr_sk           integer                       ,
    cs_ship_customer_sk       integer                       ,
    cs_ship_cdemo_sk          integer                       ,
    cs_ship_hdemo_sk          integer                       ,
    cs_ship_addr_sk           integer                       ,
    cs_call_center_sk         integer                       ,
    cs_catalog_page_sk        integer                       ,
    cs_ship_mode_sk           integer                       ,
    cs_warehouse_sk           integer                       ,
    cs_item_sk                integer               not null,
    cs_promo_sk               integer                       ,
    cs_order_number           bigint               not null,
    cs_quantity               integer                       ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)                  
) location (&apos;${tpcds_data_url}/catalog_sales&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_store_sales
(
    ss_sold_date_sk           integer                       ,
    ss_sold_time_sk           integer                       ,
    ss_item_sk                integer               not null,
    ss_customer_sk            integer                       ,
    ss_cdemo_sk               integer                       ,
    ss_hdemo_sk               integer                       ,
    ss_addr_sk                integer                       ,
    ss_store_sk               integer                       ,
    ss_promo_sk               integer                       ,
    ss_ticket_number          bigint               not null,
    ss_quantity               integer                       ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)                  
) location (&apos;${tpcds_data_url}/store_sales&apos;) FORMAT &apos;parquet&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create pallas table" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">create table customer_address
(
    ca_address_sk             integer               not null,
    ca_address_id             char(16)              not null,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)                      ,
    primary key (ca_address_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table customer_demographics
(
    cd_demo_sk                integer               not null,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      integer                       ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              integer                       ,
    cd_dep_employed_count     integer                       ,
    cd_dep_college_count      integer                       ,
    primary key (cd_demo_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table date_dim
(
    d_date_sk                 integer               not null,
    d_date_id                 char(16)              not null,
    d_date                    date                          ,
    d_month_seq               integer                       ,
    d_week_seq                integer                       ,
    d_quarter_seq             integer                       ,
    d_year                    integer                       ,
    d_dow                     integer                       ,
    d_moy                     integer                       ,
    d_dom                     integer                       ,
    d_qoy                     integer                       ,
    d_fy_year                 integer                       ,
    d_fy_quarter_seq          integer                       ,
    d_fy_week_seq             integer                       ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               integer                       ,
    d_last_dom                integer                       ,
    d_same_day_ly             integer                       ,
    d_same_day_lq             integer                       ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)                       ,
    primary key (d_date_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table warehouse
(
    w_warehouse_sk            integer               not null,
    w_warehouse_id            char(16)              not null,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         integer                       ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)                  ,
    primary key (w_warehouse_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 


create table ship_mode
(
    sm_ship_mode_sk           integer               not null,
    sm_ship_mode_id           char(16)              not null,
    sm_type                   char(30)                      ,
    sm_code                   char(10)                      ,
    sm_carrier                char(20)                      ,
    sm_contract               char(20)                      ,
    primary key (sm_ship_mode_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table time_dim
(
    t_time_sk                 integer               not null,
    t_time_id                 char(16)              not null,
    t_time                    integer                       ,
    t_hour                    integer                       ,
    t_minute                  integer                       ,
    t_second                  integer                       ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                      ,
    primary key (t_time_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table reason
(
    r_reason_sk               integer               not null,
    r_reason_id               char(16)              not null,
    r_reason_desc             char(100)                     ,
    primary key (r_reason_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table income_band
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer                       ,
    primary key (ib_income_band_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table item
(
    i_item_sk                 integer               not null,
    i_item_id                 char(16)              not null,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                integer                       ,
    i_brand                   char(50)                      ,
    i_class_id                integer                       ,
    i_class                   char(50)                      ,
    i_category_id             integer                       ,
    i_category                char(50)                      ,
    i_manufact_id             integer                       ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              integer                       ,
    i_product_name            char(50)                      ,
    primary key (i_item_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          integer                       ,
    s_store_name              varchar(50)                   ,
    s_number_employees        integer                       ,
    s_floor_space             integer                       ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               integer                       ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             integer                       ,
    s_division_name           varchar(50)                   ,
    s_company_id              integer                       ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  ,
    primary key (s_store_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_rec_start_date         date                          ,
    cc_rec_end_date           date                          ,
    cc_closed_date_sk         integer                       ,
    cc_open_date_sk           integer                       ,
    cc_name                   varchar(50)                   ,
    cc_class                  varchar(50)                   ,
    cc_employees              integer                       ,
    cc_sq_ft                  integer                       ,
    cc_hours                  char(20)                      ,
    cc_manager                varchar(40)                   ,
    cc_mkt_id                 integer                       ,
    cc_mkt_class              char(50)                      ,
    cc_mkt_desc               varchar(100)                  ,
    cc_market_manager         varchar(40)                   ,
    cc_division               integer                       ,
    cc_division_name          varchar(50)                   ,
    cc_company                integer                       ,
    cc_company_name           char(50)                      ,
    cc_street_number          char(10)                      ,
    cc_street_name            varchar(60)                   ,
    cc_street_type            char(15)                      ,
    cc_suite_number           char(10)                      ,
    cc_city                   varchar(60)                   ,
    cc_county                 varchar(30)                   ,
    cc_state                  char(2)                       ,
    cc_zip                    char(10)                      ,
    cc_country                varchar(20)                   ,
    cc_gmt_offset             decimal(5,2)                  ,
    cc_tax_percentage         decimal(5,2)                  ,
    primary key (cc_call_center_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table customer
(
    c_customer_sk             integer               not null,
    c_customer_id             char(16)              not null,
    c_current_cdemo_sk        integer                       ,
    c_current_hdemo_sk        integer                       ,
    c_current_addr_sk         integer                       ,
    c_first_shipto_date_sk    integer                       ,
    c_first_sales_date_sk     integer                       ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               integer                       ,
    c_birth_month             integer                       ,
    c_birth_year              integer                       ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)                      ,
    primary key (c_customer_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table web_site
(
    web_site_sk               integer               not null,
    web_site_id               char(16)              not null,
    web_rec_start_date        date                          ,
    web_rec_end_date          date                          ,
    web_name                  varchar(50)                   ,
    web_open_date_sk          integer                       ,
    web_close_date_sk         integer                       ,
    web_class                 varchar(50)                   ,
    web_manager               varchar(40)                   ,
    web_mkt_id                integer                       ,
    web_mkt_class             varchar(50)                   ,
    web_mkt_desc              varchar(100)                  ,
    web_market_manager        varchar(40)                   ,
    web_company_id            integer                       ,
    web_company_name          char(50)                      ,
    web_street_number         char(10)                      ,
    web_street_name           varchar(60)                   ,
    web_street_type           char(15)                      ,
    web_suite_number          char(10)                      ,
    web_city                  varchar(60)                   ,
    web_county                varchar(30)                   ,
    web_state                 char(2)                       ,
    web_zip                   char(10)                      ,
    web_country               varchar(20)                   ,
    web_gmt_offset            decimal(5,2)                  ,
    web_tax_percentage        decimal(5,2)                  ,
    primary key (web_site_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table store_returns
(
    sr_returned_date_sk       integer                       ,
    sr_return_time_sk         integer                       ,
    sr_item_sk                integer               not null,
    sr_customer_sk            integer                       ,
    sr_cdemo_sk               integer                       ,
    sr_hdemo_sk               integer                       ,
    sr_addr_sk                integer                       ,
    sr_store_sk               integer                       ,
    sr_reason_sk              integer                       ,
    sr_ticket_number          bigint               not null,
    sr_return_quantity        integer                       ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)                  ,
    primary key (sr_item_sk, sr_ticket_number)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table household_demographics
(
    hd_demo_sk                integer               not null,
    hd_income_band_sk         integer                       ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              integer                       ,
    hd_vehicle_count          integer                       ,
    primary key (hd_demo_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table web_page
(
    wp_web_page_sk            integer               not null,
    wp_web_page_id            char(16)              not null,
    wp_rec_start_date         date                          ,
    wp_rec_end_date           date                          ,
    wp_creation_date_sk       integer                       ,
    wp_access_date_sk         integer                       ,
    wp_autogen_flag           char(1)                       ,
    wp_customer_sk            integer                       ,
    wp_url                    varchar(100)                  ,
    wp_type                   char(50)                      ,
    wp_char_count             integer                       ,
    wp_link_count             integer                       ,
    wp_image_count            integer                       ,
    wp_max_ad_count           integer                       ,
    primary key (wp_web_page_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table promotion
(
    p_promo_sk                integer               not null,
    p_promo_id                char(16)              not null,
    p_start_date_sk           integer                       ,
    p_end_date_sk             integer                       ,
    p_item_sk                 integer                       ,
    p_cost                    decimal(15,2)                 ,
    p_response_target         integer                       ,
    p_promo_name              char(50)                      ,
    p_channel_dmail           char(1)                       ,
    p_channel_email           char(1)                       ,
    p_channel_catalog         char(1)                       ,
    p_channel_tv              char(1)                       ,
    p_channel_radio           char(1)                       ,
    p_channel_press           char(1)                       ,
    p_channel_event           char(1)                       ,
    p_channel_demo            char(1)                       ,
    p_channel_details         varchar(100)                  ,
    p_purpose                 char(15)                      ,
    p_discount_active         char(1)                       ,
    primary key (p_promo_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table catalog_page
(
    cp_catalog_page_sk        integer               not null,
    cp_catalog_page_id        char(16)              not null,
    cp_start_date_sk          integer                       ,
    cp_end_date_sk            integer                       ,
    cp_department             varchar(50)                   ,
    cp_catalog_number         integer                       ,
    cp_catalog_page_number    integer                       ,
    cp_description            varchar(100)                  ,
    cp_type                   varchar(100)                  ,
    primary key (cp_catalog_page_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table inventory
(
    inv_date_sk               integer               not null,
    inv_item_sk               integer               not null,
    inv_warehouse_sk          integer               not null,
    inv_quantity_on_hand      integer                       ,
    primary key (inv_date_sk, inv_item_sk, inv_warehouse_sk)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table catalog_returns
(
    cr_returned_date_sk       integer                       ,
    cr_returned_time_sk       integer                       ,
    cr_item_sk                integer               not null,
    cr_refunded_customer_sk   integer                       ,
    cr_refunded_cdemo_sk      integer                       ,
    cr_refunded_hdemo_sk      integer                       ,
    cr_refunded_addr_sk       integer                       ,
    cr_returning_customer_sk  integer                       ,
    cr_returning_cdemo_sk     integer                       ,
    cr_returning_hdemo_sk     integer                       ,
    cr_returning_addr_sk      integer                       ,
    cr_call_center_sk         integer                       ,
    cr_catalog_page_sk        integer                       ,
    cr_ship_mode_sk           integer                       ,
    cr_warehouse_sk           integer                       ,
    cr_reason_sk              integer                       ,
    cr_order_number           bigint               not null,
    cr_return_quantity        integer                       ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)                  ,
    primary key (cr_item_sk, cr_order_number)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;

create table web_returns
(
    wr_returned_date_sk       integer                       ,
    wr_returned_time_sk       integer                       ,
    wr_item_sk                integer               not null,
    wr_refunded_customer_sk   integer                       ,
    wr_refunded_cdemo_sk      integer                       ,
    wr_refunded_hdemo_sk      integer                       ,
    wr_refunded_addr_sk       integer                       ,
    wr_returning_customer_sk  integer                       ,
    wr_returning_cdemo_sk     integer                       ,
    wr_returning_hdemo_sk     integer                       ,
    wr_returning_addr_sk      integer                       ,
    wr_web_page_sk            integer                       ,
    wr_reason_sk              integer                       ,
    wr_order_number           bigint               not null,
    wr_return_quantity        integer                       ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)                  ,
    primary key (wr_item_sk, wr_order_number)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;

create table web_sales
(
    ws_sold_date_sk           integer                       ,
    ws_sold_time_sk           integer                       ,
    ws_ship_date_sk           integer                       ,
    ws_item_sk                integer               not null,
    ws_bill_customer_sk       integer                       ,
    ws_bill_cdemo_sk          integer                       ,
    ws_bill_hdemo_sk          integer                       ,
    ws_bill_addr_sk           integer                       ,
    ws_ship_customer_sk       integer                       ,
    ws_ship_cdemo_sk          integer                       ,
    ws_ship_hdemo_sk          integer                       ,
    ws_ship_addr_sk           integer                       ,
    ws_web_page_sk            integer                       ,
    ws_web_site_sk            integer                       ,
    ws_ship_mode_sk           integer                       ,
    ws_warehouse_sk           integer                       ,
    ws_promo_sk               integer                       ,
    ws_order_number           bigint               not null,
    ws_quantity               integer                       ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)                  ,
    primary key (ws_item_sk, ws_order_number)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas; 

create table catalog_sales
(
    cs_sold_date_sk           integer                       ,
    cs_sold_time_sk           integer                       ,
    cs_ship_date_sk           integer                       ,
    cs_bill_customer_sk       integer                       ,
    cs_bill_cdemo_sk          integer                       ,
    cs_bill_hdemo_sk          integer                       ,
    cs_bill_addr_sk           integer                       ,
    cs_ship_customer_sk       integer                       ,
    cs_ship_cdemo_sk          integer                       ,
    cs_ship_hdemo_sk          integer                       ,
    cs_ship_addr_sk           integer                       ,
    cs_call_center_sk         integer                       ,
    cs_catalog_page_sk        integer                       ,
    cs_ship_mode_sk           integer                       ,
    cs_warehouse_sk           integer                       ,
    cs_item_sk                integer               not null,
    cs_promo_sk               integer                       ,
    cs_order_number           bigint               not null,
    cs_quantity               integer                       ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)                  ,
    primary key (cs_item_sk, cs_order_number)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;

create table store_sales
(
    ss_sold_date_sk           integer                       ,
    ss_sold_time_sk           integer                       ,
    ss_item_sk                integer               not null,
    ss_customer_sk            integer                       ,
    ss_cdemo_sk               integer                       ,
    ss_hdemo_sk               integer                       ,
    ss_addr_sk                integer                       ,
    ss_store_sk               integer                       ,
    ss_promo_sk               integer                       ,
    ss_ticket_number          bigint               not null,
    ss_quantity               integer                       ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)                  ,
    primary key (ss_item_sk, ss_ticket_number)
) properties (&apos;perinsertnum&apos;:&apos;10000&apos;, &apos;peringestnum&apos;:&apos;500000&apos;,&apos;linkoopdb.pallas.shard_number&apos;:&apos;32&apos;) engine pallas;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas call_center" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into call_center             select * from ex_parquet_call_center                   ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas catalog_page" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into catalog_page            select * from ex_parquet_catalog_page                  ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas customer" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into customer                select * from ex_parquet_customer                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas customer_address" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into customer_address        select * from ex_parquet_customer_address              ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas customer_demographics" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into customer_demographics   select * from ex_parquet_customer_demographics         ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas date_dim" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into date_dim                select * from ex_parquet_date_dim                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas web_site" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into web_site                select * from ex_parquet_web_site                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas household_demographics" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into household_demographics  select * from ex_parquet_household_demographics        ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas income_band" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into income_band             select * from ex_parquet_income_band                   ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas item" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into item                    select * from ex_parquet_item                          ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas promotion" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into promotion               select * from ex_parquet_promotion                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas reason" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into reason                  select * from ex_parquet_reason                        ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas ship_mode" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into ship_mode               select * from ex_parquet_ship_mode                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas store" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into store                   select * from ex_parquet_store                         ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas time_dim" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into time_dim                select * from ex_parquet_time_dim                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas warehouse" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into warehouse               select * from ex_parquet_warehouse                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas web_page" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into web_page                select * from ex_parquet_web_page                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas web_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into web_returns             select * from ex_parquet_web_returns                   ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas catalog_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into catalog_returns         select * from ex_parquet_catalog_returns               ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas inventory" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into inventory               select * from ex_parquet_inventory                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas store_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into store_returns           select * from ex_parquet_store_returns                 ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas web_sales" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into web_sales               select * from ex_parquet_web_sales                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas catalog_sales " enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into catalog_sales           select * from ex_parquet_catalog_sales                 ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="load into pallas store_sales    " enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">load into store_sales             select * from ex_parquet_store_sales                   ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create hdfs table" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="drop table" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">drop table ex_csv_customer_address if exists cascade;
drop table ex_csv_customer_demographics if exists cascade;
drop table ex_csv_date_dim if exists cascade;
drop table ex_csv_warehouse if exists cascade;
drop table ex_csv_ship_mode if exists cascade;
drop table ex_csv_time_dim if exists cascade;
drop table ex_csv_reason if exists cascade;
drop table ex_csv_income_band if exists cascade;
drop table ex_csv_item if exists cascade;
drop table ex_csv_store if exists cascade;
drop table ex_csv_call_center if exists cascade;
drop table ex_csv_customer if exists cascade;
drop table ex_csv_web_site if exists cascade;
drop table ex_csv_store_returns if exists cascade;
drop table ex_csv_household_demographics if exists cascade;
drop table ex_csv_web_page if exists cascade;
drop table ex_csv_promotion if exists cascade;
drop table ex_csv_catalog_page if exists cascade;
drop table ex_csv_inventory if exists cascade;
drop table ex_csv_catalog_returns if exists cascade;
drop table ex_csv_web_returns if exists cascade;
drop table ex_csv_web_sales if exists cascade;
drop table ex_csv_catalog_sales if exists cascade;
drop table ex_csv_store_sales if exists cascade;

drop table customer_address if exists cascade;
drop table customer_demographics if exists cascade;
drop table date_dim if exists cascade;
drop table warehouse if exists cascade;
drop table ship_mode if exists cascade;
drop table time_dim if exists cascade;
drop table reason if exists cascade;
drop table income_band if exists cascade;
drop table item if exists cascade;
drop table store if exists cascade;
drop table call_center if exists cascade;
drop table customer if exists cascade;
drop table web_site if exists cascade;
drop table store_returns if exists cascade;
drop table household_demographics if exists cascade;
drop table web_page if exists cascade;
drop table promotion if exists cascade;
drop table catalog_page if exists cascade;
drop table inventory if exists cascade;
drop table catalog_returns if exists cascade;
drop table web_returns if exists cascade;
drop table web_sales if exists cascade;
drop table catalog_sales if exists cascade;
drop table store_sales if exists cascade;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create parquet external table" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">create external table ex_parquet_customer_address
(
    ca_address_sk             integer               not null,
    ca_address_id             char(16)              not null,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)                      
) location (&apos;${tpcds_data_url}/customer_address&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_customer_demographics
(
    cd_demo_sk                integer               not null,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      integer                       ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              integer                       ,
    cd_dep_employed_count     integer                       ,
    cd_dep_college_count      integer                       
) location (&apos;${tpcds_data_url}/customer_demographics&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_date_dim
(
    d_date_sk                 integer               not null,
    d_date_id                 char(16)              not null,
    d_date                    date                          ,
    d_month_seq               integer                       ,
    d_week_seq                integer                       ,
    d_quarter_seq             integer                       ,
    d_year                    integer                       ,
    d_dow                     integer                       ,
    d_moy                     integer                       ,
    d_dom                     integer                       ,
    d_qoy                     integer                       ,
    d_fy_year                 integer                       ,
    d_fy_quarter_seq          integer                       ,
    d_fy_week_seq             integer                       ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               integer                       ,
    d_last_dom                integer                       ,
    d_same_day_ly             integer                       ,
    d_same_day_lq             integer                       ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)                       
) location (&apos;${tpcds_data_url}/date_dim&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_warehouse
(
    w_warehouse_sk            integer               not null,
    w_warehouse_id            char(16)              not null,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         integer                       ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)                  
) location (&apos;${tpcds_data_url}/warehouse&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_ship_mode
(
    sm_ship_mode_sk           integer               not null,
    sm_ship_mode_id           char(16)              not null,
    sm_type                   char(30)                      ,
    sm_code                   char(10)                      ,
    sm_carrier                char(20)                      ,
    sm_contract               char(20)                      
) location (&apos;${tpcds_data_url}/ship_mode&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_time_dim
(
    t_time_sk                 integer               not null,
    t_time_id                 char(16)              not null,
    t_time                    integer                       ,
    t_hour                    integer                       ,
    t_minute                  integer                       ,
    t_second                  integer                       ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                      
) location (&apos;${tpcds_data_url}/time_dim&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_reason
(
    r_reason_sk               integer               not null,
    r_reason_id               char(16)              not null,
    r_reason_desc             char(100)                     
) location (&apos;${tpcds_data_url}/reason&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_income_band
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer                       
) location (&apos;${tpcds_data_url}/income_band&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_item
(
    i_item_sk                 integer               not null,
    i_item_id                 char(16)              not null,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                integer                       ,
    i_brand                   char(50)                      ,
    i_class_id                integer                       ,
    i_class                   char(50)                      ,
    i_category_id             integer                       ,
    i_category                char(50)                      ,
    i_manufact_id             integer                       ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              integer                       ,
    i_product_name            char(50)                      
) location (&apos;${tpcds_data_url}/item&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          integer                       ,
    s_store_name              varchar(50)                   ,
    s_number_employees        integer                       ,
    s_floor_space             integer                       ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               integer                       ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             integer                       ,
    s_division_name           varchar(50)                   ,
    s_company_id              integer                       ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  
) location (&apos;${tpcds_data_url}/store&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_rec_start_date         date                          ,
    cc_rec_end_date           date                          ,
    cc_closed_date_sk         integer                       ,
    cc_open_date_sk           integer                       ,
    cc_name                   varchar(50)                   ,
    cc_class                  varchar(50)                   ,
    cc_employees              integer                       ,
    cc_sq_ft                  integer                       ,
    cc_hours                  char(20)                      ,
    cc_manager                varchar(40)                   ,
    cc_mkt_id                 integer                       ,
    cc_mkt_class              char(50)                      ,
    cc_mkt_desc               varchar(100)                  ,
    cc_market_manager         varchar(40)                   ,
    cc_division               integer                       ,
    cc_division_name          varchar(50)                   ,
    cc_company                integer                       ,
    cc_company_name           char(50)                      ,
    cc_street_number          char(10)                      ,
    cc_street_name            varchar(60)                   ,
    cc_street_type            char(15)                      ,
    cc_suite_number           char(10)                      ,
    cc_city                   varchar(60)                   ,
    cc_county                 varchar(30)                   ,
    cc_state                  char(2)                       ,
    cc_zip                    char(10)                      ,
    cc_country                varchar(20)                   ,
    cc_gmt_offset             decimal(5,2)                  ,
    cc_tax_percentage         decimal(5,2)                  
) location (&apos;${tpcds_data_url}/call_center&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_customer
(
    c_customer_sk             integer               not null,
    c_customer_id             char(16)              not null,
    c_current_cdemo_sk        integer                       ,
    c_current_hdemo_sk        integer                       ,
    c_current_addr_sk         integer                       ,
    c_first_shipto_date_sk    integer                       ,
    c_first_sales_date_sk     integer                       ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               integer                       ,
    c_birth_month             integer                       ,
    c_birth_year              integer                       ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)                      
) location (&apos;${tpcds_data_url}/customer&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_web_site
(
    web_site_sk               integer               not null,
    web_site_id               char(16)              not null,
    web_rec_start_date        date                          ,
    web_rec_end_date          date                          ,
    web_name                  varchar(50)                   ,
    web_open_date_sk          integer                       ,
    web_close_date_sk         integer                       ,
    web_class                 varchar(50)                   ,
    web_manager               varchar(40)                   ,
    web_mkt_id                integer                       ,
    web_mkt_class             varchar(50)                   ,
    web_mkt_desc              varchar(100)                  ,
    web_market_manager        varchar(40)                   ,
    web_company_id            integer                       ,
    web_company_name          char(50)                      ,
    web_street_number         char(10)                      ,
    web_street_name           varchar(60)                   ,
    web_street_type           char(15)                      ,
    web_suite_number          char(10)                      ,
    web_city                  varchar(60)                   ,
    web_county                varchar(30)                   ,
    web_state                 char(2)                       ,
    web_zip                   char(10)                      ,
    web_country               varchar(20)                   ,
    web_gmt_offset            decimal(5,2)                  ,
    web_tax_percentage        decimal(5,2)                  
) location (&apos;${tpcds_data_url}/web_site&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_store_returns
(
    sr_returned_date_sk       integer                       ,
    sr_return_time_sk         integer                       ,
    sr_item_sk                integer               not null,
    sr_customer_sk            integer                       ,
    sr_cdemo_sk               integer                       ,
    sr_hdemo_sk               integer                       ,
    sr_addr_sk                integer                       ,
    sr_store_sk               integer                       ,
    sr_reason_sk              integer                       ,
    sr_ticket_number          bigint               not null,
    sr_return_quantity        integer                       ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)                  
) location (&apos;${tpcds_data_url}/store_returns&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_household_demographics
(
    hd_demo_sk                integer               not null,
    hd_income_band_sk         integer                       ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              integer                       ,
    hd_vehicle_count          integer                       
) location (&apos;${tpcds_data_url}/household_demographics&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_web_page
(
    wp_web_page_sk            integer               not null,
    wp_web_page_id            char(16)              not null,
    wp_rec_start_date         date                          ,
    wp_rec_end_date           date                          ,
    wp_creation_date_sk       integer                       ,
    wp_access_date_sk         integer                       ,
    wp_autogen_flag           char(1)                       ,
    wp_customer_sk            integer                       ,
    wp_url                    varchar(100)                  ,
    wp_type                   char(50)                      ,
    wp_char_count             integer                       ,
    wp_link_count             integer                       ,
    wp_image_count            integer                       ,
    wp_max_ad_count           integer                       
) location (&apos;${tpcds_data_url}/web_page&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_promotion
(
    p_promo_sk                integer               not null,
    p_promo_id                char(16)              not null,
    p_start_date_sk           integer                       ,
    p_end_date_sk             integer                       ,
    p_item_sk                 integer                       ,
    p_cost                    decimal(15,2)                 ,
    p_response_target         integer                       ,
    p_promo_name              char(50)                      ,
    p_channel_dmail           char(1)                       ,
    p_channel_email           char(1)                       ,
    p_channel_catalog         char(1)                       ,
    p_channel_tv              char(1)                       ,
    p_channel_radio           char(1)                       ,
    p_channel_press           char(1)                       ,
    p_channel_event           char(1)                       ,
    p_channel_demo            char(1)                       ,
    p_channel_details         varchar(100)                  ,
    p_purpose                 char(15)                      ,
    p_discount_active         char(1)                       
) location (&apos;${tpcds_data_url}/promotion&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_catalog_page
(
    cp_catalog_page_sk        integer               not null,
    cp_catalog_page_id        char(16)              not null,
    cp_start_date_sk          integer                       ,
    cp_end_date_sk            integer                       ,
    cp_department             varchar(50)                   ,
    cp_catalog_number         integer                       ,
    cp_catalog_page_number    integer                       ,
    cp_description            varchar(100)                  ,
    cp_type                   varchar(100)                  
) location (&apos;${tpcds_data_url}/catalog_page&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_inventory
(
    inv_date_sk               integer               not null,
    inv_item_sk               integer               not null,
    inv_warehouse_sk          integer               not null,
    inv_quantity_on_hand      integer                       
) location (&apos;${tpcds_data_url}/inventory&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_catalog_returns
(
    cr_returned_date_sk       integer                       ,
    cr_returned_time_sk       integer                       ,
    cr_item_sk                integer               not null,
    cr_refunded_customer_sk   integer                       ,
    cr_refunded_cdemo_sk      integer                       ,
    cr_refunded_hdemo_sk      integer                       ,
    cr_refunded_addr_sk       integer                       ,
    cr_returning_customer_sk  integer                       ,
    cr_returning_cdemo_sk     integer                       ,
    cr_returning_hdemo_sk     integer                       ,
    cr_returning_addr_sk      integer                       ,
    cr_call_center_sk         integer                       ,
    cr_catalog_page_sk        integer                       ,
    cr_ship_mode_sk           integer                       ,
    cr_warehouse_sk           integer                       ,
    cr_reason_sk              integer                       ,
    cr_order_number           bigint               not null,
    cr_return_quantity        integer                       ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)                  
) location (&apos;${tpcds_data_url}/catalog_returns&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_web_returns
(
    wr_returned_date_sk       integer                       ,
    wr_returned_time_sk       integer                       ,
    wr_item_sk                integer               not null,
    wr_refunded_customer_sk   integer                       ,
    wr_refunded_cdemo_sk      integer                       ,
    wr_refunded_hdemo_sk      integer                       ,
    wr_refunded_addr_sk       integer                       ,
    wr_returning_customer_sk  integer                       ,
    wr_returning_cdemo_sk     integer                       ,
    wr_returning_hdemo_sk     integer                       ,
    wr_returning_addr_sk      integer                       ,
    wr_web_page_sk            integer                       ,
    wr_reason_sk              integer                       ,
    wr_order_number           bigint               not null,
    wr_return_quantity        integer                       ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)                  
) location (&apos;${tpcds_data_url}/web_returns&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_web_sales
(
    ws_sold_date_sk           integer                       ,
    ws_sold_time_sk           integer                       ,
    ws_ship_date_sk           integer                       ,
    ws_item_sk                integer               not null,
    ws_bill_customer_sk       integer                       ,
    ws_bill_cdemo_sk          integer                       ,
    ws_bill_hdemo_sk          integer                       ,
    ws_bill_addr_sk           integer                       ,
    ws_ship_customer_sk       integer                       ,
    ws_ship_cdemo_sk          integer                       ,
    ws_ship_hdemo_sk          integer                       ,
    ws_ship_addr_sk           integer                       ,
    ws_web_page_sk            integer                       ,
    ws_web_site_sk            integer                       ,
    ws_ship_mode_sk           integer                       ,
    ws_warehouse_sk           integer                       ,
    ws_promo_sk               integer                       ,
    ws_order_number           bigint               not null,
    ws_quantity               integer                       ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)                  
) location (&apos;${tpcds_data_url}/web_sales&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_catalog_sales
(
    cs_sold_date_sk           integer                       ,
    cs_sold_time_sk           integer                       ,
    cs_ship_date_sk           integer                       ,
    cs_bill_customer_sk       integer                       ,
    cs_bill_cdemo_sk          integer                       ,
    cs_bill_hdemo_sk          integer                       ,
    cs_bill_addr_sk           integer                       ,
    cs_ship_customer_sk       integer                       ,
    cs_ship_cdemo_sk          integer                       ,
    cs_ship_hdemo_sk          integer                       ,
    cs_ship_addr_sk           integer                       ,
    cs_call_center_sk         integer                       ,
    cs_catalog_page_sk        integer                       ,
    cs_ship_mode_sk           integer                       ,
    cs_warehouse_sk           integer                       ,
    cs_item_sk                integer               not null,
    cs_promo_sk               integer                       ,
    cs_order_number           bigint               not null,
    cs_quantity               integer                       ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)                  
) location (&apos;${tpcds_data_url}/catalog_sales&apos;) FORMAT &apos;parquet&apos;

create external table ex_parquet_store_sales
(
    ss_sold_date_sk           integer                       ,
    ss_sold_time_sk           integer                       ,
    ss_item_sk                integer               not null,
    ss_customer_sk            integer                       ,
    ss_cdemo_sk               integer                       ,
    ss_hdemo_sk               integer                       ,
    ss_addr_sk                integer                       ,
    ss_store_sk               integer                       ,
    ss_promo_sk               integer                       ,
    ss_ticket_number          bigint               not null,
    ss_quantity               integer                       ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)                  
) location (&apos;${tpcds_data_url}/store_sales&apos;) FORMAT &apos;parquet&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create hdfs table" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">create table customer_address
(
    ca_address_sk             integer               not null,
    ca_address_id             char(16)              not null,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)                      ,
    primary key (ca_address_sk)
)  

create table customer_demographics
(
    cd_demo_sk                integer               not null,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      integer                       ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              integer                       ,
    cd_dep_employed_count     integer                       ,
    cd_dep_college_count      integer                       ,
    primary key (cd_demo_sk)
)  

create table date_dim
(
    d_date_sk                 integer               not null,
    d_date_id                 char(16)              not null,
    d_date                    date                          ,
    d_month_seq               integer                       ,
    d_week_seq                integer                       ,
    d_quarter_seq             integer                       ,
    d_year                    integer                       ,
    d_dow                     integer                       ,
    d_moy                     integer                       ,
    d_dom                     integer                       ,
    d_qoy                     integer                       ,
    d_fy_year                 integer                       ,
    d_fy_quarter_seq          integer                       ,
    d_fy_week_seq             integer                       ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               integer                       ,
    d_last_dom                integer                       ,
    d_same_day_ly             integer                       ,
    d_same_day_lq             integer                       ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)                       ,
    primary key (d_date_sk)
)  

create table warehouse
(
    w_warehouse_sk            integer               not null,
    w_warehouse_id            char(16)              not null,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         integer                       ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)                  ,
    primary key (w_warehouse_sk)
)  


create table ship_mode
(
    sm_ship_mode_sk           integer               not null,
    sm_ship_mode_id           char(16)              not null,
    sm_type                   char(30)                      ,
    sm_code                   char(10)                      ,
    sm_carrier                char(20)                      ,
    sm_contract               char(20)                      ,
    primary key (sm_ship_mode_sk)
)  

create table time_dim
(
    t_time_sk                 integer               not null,
    t_time_id                 char(16)              not null,
    t_time                    integer                       ,
    t_hour                    integer                       ,
    t_minute                  integer                       ,
    t_second                  integer                       ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                      ,
    primary key (t_time_sk)
)  

create table reason
(
    r_reason_sk               integer               not null,
    r_reason_id               char(16)              not null,
    r_reason_desc             char(100)                     ,
    primary key (r_reason_sk)
)  

create table income_band
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer                       ,
    primary key (ib_income_band_sk)
)  

create table item
(
    i_item_sk                 integer               not null,
    i_item_id                 char(16)              not null,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                integer                       ,
    i_brand                   char(50)                      ,
    i_class_id                integer                       ,
    i_class                   char(50)                      ,
    i_category_id             integer                       ,
    i_category                char(50)                      ,
    i_manufact_id             integer                       ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              integer                       ,
    i_product_name            char(50)                      ,
    primary key (i_item_sk)
)  

create table store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          integer                       ,
    s_store_name              varchar(50)                   ,
    s_number_employees        integer                       ,
    s_floor_space             integer                       ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               integer                       ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             integer                       ,
    s_division_name           varchar(50)                   ,
    s_company_id              integer                       ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  ,
    primary key (s_store_sk)
)  

create table call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_rec_start_date         date                          ,
    cc_rec_end_date           date                          ,
    cc_closed_date_sk         integer                       ,
    cc_open_date_sk           integer                       ,
    cc_name                   varchar(50)                   ,
    cc_class                  varchar(50)                   ,
    cc_employees              integer                       ,
    cc_sq_ft                  integer                       ,
    cc_hours                  char(20)                      ,
    cc_manager                varchar(40)                   ,
    cc_mkt_id                 integer                       ,
    cc_mkt_class              char(50)                      ,
    cc_mkt_desc               varchar(100)                  ,
    cc_market_manager         varchar(40)                   ,
    cc_division               integer                       ,
    cc_division_name          varchar(50)                   ,
    cc_company                integer                       ,
    cc_company_name           char(50)                      ,
    cc_street_number          char(10)                      ,
    cc_street_name            varchar(60)                   ,
    cc_street_type            char(15)                      ,
    cc_suite_number           char(10)                      ,
    cc_city                   varchar(60)                   ,
    cc_county                 varchar(30)                   ,
    cc_state                  char(2)                       ,
    cc_zip                    char(10)                      ,
    cc_country                varchar(20)                   ,
    cc_gmt_offset             decimal(5,2)                  ,
    cc_tax_percentage         decimal(5,2)                  ,
    primary key (cc_call_center_sk)
)  

create table customer
(
    c_customer_sk             integer               not null,
    c_customer_id             char(16)              not null,
    c_current_cdemo_sk        integer                       ,
    c_current_hdemo_sk        integer                       ,
    c_current_addr_sk         integer                       ,
    c_first_shipto_date_sk    integer                       ,
    c_first_sales_date_sk     integer                       ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               integer                       ,
    c_birth_month             integer                       ,
    c_birth_year              integer                       ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)                      ,
    primary key (c_customer_sk)
)  

create table web_site
(
    web_site_sk               integer               not null,
    web_site_id               char(16)              not null,
    web_rec_start_date        date                          ,
    web_rec_end_date          date                          ,
    web_name                  varchar(50)                   ,
    web_open_date_sk          integer                       ,
    web_close_date_sk         integer                       ,
    web_class                 varchar(50)                   ,
    web_manager               varchar(40)                   ,
    web_mkt_id                integer                       ,
    web_mkt_class             varchar(50)                   ,
    web_mkt_desc              varchar(100)                  ,
    web_market_manager        varchar(40)                   ,
    web_company_id            integer                       ,
    web_company_name          char(50)                      ,
    web_street_number         char(10)                      ,
    web_street_name           varchar(60)                   ,
    web_street_type           char(15)                      ,
    web_suite_number          char(10)                      ,
    web_city                  varchar(60)                   ,
    web_county                varchar(30)                   ,
    web_state                 char(2)                       ,
    web_zip                   char(10)                      ,
    web_country               varchar(20)                   ,
    web_gmt_offset            decimal(5,2)                  ,
    web_tax_percentage        decimal(5,2)                  ,
    primary key (web_site_sk)
)  

create table store_returns
(
    sr_returned_date_sk       integer                       ,
    sr_return_time_sk         integer                       ,
    sr_item_sk                integer               not null,
    sr_customer_sk            integer                       ,
    sr_cdemo_sk               integer                       ,
    sr_hdemo_sk               integer                       ,
    sr_addr_sk                integer                       ,
    sr_store_sk               integer                       ,
    sr_reason_sk              integer                       ,
    sr_ticket_number          bigint               not null,
    sr_return_quantity        integer                       ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)                  ,
    primary key (sr_item_sk, sr_ticket_number)
)

create table household_demographics
(
    hd_demo_sk                integer               not null,
    hd_income_band_sk         integer                       ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              integer                       ,
    hd_vehicle_count          integer                       ,
    primary key (hd_demo_sk)
)  

create table web_page
(
    wp_web_page_sk            integer               not null,
    wp_web_page_id            char(16)              not null,
    wp_rec_start_date         date                          ,
    wp_rec_end_date           date                          ,
    wp_creation_date_sk       integer                       ,
    wp_access_date_sk         integer                       ,
    wp_autogen_flag           char(1)                       ,
    wp_customer_sk            integer                       ,
    wp_url                    varchar(100)                  ,
    wp_type                   char(50)                      ,
    wp_char_count             integer                       ,
    wp_link_count             integer                       ,
    wp_image_count            integer                       ,
    wp_max_ad_count           integer                       ,
    primary key (wp_web_page_sk)
)  

create table promotion
(
    p_promo_sk                integer               not null,
    p_promo_id                char(16)              not null,
    p_start_date_sk           integer                       ,
    p_end_date_sk             integer                       ,
    p_item_sk                 integer                       ,
    p_cost                    decimal(15,2)                 ,
    p_response_target         integer                       ,
    p_promo_name              char(50)                      ,
    p_channel_dmail           char(1)                       ,
    p_channel_email           char(1)                       ,
    p_channel_catalog         char(1)                       ,
    p_channel_tv              char(1)                       ,
    p_channel_radio           char(1)                       ,
    p_channel_press           char(1)                       ,
    p_channel_event           char(1)                       ,
    p_channel_demo            char(1)                       ,
    p_channel_details         varchar(100)                  ,
    p_purpose                 char(15)                      ,
    p_discount_active         char(1)                       ,
    primary key (p_promo_sk)
)  

create table catalog_page
(
    cp_catalog_page_sk        integer               not null,
    cp_catalog_page_id        char(16)              not null,
    cp_start_date_sk          integer                       ,
    cp_end_date_sk            integer                       ,
    cp_department             varchar(50)                   ,
    cp_catalog_number         integer                       ,
    cp_catalog_page_number    integer                       ,
    cp_description            varchar(100)                  ,
    cp_type                   varchar(100)                  ,
    primary key (cp_catalog_page_sk)
)  

create table inventory
(
    inv_date_sk               integer               not null,
    inv_item_sk               integer               not null,
    inv_warehouse_sk          integer               not null,
    inv_quantity_on_hand      integer                       ,
    primary key (inv_date_sk, inv_item_sk, inv_warehouse_sk)
)

create table catalog_returns
(
    cr_returned_date_sk       integer                       ,
    cr_returned_time_sk       integer                       ,
    cr_item_sk                integer               not null,
    cr_refunded_customer_sk   integer                       ,
    cr_refunded_cdemo_sk      integer                       ,
    cr_refunded_hdemo_sk      integer                       ,
    cr_refunded_addr_sk       integer                       ,
    cr_returning_customer_sk  integer                       ,
    cr_returning_cdemo_sk     integer                       ,
    cr_returning_hdemo_sk     integer                       ,
    cr_returning_addr_sk      integer                       ,
    cr_call_center_sk         integer                       ,
    cr_catalog_page_sk        integer                       ,
    cr_ship_mode_sk           integer                       ,
    cr_warehouse_sk           integer                       ,
    cr_reason_sk              integer                       ,
    cr_order_number           bigint               not null,
    cr_return_quantity        integer                       ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)                  ,
    primary key (cr_item_sk, cr_order_number)
)

create table web_returns
(
    wr_returned_date_sk       integer                       ,
    wr_returned_time_sk       integer                       ,
    wr_item_sk                integer               not null,
    wr_refunded_customer_sk   integer                       ,
    wr_refunded_cdemo_sk      integer                       ,
    wr_refunded_hdemo_sk      integer                       ,
    wr_refunded_addr_sk       integer                       ,
    wr_returning_customer_sk  integer                       ,
    wr_returning_cdemo_sk     integer                       ,
    wr_returning_hdemo_sk     integer                       ,
    wr_returning_addr_sk      integer                       ,
    wr_web_page_sk            integer                       ,
    wr_reason_sk              integer                       ,
    wr_order_number           bigint               not null,
    wr_return_quantity        integer                       ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)                  ,
    primary key (wr_item_sk, wr_order_number)
)

create table web_sales
(
    ws_sold_date_sk           integer                       ,
    ws_sold_time_sk           integer                       ,
    ws_ship_date_sk           integer                       ,
    ws_item_sk                integer               not null,
    ws_bill_customer_sk       integer                       ,
    ws_bill_cdemo_sk          integer                       ,
    ws_bill_hdemo_sk          integer                       ,
    ws_bill_addr_sk           integer                       ,
    ws_ship_customer_sk       integer                       ,
    ws_ship_cdemo_sk          integer                       ,
    ws_ship_hdemo_sk          integer                       ,
    ws_ship_addr_sk           integer                       ,
    ws_web_page_sk            integer                       ,
    ws_web_site_sk            integer                       ,
    ws_ship_mode_sk           integer                       ,
    ws_warehouse_sk           integer                       ,
    ws_promo_sk               integer                       ,
    ws_order_number           bigint               not null,
    ws_quantity               integer                       ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)                  ,
    primary key (ws_item_sk, ws_order_number)
)

create table catalog_sales
(
    cs_sold_date_sk           integer                       ,
    cs_sold_time_sk           integer                       ,
    cs_ship_date_sk           integer                       ,
    cs_bill_customer_sk       integer                       ,
    cs_bill_cdemo_sk          integer                       ,
    cs_bill_hdemo_sk          integer                       ,
    cs_bill_addr_sk           integer                       ,
    cs_ship_customer_sk       integer                       ,
    cs_ship_cdemo_sk          integer                       ,
    cs_ship_hdemo_sk          integer                       ,
    cs_ship_addr_sk           integer                       ,
    cs_call_center_sk         integer                       ,
    cs_catalog_page_sk        integer                       ,
    cs_ship_mode_sk           integer                       ,
    cs_warehouse_sk           integer                       ,
    cs_item_sk                integer               not null,
    cs_promo_sk               integer                       ,
    cs_order_number           bigint               not null,
    cs_quantity               integer                       ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)                  ,
    primary key (cs_item_sk, cs_order_number)
)

create table store_sales
(
    ss_sold_date_sk           integer                       ,
    ss_sold_time_sk           integer                       ,
    ss_item_sk                integer               not null,
    ss_customer_sk            integer                       ,
    ss_cdemo_sk               integer                       ,
    ss_hdemo_sk               integer                       ,
    ss_addr_sk                integer                       ,
    ss_store_sk               integer                       ,
    ss_promo_sk               integer                       ,
    ss_ticket_number          bigint               not null,
    ss_quantity               integer                       ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)                  ,
    primary key (ss_item_sk, ss_ticket_number)
)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas call_center" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into call_center             select * from ex_parquet_call_center                   ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas catalog_page" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into catalog_page            select * from ex_parquet_catalog_page                  ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas customer" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into customer                select * from ex_parquet_customer                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas customer_address" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into customer_address        select * from ex_parquet_customer_address              ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas customer_demographics" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into customer_demographics   select * from ex_parquet_customer_demographics         ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas date_dim" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into date_dim                select * from ex_parquet_date_dim                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas web_site" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into web_site                select * from ex_parquet_web_site                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas household_demographics" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into household_demographics  select * from ex_parquet_household_demographics        ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas income_band" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into income_band             select * from ex_parquet_income_band                   ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas item" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into item                    select * from ex_parquet_item                          ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas promotion" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into promotion               select * from ex_parquet_promotion                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas reason" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into reason                  select * from ex_parquet_reason                        ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas ship_mode" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into ship_mode               select * from ex_parquet_ship_mode                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas store" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into store                   select * from ex_parquet_store                         ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas time_dim" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into time_dim                select * from ex_parquet_time_dim                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas warehouse" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into warehouse               select * from ex_parquet_warehouse                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas web_page" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into web_page                select * from ex_parquet_web_page                      ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas web_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into web_returns             select * from ex_parquet_web_returns                   ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas catalog_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into catalog_returns         select * from ex_parquet_catalog_returns               ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas inventory" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into inventory               select * from ex_parquet_inventory                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas store_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into store_returns           select * from ex_parquet_store_returns                 ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas web_sales" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into web_sales               select * from ex_parquet_web_sales                     ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas catalog_sales " enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into catalog_sales           select * from ex_parquet_catalog_sales                 ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="insert into pallas store_sales    " enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">insert into store_sales             select * from ex_parquet_store_sales                   ;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="create index or not" enabled="true">
          <stringProp name="IfController.condition">${createindex} == true</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create index" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="drop index" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">DROP INDEX call_center IF EXISTS;
DROP INDEX catalog_page IF EXISTS;
DROP INDEX customer IF EXISTS;
DROP INDEX customer_address IF EXISTS;
DROP INDEX customer_demographics IF EXISTS;
DROP INDEX date_dim IF EXISTS;
DROP INDEX web_site IF EXISTS;
DROP INDEX household_demographics IF EXISTS;
DROP INDEX income_band IF EXISTS;
DROP INDEX item IF EXISTS;
DROP INDEX promotion IF EXISTS;
DROP INDEX reason IF EXISTS;
DROP INDEX ship_mode IF EXISTS;
DROP INDEX store IF EXISTS;
DROP INDEX time_dim IF EXISTS;
DROP INDEX warehourse IF EXISTS;
DROP INDEX web_page IF EXISTS;
DROP INDEX web_returns IF EXISTS;
DROP INDEX catalog_returns IF EXISTS;
DROP INDEX inventory IF EXISTS;
DROP INDEX store_returns IF EXISTS;
DROP INDEX web_sales IF EXISTS;
DROP INDEX catalog_sales IF EXISTS;
DROP INDEX store_sales IF EXISTS;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas call_center" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX call_center ON call_center (cc_call_center_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas catalog_page" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX catalog_page ON catalog_page (cp_catalog_page_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas customer" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX customer ON customer (c_customer_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas customer_address" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX customer_address ON customer_address (ca_address_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas customer_demographics" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX customer_demographics ON customer_demographics (cd_demo_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas date_dim" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX date_dim ON date_dim (d_date_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas web_site" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX web_site ON web_site (web_site_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas household_demographics" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX household_demographics ON household_demographics (hd_demo_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas income_band" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX income_band ON income_band (ib_income_band_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas item" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX item ON item (i_item_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas promotion" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX promotion ON promotion (p_promo_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas reason" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX reason ON reason (r_reason_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas ship_mode" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX ship_mode ON ship_mode (sm_ship_mode_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas store" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX store ON store (s_store_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas time_dim" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX time_dim ON time_dim (t_time_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas warehouse" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX warehouse ON warehouse (w_warehouse_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas web_page" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX web_page ON web_page (wp_web_page_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas web_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX web_returns ON web_returns (wr_item_sk, wr_order_number)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas catalog_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX catalog_returns ON catalog_returns (cr_item_sk, cr_order_number)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas inventory" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX inventory ON inventory (inv_date_sk, inv_item_sk, inv_warehouse_sk)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas store_returns" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX store_returns ON store_returns (sr_item_sk, sr_ticket_number)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas web_sales" enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX web_sales ON web_sales (ws_item_sk, ws_order_number)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas catalog_sales " enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX catalog_sales ON catalog_sales (cs_item_sk, cs_order_number)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create index pallas store_sales    " enabled="true">
              <stringProp name="dataSource">${a}</stringProp>
              <stringProp name="query">CREATE INDEX store_sales ON store_sales (ss_item_sk, ss_ticket_number)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CHANGE AUTHORIZATION" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="connect user ${b} password &apos;${b_password}&apos;;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">connect user ${b} password &apos;${b_password}&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If collect statistics" enabled="true">
          <stringProp name="IfController.condition">${stats} == true</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table customer_address compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table customer_address compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table customer_demographics compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table customer_demographics compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table date_dim compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table date_dim compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table warehouse compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table warehouse compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table ship_mode compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table ship_mode compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table time_dim compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table time_dim compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table reason compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table reason compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table income_band compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table income_band compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table item compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table item compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table store compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table store compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table call_center compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table call_center compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table customer compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table customer compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table web_site compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table web_site compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table store_returns compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table store_returns compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table household_demographics compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table household_demographics compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table web_page compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table web_page compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table promotion compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table promotion compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table catalog_page compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table catalog_page compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table inventory compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table inventory compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table catalog_returns compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table catalog_returns compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table web_returns compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table web_returns compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table web_sales compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table web_sales compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table catalog_sales compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table catalog_sales compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="analyze table store_sales compute statistics;" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">analyze table store_sales compute statistics;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set spark properties" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="set spark properties" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query"> SET SESSION WORK &apos;spark.sql.shuffle.partitions&apos; 500;
 SET SESSION WORK &apos;spark.driver.maxResultSize&apos; 10737418240;
 SET SESSION WORK &apos;spark.sql.autoBroadcastJoinThreshold&apos; 1048576000;
 SET SESSION WORK &apos;spark.sql.adaptiveBroadcastJoinThreshold&apos; 104857600;
 SET SESSION WORK &apos;spark.sql.adaptive.join.enabled&apos; TRUE;
 SET SESSION WORK &apos;spark.memory.offHeap.enabled&apos; TRUE;
 SET SESSION WORK &apos;spark.memory.offHeap.size&apos; 2147483648;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="sql" enabled="true"/>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q1.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q1.sql

 WITH customer_total_return AS
   (SELECT sr_customer_sk AS ctr_customer_sk, sr_store_sk AS ctr_store_sk,
           sum(sr_return_amt) AS ctr_total_return
    FROM store_returns, date_dim
    WHERE sr_returned_date_sk = d_date_sk AND d_year = 2000
    GROUP BY sr_customer_sk, sr_store_sk)
 SELECT c_customer_id
   FROM customer_total_return ctr1, store, customer
   WHERE ctr1.ctr_total_return &gt;
    (SELECT avg(ctr_total_return)*1.2
      FROM customer_total_return ctr2
       WHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk)
   AND s_store_sk = ctr1.ctr_store_sk
   AND s_state = &apos;TN&apos;
   AND ctr1.ctr_customer_sk = c_customer_sk
   ORDER BY c_customer_id LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">q1</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q2.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q2.sql

 WITH wscs as
 (SELECT sold_date_sk, sales_price
  FROM (SELECT ws_sold_date_sk sold_date_sk, ws_ext_sales_price sales_price
        FROM web_sales
        UNION ALL
       SELECT cs_sold_date_sk sold_date_sk, cs_ext_sales_price sales_price
        FROM catalog_sales)),
 wswscs AS
 (SELECT d_week_seq,
        sum(case when (d_day_name=&apos;Sunday&apos;) then sales_price else null end) sun_sales,
        sum(case when (d_day_name=&apos;Monday&apos;) then sales_price else null end) mon_sales,
        sum(case when (d_day_name=&apos;Tuesday&apos;) then sales_price else  null end) tue_sales,
        sum(case when (d_day_name=&apos;Wednesday&apos;) then sales_price else null end) wed_sales,
        sum(case when (d_day_name=&apos;Thursday&apos;) then sales_price else null end) thu_sales,
        sum(case when (d_day_name=&apos;Friday&apos;) then sales_price else null end) fri_sales,
        sum(case when (d_day_name=&apos;Saturday&apos;) then sales_price else null end) sat_sales
 FROM wscs, date_dim
 WHERE d_date_sk = sold_date_sk
 GROUP BY d_week_seq)
 SELECT d_week_seq1
       ,round(sun_sales1/sun_sales2,2)	sun_rate
       ,round(mon_sales1/mon_sales2,2)	mon_rate
       ,round(tue_sales1/tue_sales2,2)	tue_rate
       ,round(wed_sales1/wed_sales2,2)	wed_rate
       ,round(thu_sales1/thu_sales2,2)	thu_rate
       ,round(fri_sales1/fri_sales2,2)	fri_rate
       ,round(sat_sales1/sat_sales2,2)	sat_rate
 FROM
 (SELECT wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  FROM wswscs,date_dim
  WHERE date_dim.d_week_seq = wswscs.d_week_seq AND d_year = 2001) y,
 (SELECT wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  FROM wswscs, date_dim
  WHERE date_dim.d_week_seq = wswscs.d_week_seq AND d_year = 2001 + 1) z
 WHERE d_week_seq1=d_week_seq2-53
 ORDER BY d_week_seq1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q3.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q3.sql

 SELECT dt.d_year, item.i_brand_id brand_id, item.i_brand brand,SUM(ss_ext_sales_price) sum_agg
 FROM  date_dim dt, store_sales, item
 WHERE dt.d_date_sk = store_sales.ss_sold_date_sk
   AND store_sales.ss_item_sk = item.i_item_sk
   AND item.i_manufact_id = 128
   AND dt.d_moy=11
 GROUP BY dt.d_year, item.i_brand, item.i_brand_id
 ORDER BY dt.d_year, sum_agg desc, brand_id
 LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q4.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q4.sql

WITH year_total AS (
 SELECT c_customer_id customer_id,
        c_first_name customer_first_name,
        c_last_name customer_last_name,
        c_preferred_cust_flag customer_preferred_cust_flag,
        c_birth_country customer_birth_country,
        c_login customer_login,
        c_email_address customer_email_address,
        d_year dyear,
        sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total,
        &apos;s&apos; sale_type
 FROM customer, store_sales, date_dim
 WHERE c_customer_sk = ss_customer_sk AND ss_sold_date_sk = d_date_sk
 GROUP BY c_customer_id,
          c_first_name,
          c_last_name,
          c_preferred_cust_flag,
          c_birth_country,
          c_login,
          c_email_address,
          d_year
 UNION ALL
 SELECT c_customer_id customer_id,
        c_first_name customer_first_name,
        c_last_name customer_last_name,
        c_preferred_cust_flag customer_preferred_cust_flag,
        c_birth_country customer_birth_country,
        c_login customer_login,
        c_email_address customer_email_address,
        d_year dyear,
        sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total,
        &apos;c&apos; sale_type
 FROM customer, catalog_sales, date_dim
 WHERE c_customer_sk = cs_bill_customer_sk AND cs_sold_date_sk = d_date_sk
 GROUP BY c_customer_id,
          c_first_name,
          c_last_name,
          c_preferred_cust_flag,
          c_birth_country,
          c_login,
          c_email_address,
          d_year
 UNION ALL
 SELECT c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,&apos;w&apos; sale_type
 FROM customer, web_sales, date_dim
 WHERE c_customer_sk = ws_bill_customer_sk AND ws_sold_date_sk = d_date_sk
 GROUP BY c_customer_id,
          c_first_name,
          c_last_name,
          c_preferred_cust_flag,
          c_birth_country,
          c_login,
          c_email_address,
          d_year)
 SELECT
   t_s_secyear.customer_id,
   t_s_secyear.customer_first_name,
   t_s_secyear.customer_last_name,
   t_s_secyear.customer_preferred_cust_flag
 FROM year_total t_s_firstyear, year_total t_s_secyear, year_total t_c_firstyear,
      year_total t_c_secyear, year_total t_w_firstyear, year_total t_w_secyear
 WHERE t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = &apos;s&apos;
   and t_c_firstyear.sale_type = &apos;c&apos;
   and t_w_firstyear.sale_type = &apos;w&apos;
   and t_s_secyear.sale_type = &apos;s&apos;
   and t_c_secyear.sale_type = &apos;c&apos;
   and t_w_secyear.sale_type = &apos;w&apos;
   and t_s_firstyear.dyear = 2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear = 2001
   and t_c_secyear.dyear = 2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total &gt; 0
   and t_c_firstyear.year_total &gt; 0
   and t_w_firstyear.year_total &gt; 0
   and case when t_c_firstyear.year_total &gt; 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           &gt; case when t_s_firstyear.year_total &gt; 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total &gt; 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           &gt; case when t_w_firstyear.year_total &gt; 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 ORDER BY
   t_s_secyear.customer_id,
   t_s_secyear.customer_first_name,
   t_s_secyear.customer_last_name,
   t_s_secyear.customer_preferred_cust_flag
 LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q5.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q5.sql

 WITH ssr AS
  (SELECT s_store_id,
          sum(sales_price) as sales,
          sum(profit) as profit,
          sum(return_amt) as returns,
          sum(net_loss) as profit_loss
  FROM
    (SELECT ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    FROM store_sales
    UNION ALL
    SELECT sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    FROM store_returns)
    salesreturns, date_dim, store
  WHERE date_sk = d_date_sk
       and d_date between cast(&apos;2000-08-23&apos; as date)
                  and ((cast(&apos;2000-08-23&apos; as date) + interval &apos;14&apos; day))
       and store_sk = s_store_sk
 GROUP BY s_store_id),
 csr AS
 (SELECT cp_catalog_page_id,
         sum(sales_price) as sales,
         sum(profit) as profit,
         sum(return_amt) as returns,
         sum(net_loss) as profit_loss
 FROM
   (SELECT cs_catalog_page_sk as page_sk,
           cs_sold_date_sk  as date_sk,
           cs_ext_sales_price as sales_price,
           cs_net_profit as profit,
           cast(0 as decimal(7,2)) as return_amt,
           cast(0 as decimal(7,2)) as net_loss
    FROM catalog_sales
    UNION ALL
    SELECT cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns, date_dim, catalog_page
 WHERE date_sk = d_date_sk
       and d_date between cast(&apos;2000-08-23&apos; as date)
                  and ((cast(&apos;2000-08-23&apos; as date) + interval &apos;14&apos; day))
       and page_sk = cp_catalog_page_sk
 GROUP BY cp_catalog_page_id)
 ,
 wsr AS
 (SELECT web_site_id,
         sum(sales_price) as sales,
         sum(profit) as profit,
         sum(return_amt) as returns,
         sum(net_loss) as profit_loss
 from
  (select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    FROM web_returns LEFT  OUTER JOIN web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns, date_dim, web_site
 WHERE date_sk = d_date_sk
       and d_date between cast(&apos;2000-08-23&apos; as date)
                  and ((cast(&apos;2000-08-23&apos; as date) + interval &apos;14&apos; day))
       and wsr_web_site_sk = web_site_sk
 GROUP BY web_site_id)
 SELECT channel,
        id,
        sum(sales) as sales,
        sum(returns) as returns,
        sum(profit) as profit
 from
 (select &apos;store channel&apos; as channel,
         concat(&apos;store&apos;, s_store_id) as id,
         sales,
         returns,
        (profit - profit_loss) as profit
 FROM ssr
 UNION ALL
 select &apos;catalog channel&apos; as channel,
        concat(&apos;catalog_page&apos;, cp_catalog_page_id) as id,
        sales,
        returns,
        (profit - profit_loss) as profit
 FROM  csr
 UNION ALL
 SELECT &apos;web channel&apos; as channel,
        concat(&apos;web_site&apos;, web_site_id) as id,
        sales,
        returns,
        (profit - profit_loss) as profit
 FROM wsr
 ) x
 GROUP BY ROLLUP (channel, id)
 ORDER BY channel, id
 LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q6.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q6.sql

SELECT state, cnt FROM (
 SELECT a.ca_state state, count(*) cnt
 FROM
    customer_address a, customer c, store_sales s, date_dim d, item i
 WHERE a.ca_address_sk = c.c_current_addr_sk
 	AND c.c_customer_sk = s.ss_customer_sk
 	AND s.ss_sold_date_sk = d.d_date_sk
 	AND s.ss_item_sk = i.i_item_sk
 	AND d.d_month_seq =
 	     (SELECT distinct (d_month_seq) FROM date_dim 
        WHERE d_year = 2001 AND d_moy = 1)
 	AND i.i_current_price &gt; 1.2 *
             (SELECT avg(j.i_current_price) FROM item j
 	            WHERE j.i_category = i.i_category)
 GROUP BY a.ca_state
) 
WHERE cnt &gt;= 10
ORDER BY cnt LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q7.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q7.sql

 SELECT i_item_id,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 FROM store_sales, customer_demographics, date_dim, item, promotion
 WHERE ss_sold_date_sk = d_date_sk AND
       ss_item_sk = i_item_sk AND
       ss_cdemo_sk = cd_demo_sk AND
       ss_promo_sk = p_promo_sk AND
       cd_gender = &apos;M&apos; AND
       cd_marital_status = &apos;S&apos; AND
       cd_education_status = &apos;College&apos; AND
       (p_channel_email = &apos;N&apos; or p_channel_event = &apos;N&apos;) AND
       d_year = 2000
 GROUP BY i_item_id
 ORDER BY i_item_id LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q8.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q8.sql

 select s_store_name, sum(ss_net_profit)
 from store_sales, date_dim, store,
     (SELECT ca_zip
       from (
       (SELECT substr(ca_zip,1,5) ca_zip FROM customer_address
          WHERE substr(ca_zip,1,5) IN (
               &apos;24128&apos;,&apos;76232&apos;,&apos;65084&apos;,&apos;87816&apos;,&apos;83926&apos;,&apos;77556&apos;,&apos;20548&apos;,
               &apos;26231&apos;,&apos;43848&apos;,&apos;15126&apos;,&apos;91137&apos;,&apos;61265&apos;,&apos;98294&apos;,&apos;25782&apos;,
               &apos;17920&apos;,&apos;18426&apos;,&apos;98235&apos;,&apos;40081&apos;,&apos;84093&apos;,&apos;28577&apos;,&apos;55565&apos;,
               &apos;17183&apos;,&apos;54601&apos;,&apos;67897&apos;,&apos;22752&apos;,&apos;86284&apos;,&apos;18376&apos;,&apos;38607&apos;,
               &apos;45200&apos;,&apos;21756&apos;,&apos;29741&apos;,&apos;96765&apos;,&apos;23932&apos;,&apos;89360&apos;,&apos;29839&apos;,
               &apos;25989&apos;,&apos;28898&apos;,&apos;91068&apos;,&apos;72550&apos;,&apos;10390&apos;,&apos;18845&apos;,&apos;47770&apos;,
               &apos;82636&apos;,&apos;41367&apos;,&apos;76638&apos;,&apos;86198&apos;,&apos;81312&apos;,&apos;37126&apos;,&apos;39192&apos;,
               &apos;88424&apos;,&apos;72175&apos;,&apos;81426&apos;,&apos;53672&apos;,&apos;10445&apos;,&apos;42666&apos;,&apos;66864&apos;,
               &apos;66708&apos;,&apos;41248&apos;,&apos;48583&apos;,&apos;82276&apos;,&apos;18842&apos;,&apos;78890&apos;,&apos;49448&apos;,
               &apos;14089&apos;,&apos;38122&apos;,&apos;34425&apos;,&apos;79077&apos;,&apos;19849&apos;,&apos;43285&apos;,&apos;39861&apos;,
               &apos;66162&apos;,&apos;77610&apos;,&apos;13695&apos;,&apos;99543&apos;,&apos;83444&apos;,&apos;83041&apos;,&apos;12305&apos;,
               &apos;57665&apos;,&apos;68341&apos;,&apos;25003&apos;,&apos;57834&apos;,&apos;62878&apos;,&apos;49130&apos;,&apos;81096&apos;,
               &apos;18840&apos;,&apos;27700&apos;,&apos;23470&apos;,&apos;50412&apos;,&apos;21195&apos;,&apos;16021&apos;,&apos;76107&apos;,
               &apos;71954&apos;,&apos;68309&apos;,&apos;18119&apos;,&apos;98359&apos;,&apos;64544&apos;,&apos;10336&apos;,&apos;86379&apos;,
               &apos;27068&apos;,&apos;39736&apos;,&apos;98569&apos;,&apos;28915&apos;,&apos;24206&apos;,&apos;56529&apos;,&apos;57647&apos;,
               &apos;54917&apos;,&apos;42961&apos;,&apos;91110&apos;,&apos;63981&apos;,&apos;14922&apos;,&apos;36420&apos;,&apos;23006&apos;,
               &apos;67467&apos;,&apos;32754&apos;,&apos;30903&apos;,&apos;20260&apos;,&apos;31671&apos;,&apos;51798&apos;,&apos;72325&apos;,
               &apos;85816&apos;,&apos;68621&apos;,&apos;13955&apos;,&apos;36446&apos;,&apos;41766&apos;,&apos;68806&apos;,&apos;16725&apos;,
               &apos;15146&apos;,&apos;22744&apos;,&apos;35850&apos;,&apos;88086&apos;,&apos;51649&apos;,&apos;18270&apos;,&apos;52867&apos;,
               &apos;39972&apos;,&apos;96976&apos;,&apos;63792&apos;,&apos;11376&apos;,&apos;94898&apos;,&apos;13595&apos;,&apos;10516&apos;,
               &apos;90225&apos;,&apos;58943&apos;,&apos;39371&apos;,&apos;94945&apos;,&apos;28587&apos;,&apos;96576&apos;,&apos;57855&apos;,
               &apos;28488&apos;,&apos;26105&apos;,&apos;83933&apos;,&apos;25858&apos;,&apos;34322&apos;,&apos;44438&apos;,&apos;73171&apos;,
               &apos;30122&apos;,&apos;34102&apos;,&apos;22685&apos;,&apos;71256&apos;,&apos;78451&apos;,&apos;54364&apos;,&apos;13354&apos;,
               &apos;45375&apos;,&apos;40558&apos;,&apos;56458&apos;,&apos;28286&apos;,&apos;45266&apos;,&apos;47305&apos;,&apos;69399&apos;,
               &apos;83921&apos;,&apos;26233&apos;,&apos;11101&apos;,&apos;15371&apos;,&apos;69913&apos;,&apos;35942&apos;,&apos;15882&apos;,
               &apos;25631&apos;,&apos;24610&apos;,&apos;44165&apos;,&apos;99076&apos;,&apos;33786&apos;,&apos;70738&apos;,&apos;26653&apos;,
               &apos;14328&apos;,&apos;72305&apos;,&apos;62496&apos;,&apos;22152&apos;,&apos;10144&apos;,&apos;64147&apos;,&apos;48425&apos;,
               &apos;14663&apos;,&apos;21076&apos;,&apos;18799&apos;,&apos;30450&apos;,&apos;63089&apos;,&apos;81019&apos;,&apos;68893&apos;,
               &apos;24996&apos;,&apos;51200&apos;,&apos;51211&apos;,&apos;45692&apos;,&apos;92712&apos;,&apos;70466&apos;,&apos;79994&apos;,
               &apos;22437&apos;,&apos;25280&apos;,&apos;38935&apos;,&apos;71791&apos;,&apos;73134&apos;,&apos;56571&apos;,&apos;14060&apos;,
               &apos;19505&apos;,&apos;72425&apos;,&apos;56575&apos;,&apos;74351&apos;,&apos;68786&apos;,&apos;51650&apos;,&apos;20004&apos;,
               &apos;18383&apos;,&apos;76614&apos;,&apos;11634&apos;,&apos;18906&apos;,&apos;15765&apos;,&apos;41368&apos;,&apos;73241&apos;,
               &apos;76698&apos;,&apos;78567&apos;,&apos;97189&apos;,&apos;28545&apos;,&apos;76231&apos;,&apos;75691&apos;,&apos;22246&apos;,
               &apos;51061&apos;,&apos;90578&apos;,&apos;56691&apos;,&apos;68014&apos;,&apos;51103&apos;,&apos;94167&apos;,&apos;57047&apos;,
               &apos;14867&apos;,&apos;73520&apos;,&apos;15734&apos;,&apos;63435&apos;,&apos;25733&apos;,&apos;35474&apos;,&apos;24676&apos;,
               &apos;94627&apos;,&apos;53535&apos;,&apos;17879&apos;,&apos;15559&apos;,&apos;53268&apos;,&apos;59166&apos;,&apos;11928&apos;,
               &apos;59402&apos;,&apos;33282&apos;,&apos;45721&apos;,&apos;43933&apos;,&apos;68101&apos;,&apos;33515&apos;,&apos;36634&apos;,
               &apos;71286&apos;,&apos;19736&apos;,&apos;58058&apos;,&apos;55253&apos;,&apos;67473&apos;,&apos;41918&apos;,&apos;19515&apos;,
               &apos;36495&apos;,&apos;19430&apos;,&apos;22351&apos;,&apos;77191&apos;,&apos;91393&apos;,&apos;49156&apos;,&apos;50298&apos;,
               &apos;87501&apos;,&apos;18652&apos;,&apos;53179&apos;,&apos;18767&apos;,&apos;63193&apos;,&apos;23968&apos;,&apos;65164&apos;,
               &apos;68880&apos;,&apos;21286&apos;,&apos;72823&apos;,&apos;58470&apos;,&apos;67301&apos;,&apos;13394&apos;,&apos;31016&apos;,
               &apos;70372&apos;,&apos;67030&apos;,&apos;40604&apos;,&apos;24317&apos;,&apos;45748&apos;,&apos;39127&apos;,&apos;26065&apos;,
               &apos;77721&apos;,&apos;31029&apos;,&apos;31880&apos;,&apos;60576&apos;,&apos;24671&apos;,&apos;45549&apos;,&apos;13376&apos;,
               &apos;50016&apos;,&apos;33123&apos;,&apos;19769&apos;,&apos;22927&apos;,&apos;97789&apos;,&apos;46081&apos;,&apos;72151&apos;,
               &apos;15723&apos;,&apos;46136&apos;,&apos;51949&apos;,&apos;68100&apos;,&apos;96888&apos;,&apos;64528&apos;,&apos;14171&apos;,
               &apos;79777&apos;,&apos;28709&apos;,&apos;11489&apos;,&apos;25103&apos;,&apos;32213&apos;,&apos;78668&apos;,&apos;22245&apos;,
               &apos;15798&apos;,&apos;27156&apos;,&apos;37930&apos;,&apos;62971&apos;,&apos;21337&apos;,&apos;51622&apos;,&apos;67853&apos;,
               &apos;10567&apos;,&apos;38415&apos;,&apos;15455&apos;,&apos;58263&apos;,&apos;42029&apos;,&apos;60279&apos;,&apos;37125&apos;,
               &apos;56240&apos;,&apos;88190&apos;,&apos;50308&apos;,&apos;26859&apos;,&apos;64457&apos;,&apos;89091&apos;,&apos;82136&apos;,
               &apos;62377&apos;,&apos;36233&apos;,&apos;63837&apos;,&apos;58078&apos;,&apos;17043&apos;,&apos;30010&apos;,&apos;60099&apos;,
               &apos;28810&apos;,&apos;98025&apos;,&apos;29178&apos;,&apos;87343&apos;,&apos;73273&apos;,&apos;30469&apos;,&apos;64034&apos;,
               &apos;39516&apos;,&apos;86057&apos;,&apos;21309&apos;,&apos;90257&apos;,&apos;67875&apos;,&apos;40162&apos;,&apos;11356&apos;,
               &apos;73650&apos;,&apos;61810&apos;,&apos;72013&apos;,&apos;30431&apos;,&apos;22461&apos;,&apos;19512&apos;,&apos;13375&apos;,
               &apos;55307&apos;,&apos;30625&apos;,&apos;83849&apos;,&apos;68908&apos;,&apos;26689&apos;,&apos;96451&apos;,&apos;38193&apos;,
               &apos;46820&apos;,&apos;88885&apos;,&apos;84935&apos;,&apos;69035&apos;,&apos;83144&apos;,&apos;47537&apos;,&apos;56616&apos;,
               &apos;94983&apos;,&apos;48033&apos;,&apos;69952&apos;,&apos;25486&apos;,&apos;61547&apos;,&apos;27385&apos;,&apos;61860&apos;,
               &apos;58048&apos;,&apos;56910&apos;,&apos;16807&apos;,&apos;17871&apos;,&apos;35258&apos;,&apos;31387&apos;,&apos;35458&apos;,
               &apos;35576&apos;))
       INTERSECT
       (select ca_zip
          FROM
            (SELECT substr(ca_zip,1,5) ca_zip,count(*) cnt
              FROM customer_address, customer
              WHERE ca_address_sk = c_current_addr_sk and
                    c_preferred_cust_flag=&apos;Y&apos;
              group by ca_zip
              having count(*) &gt; 10) A1)
         ) A2
      ) V1
 where ss_store_sk = s_store_sk
  and ss_sold_date_sk = d_date_sk
  and d_qoy = 2 and d_year = 1998
  and (substr(s_zip,1,2) = substr(V1.ca_zip,1,2))
 group by s_store_name
 order by s_store_name LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q9.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q9.sql

select case when (select count(*) from store_sales
                  where ss_quantity between 1 and 20) &gt; 74129
            then (select avg(ss_ext_discount_amt) from store_sales
                  where ss_quantity between 1 and 20)
            else (select avg(ss_net_paid) from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*) from store_sales
                  where ss_quantity between 21 and 40) &gt; 122840
            then (select avg(ss_ext_discount_amt) from store_sales
                  where ss_quantity between 21 and 40)
            else (select avg(ss_net_paid) from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*) from store_sales
                  where ss_quantity between 41 and 60) &gt; 56580
            then (select avg(ss_ext_discount_amt) from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid) from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*) from store_sales
                  where ss_quantity between 61 and 80) &gt; 10097
            then (select avg(ss_ext_discount_amt) from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid) from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*) from store_sales
                  where ss_quantity between 81 and 100) &gt; 165306
            then (select avg(ss_ext_discount_amt) from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid) from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q10.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q10.sql

 select
  cd_gender, cd_marital_status, cd_education_status, count(*) cnt1,
  cd_purchase_estimate, count(*) cnt2, cd_credit_rating, count(*) cnt3,
  cd_dep_count, count(*) cnt4, cd_dep_employed_count,  count(*) cnt5,
  cd_dep_college_count, count(*) cnt6
 from
  customer c, customer_address ca, customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_county in (&apos;Rush County&apos;,&apos;Toole County&apos;,&apos;Jefferson County&apos;,
                &apos;Dona Ana County&apos;,&apos;La Porte County&apos;) and
  cd_demo_sk = c.c_current_cdemo_sk AND
  exists (select * from store_sales, date_dim
          where c.c_customer_sk = ss_customer_sk AND
                ss_sold_date_sk = d_date_sk AND
                d_year = 2002 AND
                d_moy between 1 AND 1+3) AND
   (exists (select * from web_sales, date_dim
            where c.c_customer_sk = ws_bill_customer_sk AND
                  ws_sold_date_sk = d_date_sk AND
                  d_year = 2002 AND
                  d_moy between 1 AND 1+3) or
    exists (select * from catalog_sales, date_dim
            where c.c_customer_sk = cs_ship_customer_sk AND
                  cs_sold_date_sk = d_date_sk AND
                  d_year = 2002 AND
                  d_moy between 1 AND 1+3))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
LIMIT 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q11.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q11.sql 

with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total
       ,&apos;s&apos; sale_type
 from customer, store_sales, date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total
       ,&apos;w&apos; sale_type
 from customer, web_sales, date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by
    c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country,
    c_login, c_email_address, d_year)
 select
    t_s_secyear.customer_id
   ,t_s_secyear.customer_first_name
   ,t_s_secyear.customer_last_name
   ,t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = &apos;s&apos;
         and t_w_firstyear.sale_type = &apos;w&apos;
         and t_s_secyear.sale_type = &apos;s&apos;
         and t_w_secyear.sale_type = &apos;w&apos;
         and t_s_firstyear.dyear = 2001
         and t_s_secyear.dyear = 2001+1
         and t_w_firstyear.dyear = 2001
         and t_w_secyear.dyear = 2001+1
         and t_s_firstyear.year_total &gt; 0
         and t_w_firstyear.year_total &gt; 0
         and case when t_w_firstyear.year_total &gt; 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end
             &gt; case when t_s_firstyear.year_total &gt; 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end
 order by 
         t_s_secyear.customer_id
         ,t_s_secyear.customer_first_name
         ,t_s_secyear.customer_last_name
         ,
t_s_secyear.customer_preferred_cust_flag
 LIMIT 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q12.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q12.sql 

 select i_item_id,
  i_item_desc, i_category, i_class, i_current_price,
  sum(ws_ext_sales_price) as itemrevenue,
  sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
          (partition by i_class) as revenueratio
 from
	web_sales, item, date_dim
 where
	ws_item_sk = i_item_sk
  	and i_category in (&apos;Sports&apos;, &apos;Books&apos;, &apos;Home&apos;)
  	and ws_sold_date_sk = d_date_sk
	and d_date between cast(&apos;1999-02-22&apos; as date)
				and (cast(&apos;1999-02-22&apos; as date) + interval &apos;30&apos; day)
 group by
	i_item_id, i_item_desc, i_category, i_class, i_current_price
 order by
	i_category, i_class, i_item_id, i_item_desc, revenueratio
 LIMIT 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q13.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q13.sql 

select avg(ss_quantity)	avg_qu
       ,avg(ss_ext_sales_price)	avg_ext_sales
       ,avg(ss_ext_wholesale_cost)	ave_ext_whole
       ,sum(ss_ext_wholesale_cost)	sum_ext_whole
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = &apos;M&apos;
  and cd_education_status = &apos;Advanced Degree&apos;
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = &apos;S&apos;
  and cd_education_status = &apos;College&apos;
  and ss_sales_price between 50.00 and 100.00
  and hd_dep_count = 1
     ) or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = &apos;W&apos;
  and cd_education_status = &apos;2 yr Degree&apos;
  and ss_sales_price between 150.00 and 200.00
  and hd_dep_count = 1
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = &apos;United States&apos;
  and ca_state in (&apos;TX&apos;, &apos;OH&apos;, &apos;TX&apos;)
  and ss_net_profit between 100 and 200
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = &apos;United States&apos;
  and ca_state in (&apos;OR&apos;, &apos;NM&apos;, &apos;KY&apos;)
  and ss_net_profit between 150 and 300
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = &apos;United States&apos;
  and ca_state in (&apos;VA&apos;, &apos;TX&apos;, &apos;MS&apos;)
  and ss_net_profit between 50 and 250
     ));</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q14a.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q14a.sql

with cross_items as
 (select i_item_sk ss_item_sk
 from item,
    (select iss.i_brand_id brand_id, iss.i_class_id class_id, iss.i_category_id category_id
     from store_sales, item iss, date_dim d1
     where ss_item_sk = iss.i_item_sk
                    and ss_sold_date_sk = d1.d_date_sk
       and d1.d_year between 1999 AND 1999 + 2
   intersect
     select ics.i_brand_id, ics.i_class_id, ics.i_category_id
     from catalog_sales, item ics, date_dim d2
     where cs_item_sk = ics.i_item_sk
       and cs_sold_date_sk = d2.d_date_sk
       and d2.d_year between 1999 AND 1999 + 2
   intersect
     select iws.i_brand_id, iws.i_class_id, iws.i_category_id
     from web_sales, item iws, date_dim d3
     where ws_item_sk = iws.i_item_sk
       and ws_sold_date_sk = d3.d_date_sk
       and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
   and i_class_id = class_id
   and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (
     select ss_quantity quantity, ss_list_price list_price
     from store_sales, date_dim
     where ss_sold_date_sk = d_date_sk
       and d_year between 1999 and 2001
   union all
     select cs_quantity quantity, cs_list_price list_price
     from catalog_sales, date_dim
     where cs_sold_date_sk = d_date_sk
       and d_year between 1999 and 1999 + 2
   union all
     select ws_quantity quantity, ws_list_price list_price
     from web_sales, date_dim
     where ws_sold_date_sk = d_date_sk
       and d_year between 1999 and 1999 + 2) x)
 select channel, i_brand_id,i_class_id,i_category_id,sum(sales) sum_sale, sum(number_sales) sum_num
 from(
     select &apos;store&apos; channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
     from store_sales, item, date_dim
     where ss_item_sk in (select ss_item_sk from cross_items)
       and ss_item_sk = i_item_sk
       and ss_sold_date_sk = d_date_sk
       and d_year = 1999+2
       and d_moy = 11
     group by i_brand_id,i_class_id,i_category_id
     having sum(ss_quantity*ss_list_price) &gt; (select average_sales from avg_sales)
   union all
     select &apos;catalog&apos; channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
     from catalog_sales, item, date_dim
     where cs_item_sk in (select ss_item_sk from cross_items)
       and cs_item_sk = i_item_sk
       and cs_sold_date_sk = d_date_sk
       and d_year = 1999+2
       and d_moy = 11
     group by i_brand_id,i_class_id,i_category_id
     having sum(cs_quantity*cs_list_price) &gt; (select average_sales from avg_sales)
   union all
     select &apos;web&apos; channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
     from web_sales, item, date_dim
     where ws_item_sk in (select ss_item_sk from cross_items)
       and ws_item_sk = i_item_sk
       and ws_sold_date_sk = d_date_sk
       and d_year = 1999+2
       and d_moy = 11
     group by i_brand_id,i_class_id,i_category_id
     having sum(ws_quantity*ws_list_price) &gt; (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q14b.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q14b.sql

 with  cross_items as
 (select i_item_sk ss_item_sk
  from item,
     (select iss.i_brand_id brand_id, iss.i_class_id class_id, iss.i_category_id category_id
      from store_sales, item iss, date_dim d1
      where ss_item_sk = iss.i_item_sk
         and ss_sold_date_sk = d1.d_date_sk
         and d1.d_year between 1999 AND 1999 + 2
     intersect
       select ics.i_brand_id, ics.i_class_id, ics.i_category_id
       from catalog_sales, item ics, date_dim d2
       where cs_item_sk = ics.i_item_sk
         and cs_sold_date_sk = d2.d_date_sk
         and d2.d_year between 1999 AND 1999 + 2
     intersect
       select iws.i_brand_id, iws.i_class_id, iws.i_category_id
       from web_sales, item iws, date_dim d3
       where ws_item_sk = iws.i_item_sk
         and ws_sold_date_sk = d3.d_date_sk
         and d3.d_year between 1999 AND 1999 + 2) x
  where i_brand_id = brand_id
    and i_class_id = class_id
    and i_category_id = category_id
 ),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity, ss_list_price list_price
         from store_sales, date_dim
         where ss_sold_date_sk = d_date_sk and d_year between 1999 and 1999 + 2
       union all
         select cs_quantity quantity, cs_list_price list_price
         from catalog_sales, date_dim
         where cs_sold_date_sk = d_date_sk and d_year between 1999 and 1999 + 2
       union all
         select ws_quantity quantity, ws_list_price list_price
         from web_sales, date_dim
         where ws_sold_date_sk = d_date_sk and d_year between 1999 and 1999 + 2) x)
 select * from
 (select &apos;store&apos; channel, i_brand_id,i_class_id,i_category_id
        ,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
  from store_sales, item, date_dim
  where ss_item_sk in (select ss_item_sk from cross_items)
    and ss_item_sk = i_item_sk
    and ss_sold_date_sk = d_date_sk
    and d_week_seq = (select d_week_seq from date_dim
                     where d_year = 1999 + 1 and d_moy = 12 and d_dom = 11)
  group by i_brand_id,i_class_id,i_category_id
  having sum(ss_quantity*ss_list_price) &gt; (select average_sales from avg_sales)) this_year,
 (select &apos;store&apos; channel, i_brand_id,i_class_id
        ,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
 from store_sales, item, date_dim
 where ss_item_sk in (select ss_item_sk from cross_items)
   and ss_item_sk = i_item_sk
   and ss_sold_date_sk = d_date_sk
   and d_week_seq = (select d_week_seq from date_dim
                     where d_year = 1999 and d_moy = 12 and d_dom = 11)
 group by i_brand_id,i_class_id,i_category_id
 having sum(ss_quantity*ss_list_price) &gt; (select average_sales from avg_sales)) last_year
 where this_year.i_brand_id= last_year.i_brand_id
   and this_year.i_class_id = last_year.i_class_id
   and this_year.i_category_id = last_year.i_category_id
 order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
 limit 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q15.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q15.sql 

 select ca_zip, sum(cs_sales_price) sum_price
 from catalog_sales, customer, customer_address, date_dim
 where cs_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk
 	and ( substr(ca_zip,1,5) in (&apos;85669&apos;, &apos;86197&apos;,&apos;88274&apos;,&apos;83405&apos;,&apos;86475&apos;,
                                   &apos;85392&apos;, &apos;85460&apos;, &apos;80348&apos;, &apos;81792&apos;)
 	      or ca_state in (&apos;CA&apos;,&apos;WA&apos;,&apos;GA&apos;)
 	      or cs_sales_price &gt; 500)
 	and cs_sold_date_sk = d_date_sk
 	and d_qoy = 2 and d_year = 2001
 group by ca_zip
 order by ca_zip
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q16.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q16.sql 

 select
   count(distinct cs_order_number) as &quot;order count&quot;,
   sum(cs_ext_ship_cost) as &quot;total shipping cost&quot;,
   sum(cs_net_profit) as &quot;total net profit&quot;
 from
   catalog_sales cs1, date_dim, customer_address, call_center
 where
   d_date between cast (&apos;2002-02-01&apos; as date) and (cast(&apos;2002-02-01&apos; as date) + interval &apos;60&apos; day)
 and cs1.cs_ship_date_sk = d_date_sk
 and cs1.cs_ship_addr_sk = ca_address_sk
 and ca_state = &apos;GA&apos;
 and cs1.cs_call_center_sk = cc_call_center_sk
 and cc_county in (&apos;Williamson County&apos;,&apos;Williamson County&apos;,&apos;Williamson County&apos;,&apos;Williamson County&apos;, &apos;Williamson County&apos;) 
 and exists (select *
            from catalog_sales cs2
            where cs1.cs_order_number = cs2.cs_order_number
              and cs1.cs_warehouse_sk &lt;&gt; cs2.cs_warehouse_sk)
 and not exists(select *
               from catalog_returns cr1
               where cs1.cs_order_number = cr1.cr_order_number)
 order by count(distinct cs_order_number)
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q17.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q17.sql 

 select i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as_store_returns_quantitycount
       ,avg(sr_return_quantity) as_store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as_store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales, store_returns, catalog_sales, date_dim d1, date_dim d2, date_dim d3, store, item
 where d1.d_quarter_name = &apos;2001Q1&apos;
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in (&apos;2001Q1&apos;,&apos;2001Q2&apos;,&apos;2001Q3&apos;)
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in (&apos;2001Q1&apos;,&apos;2001Q2&apos;,&apos;2001Q3&apos;)
 group by i_item_id, i_item_desc, s_state
 order by i_item_id, i_item_desc, s_state
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q18.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q18.sql 

select i_item_id,
        ca_country,
        ca_state,
        ca_county,
        avg( cast(cs_quantity as decimal(12,2))) agg1,
        avg( cast(cs_list_price as decimal(12,2))) agg2,
        avg( cast(cs_coupon_amt as decimal(12,2))) agg3,
        avg( cast(cs_sales_price as decimal(12,2))) agg4,
        avg( cast(cs_net_profit as decimal(12,2))) agg5,
        avg( cast(c_birth_year as decimal(12,2))) agg6,
        avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7
 from catalog_sales, customer_demographics cd1,
      customer_demographics cd2, customer, customer_address, date_dim, item
 where cs_sold_date_sk = d_date_sk and
       cs_item_sk = i_item_sk and
       cs_bill_cdemo_sk = cd1.cd_demo_sk and
       cs_bill_customer_sk = c_customer_sk and
       cd1.cd_gender = &apos;F&apos; and
       cd1.cd_education_status = &apos;Unknown&apos; and
       c_current_cdemo_sk = cd2.cd_demo_sk and
       c_current_addr_sk = ca_address_sk and
       c_birth_month in (1,6,8,9,12,2) and
       d_year = 1998 and
       ca_state  in (&apos;MS&apos;,&apos;IN&apos;,&apos;ND&apos;,&apos;OK&apos;,&apos;NM&apos;,&apos;VA&apos;,&apos;MS&apos;)
 group by rollup (i_item_id, ca_country, ca_state, ca_county)
 order by ca_country, ca_state, ca_county, i_item_id
 LIMIT 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q19.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q19.sql 

 select i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id = 8
   and d_moy = 11
   and d_year = 1998
   and ss_customer_sk = c_customer_sk
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) &lt;&gt; substr(s_zip,1,5)
   and ss_store_sk = s_store_sk
 group by i_brand, i_brand_id, i_manufact_id, i_manufact
 order by ext_price desc, brand, brand_id, i_manufact_id, i_manufact
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q20.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q20.sql 

select i_item_id, i_item_desc
       ,i_category
       ,i_class
       ,i_current_price
       ,sum(cs_ext_sales_price) as itemrevenue
       ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
           (partition by i_class) as revenueratio
 from catalog_sales, item, date_dim
 where cs_item_sk = i_item_sk
   and i_category in (&apos;Sports&apos;, &apos;Books&apos;, &apos;Home&apos;)
   and cs_sold_date_sk = d_date_sk
 and d_date between cast(&apos;1999-02-22&apos; as date)
 				and (cast(&apos;1999-02-22&apos; as date) + interval &apos;30&apos; day)
 group by i_item_id, i_item_desc, i_category, i_class, i_current_price
 order by i_category, i_class, i_item_id, i_item_desc, revenueratio
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q21.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q21.sql 

 select * from(
   select w_warehouse_name, i_item_id,
          sum(case when (cast(d_date as date) &lt; cast (&apos;2000-03-11&apos; as date))
	                  then inv_quantity_on_hand
                   else 0 end) as inv_before,
          sum(case when (cast(d_date as date) &gt;= cast (&apos;2000-03-11&apos; as date))
                   then inv_quantity_on_hand
                   else 0 end) as inv_after
   from inventory, warehouse, item, date_dim
   where i_current_price between 0.99 and 1.49
     and i_item_sk          = inv_item_sk
     and inv_warehouse_sk   = w_warehouse_sk
     and inv_date_sk        = d_date_sk
     and d_date between (cast(&apos;2000-03-11&apos; as date) - interval &apos;30&apos; day)
                    and (cast(&apos;2000-03-11&apos; as date) + interval &apos;30&apos; day)
   group by w_warehouse_name, i_item_id) x
 where (case when inv_before &gt; 0
             then inv_after / inv_before
             else null
             end) between 2.0/3.0 and 3.0/2.0
 order by w_warehouse_name, i_item_id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q22.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q22.sql 

 select i_product_name, i_brand, i_class, i_category, avg(inv_quantity_on_hand) qoh
       from inventory, date_dim, item, warehouse
       where inv_date_sk=d_date_sk
              and inv_item_sk=i_item_sk
              and inv_warehouse_sk = w_warehouse_sk
              and d_month_seq between 1200 and 1200 + 11
       group by rollup(i_product_name, i_brand, i_class, i_category)
 order by qoh, i_product_name, i_brand, i_class, i_category
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q23a.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q23a.sql

 with frequent_ss_items as
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales, date_dim, item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk
    and d_year in (2000, 2000+1, 2000+2,2000+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) &gt;4),
 max_store_sales as
 (select max(csales) tpcds_cmax
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales, customer, date_dim
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (2000, 2000+1, 2000+2,2000+3)
        group by c_customer_sk)),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales, customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) &gt; (95/100.0) *
    (select * from max_store_sales))
 select sum(sales) sum_sales
 from (select cs_quantity*cs_list_price sales
       from catalog_sales, date_dim
       where d_year = 2000
         and d_moy = 2
         and cs_sold_date_sk = d_date_sk
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales, date_dim
       where d_year = 2000
         and d_moy = 2
         and ws_sold_date_sk = d_date_sk
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)))
 limit 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q23b.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q23b.sql


 with frequent_ss_items as
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales, date_dim, item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk
    and d_year in (2000, 2000+1, 2000+2,2000+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) &gt; 4),
 max_store_sales as
 (select max(csales) tpcds_cmax
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales, customer, date_dim
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (2000, 2000+1, 2000+2,2000+3)
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) &gt; (95/100.0) *
    (select * from max_store_sales))
 select c_last_name,c_first_name,sales
 from ((select c_last_name,c_first_name,sum(cs_quantity*cs_list_price) sales
        from catalog_sales, customer, date_dim
        where d_year = 2000
         and d_moy = 2
         and cs_sold_date_sk = d_date_sk
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)
         and cs_bill_customer_sk = c_customer_sk
       group by c_last_name,c_first_name)
      union all
      (select c_last_name,c_first_name,sum(ws_quantity*ws_list_price) sales
       from web_sales, customer, date_dim
       where d_year = 2000
         and d_moy = 2
         and ws_sold_date_sk = d_date_sk
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)
         and ws_bill_customer_sk = c_customer_sk
       group by c_last_name,c_first_name)) y
     order by c_last_name,c_first_name,sales
 limit 100</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q24a.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q24a.sql

 with ssales as
 (select c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color,
        i_current_price, i_manager_id, i_units, i_size, sum(ss_net_paid) netpaid
 from store_sales, store_returns, store, item, customer, customer_address
 where ss_ticket_number = sr_ticket_number
   and ss_item_sk = sr_item_sk
   and ss_customer_sk = c_customer_sk
   and ss_item_sk = i_item_sk
   and ss_store_sk = s_store_sk
   and c_birth_country = upper(ca_country)
   and s_zip = ca_zip
 and s_market_id = 8
 group by c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color,
          i_current_price, i_manager_id, i_units, i_size)
 select c_last_name, c_first_name, s_store_name, sum(netpaid) paid
 from ssales
 where i_color = &apos;pale&apos;
 group by c_last_name, c_first_name, s_store_name
 having sum(netpaid) &gt; (select 0.05*avg(netpaid) from ssales)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q24b.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q24b.sql

 with ssales as
 (select c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color,
         i_current_price, i_manager_id, i_units, i_size, sum(ss_net_paid) netpaid
 from store_sales, store_returns, store, item, customer, customer_address
 where ss_ticket_number = sr_ticket_number
   and ss_item_sk = sr_item_sk
   and ss_customer_sk = c_customer_sk
   and ss_item_sk = i_item_sk
   and ss_store_sk = s_store_sk
   and c_birth_country = upper(ca_country)
   and s_zip = ca_zip
   and s_market_id = 8
 group by c_last_name, c_first_name, s_store_name, ca_state, s_state,
          i_color, i_current_price, i_manager_id, i_units, i_size)
 select c_last_name, c_first_name, s_store_name, sum(netpaid) paid
 from ssales
 where i_color = &apos;chiffon&apos;
 group by c_last_name, c_first_name, s_store_name
 having sum(netpaid) &gt; (select 0.05*avg(netpaid) from ssales)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q25.sql  " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q25.sql 

 select i_item_id, i_item_desc, s_store_id, s_store_name,
    sum(ss_net_profit) as store_sales_profit,
    sum(sr_net_loss) as store_returns_loss,
    sum(cs_net_profit) as catalog_sales_profit
 from
    store_sales, store_returns, catalog_sales, date_dim d1, date_dim d2, date_dim d3,
    store, item
 where
    d1.d_moy = 4
    and d1.d_year = 2001
    and d1.d_date_sk = ss_sold_date_sk
    and i_item_sk = ss_item_sk
    and s_store_sk = ss_store_sk
    and ss_customer_sk = sr_customer_sk
    and ss_item_sk = sr_item_sk
    and ss_ticket_number = sr_ticket_number
    and sr_returned_date_sk = d2.d_date_sk
    and d2.d_moy between 4 and 10
    and d2.d_year = 2001
    and sr_customer_sk = cs_bill_customer_sk
    and sr_item_sk = cs_item_sk
    and cs_sold_date_sk = d3.d_date_sk
    and d3.d_moy between 4 and 10
    and d3.d_year = 2001
 group by
    i_item_id, i_item_desc, s_store_id, s_store_name
 order by
    i_item_id, i_item_desc, s_store_id, s_store_name
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q26.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q26.sql 

 select i_item_id,
        avg(cs_quantity) agg1,
        avg(cs_list_price) agg2,
        avg(cs_coupon_amt) agg3,
        avg(cs_sales_price) agg4
 from catalog_sales, customer_demographics, date_dim, item, promotion
 where cs_sold_date_sk = d_date_sk and
       cs_item_sk = i_item_sk and
       cs_bill_cdemo_sk = cd_demo_sk and
       cs_promo_sk = p_promo_sk and
       cd_gender = &apos;M&apos; and
       cd_marital_status = &apos;S&apos; and
       cd_education_status = &apos;College&apos; and
       (p_channel_email = &apos;N&apos; or p_channel_event = &apos;N&apos;) and
       d_year = 2000
 group by i_item_id
 order by i_item_id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q27.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q27.sql 

 select i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = &apos;M&apos; and
       cd_marital_status = &apos;S&apos; and
       cd_education_status = &apos;College&apos; and
       d_year = 2002 and
       s_state in (&apos;TN&apos;,&apos;TN&apos;, &apos;TN&apos;, &apos;TN&apos;, &apos;TN&apos;, &apos;TN&apos;)
 group by rollup (i_item_id, s_state)
 order by i_item_id, s_state
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q28.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q28.sql 

select *
 from (select avg(ss_list_price) B1_LP
            ,count(ss_list_price) B1_CNT
            ,count(distinct ss_list_price) B1_CNTD
      from store_sales
      where ss_quantity between 0 and 5
        and (ss_list_price between 8 and 8+10 
             or ss_coupon_amt between 459 and 459+1000
             or ss_wholesale_cost between 57 and 57+20)) B1 cross join
     (select avg(ss_list_price) B2_LP
            ,count(ss_list_price) B2_CNT
            ,count(distinct ss_list_price) B2_CNTD
      from store_sales
      where ss_quantity between 6 and 10
        and (ss_list_price between 90 and 90+10
             or ss_coupon_amt between 2323 and 2323+1000
             or ss_wholesale_cost between 31 and 31+20)) B2 cross join
     (select avg(ss_list_price) B3_LP
            ,count(ss_list_price) B3_CNT
            ,count(distinct ss_list_price) B3_CNTD
      from store_sales
      where ss_quantity between 11 and 15
        and (ss_list_price between 142 and 142+10
             or ss_coupon_amt between 12214 and 12214+1000
             or ss_wholesale_cost between 79 and 79+20)) B3 cross join
     (select avg(ss_list_price) B4_LP
            ,count(ss_list_price) B4_CNT
            ,count(distinct ss_list_price) B4_CNTD
      from store_sales
      where ss_quantity between 16 and 20
        and (ss_list_price between 135 and 135+10
             or ss_coupon_amt between 6071 and 6071+1000
             or ss_wholesale_cost between 38 and 38+20)) B4 cross join
     (select avg(ss_list_price) B5_LP
            ,count(ss_list_price) B5_CNT
            ,count(distinct ss_list_price) B5_CNTD
      from store_sales
      where ss_quantity between 21 and 25
        and (ss_list_price between 122 and 122+10
             or ss_coupon_amt between 836 and 836+1000
             or ss_wholesale_cost between 17 and 17+20)) B5 cross join
     (select avg(ss_list_price) B6_LP
            ,count(ss_list_price) B6_CNT
            ,count(distinct ss_list_price) B6_CNTD
      from store_sales
      where ss_quantity between 26 and 30
        and (ss_list_price between 154 and 154+10
             or ss_coupon_amt between 7326 and 7326+1000
             or ss_wholesale_cost between 7 and 7+20)) B6
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q29.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q29.sql 

select
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales, store_returns, catalog_sales, date_dim d1, date_dim d2,
    date_dim d3, store, item
 where
     d1.d_moy               = 9
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 9 and  9 + 3
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id, i_item_desc, s_store_id, s_store_name
 order by
    i_item_id, i_item_desc, s_store_id, s_store_name
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q30.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q30.sql 

 with customer_total_return as
 (select wr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state,
 	sum(wr_return_amt) as ctr_total_return
 from web_returns, date_dim, customer_address
 where wr_returned_date_sk = d_date_sk
   and d_year = 2002
   and wr_returning_addr_sk = ca_address_sk
 group by wr_returning_customer_sk,ca_state)
 select c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
       ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
       ,c_last_review_date,ctr_total_return
 from customer_total_return ctr1, customer_address, customer
 where ctr1.ctr_total_return &gt; (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = &apos;GA&apos;
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
                  ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
                  ,c_last_review_date,ctr_total_return
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q31.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q31.sql 

 with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1, ss ss2, ss ss3, ws ws1, ws ws2, ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year = 2000
    and case when ws1.web_sales &gt; 0 then ws2.web_sales/ws1.web_sales else null end
       &gt; case when ss1.store_sales &gt; 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales &gt; 0 then ws3.web_sales/ws2.web_sales else null end
       &gt; case when ss2.store_sales &gt; 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.ca_county;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q32.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q32.sql 

 select sum(cs_ext_discount_amt) as &quot;excess discount amount&quot;
 from
    catalog_sales, item, date_dim
 where
   i_manufact_id = 977
   and i_item_sk = cs_item_sk
   and d_date between cast (&apos;2000-01-27&apos; as date) and (cast(&apos;2000-01-27&apos; as date) + interval &apos;90&apos; day)
   and d_date_sk = cs_sold_date_sk
   and cs_ext_discount_amt &gt; (
          select 1.3 * avg(cs_ext_discount_amt)
          from catalog_sales, date_dim
          where cs_item_sk = i_item_sk
           and d_date between cast (&apos;2000-01-27&apos; as date) and (cast(&apos;2000-01-27&apos; as date) + interval &apos;90&apos; day)
           and d_date_sk = cs_sold_date_sk)
limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q33.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q33.sql 

with ss as (
    select
        i_manufact_id,sum(ss_ext_sales_price) total_sales
    from
 	      store_sales, date_dim, customer_address, item
    where
        i_manufact_id in (select i_manufact_id
                          from item
                          where i_category in (&apos;Electronics&apos;))
                            and ss_item_sk = i_item_sk
                            and ss_sold_date_sk = d_date_sk
                            and d_year = 1998
                            and d_moy = 5
                            and ss_addr_sk = ca_address_sk
                            and ca_gmt_offset = -5
                          group by i_manufact_id), cs as
         (select i_manufact_id, sum(cs_ext_sales_price) total_sales
          from catalog_sales, date_dim, customer_address, item
          where
            i_manufact_id in (
                select i_manufact_id from item
                where
                    i_category in (&apos;Electronics&apos;))
                    and cs_item_sk = i_item_sk
                    and cs_sold_date_sk = d_date_sk
                    and d_year = 1998
                    and d_moy = 5
                    and cs_bill_addr_sk = ca_address_sk
                    and ca_gmt_offset = -5
                group by i_manufact_id),
 ws as (
 select i_manufact_id,sum(ws_ext_sales_price) total_sales
 from
 	  web_sales, date_dim, customer_address, item
 where
    i_manufact_id in (select i_manufact_id from item
                      where i_category in (&apos;Electronics&apos;))
                          and ws_item_sk = i_item_sk
                          and ws_sold_date_sk = d_date_sk
                          and d_year = 1998
                          and d_moy = 5
                          and ws_bill_addr_sk = ca_address_sk
                          and ca_gmt_offset = -5
                      group by i_manufact_id)
 select i_manufact_id ,sum(total_sales) total_sales
 from  (select * from ss
        union all
        select * from cs
        union all
        select * from ws) tmp1
 group by i_manufact_id
 order by total_sales
limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q34.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q34.sql 

 select c_last_name, c_first_name, c_salutation, c_preferred_cust_flag, ss_ticket_number,
        cnt
 FROM
   (select ss_ticket_number, ss_customer_sk, count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (date_dim.d_dom between 1 and 3 or date_dim.d_dom between 25 and 28)
    and (household_demographics.hd_buy_potential = &apos;&gt;10000&apos; or
         household_demographics.hd_buy_potential = &apos;unknown&apos;)
    and household_demographics.hd_vehicle_count &gt; 0
    and (case when household_demographics.hd_vehicle_count &gt; 0
	then household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count
	else null
	end)  &gt; 1.2
    and date_dim.d_year in (1999, 1999+1, 1999+2)
    and store.s_county in (&apos;Williamson County&apos;,&apos;Williamson County&apos;,&apos;Williamson County&apos;,&apos;Williamson County&apos;,
                           &apos;Williamson County&apos;,&apos;Williamson County&apos;,&apos;Williamson County&apos;,&apos;Williamson County&apos;)
    group by ss_ticket_number,ss_customer_sk) dn,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 15 and 20
    order by c_last_name,c_first_name,c_salutation,c_preferred_cust_flag desc, ss_ticket_number;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q35.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q35.sql

 select
  ca_state,
  cd_gender,
  cd_marital_status,
  cd_dep_count,
  count(*) cnt1,
  min(cd_dep_count) min_dep, 
  max(cd_dep_count) max_dep, 
  avg(cd_dep_count) avg_dep, 
  cd_dep_employed_count,
  count(*) cnt2,
  min(cd_dep_employed_count) min_emp, 
  max(cd_dep_employed_count) max_emp,
  avg(cd_dep_employed_count) avg_emp,
  cd_dep_college_count,
  count(*) cnt3,
  min(cd_dep_college_count) min_coll,
  max(cd_dep_college_count) max_coll,
  avg(cd_dep_college_count) avg_coll
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  cd_demo_sk = c.c_current_cdemo_sk and
  exists (select * from store_sales, date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 2002 and
                d_qoy &lt; 4) and
   (exists (select * from web_sales, date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_qoy &lt; 4) or
    exists (select * from catalog_sales, date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_qoy &lt; 4))
 group by ca_state, cd_gender, cd_marital_status, cd_dep_count,
          cd_dep_employed_count, cd_dep_college_count
 order by ca_state, cd_gender, cd_marital_status, cd_dep_count,
          cd_dep_employed_count, cd_dep_college_count
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q36.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q36.sql 

 select
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end
 	order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    store_sales, date_dim d1, item, store
 where
    d1.d_year = 2001
    and d1.d_date_sk = ss_sold_date_sk
    and i_item_sk  = ss_item_sk
    and s_store_sk  = ss_store_sk
    and s_state in (&apos;TN&apos;,&apos;TN&apos;,&apos;TN&apos;,&apos;TN&apos;,&apos;TN&apos;,&apos;TN&apos;,&apos;TN&apos;,&apos;TN&apos;)
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q37.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q37.sql 

 select i_item_id, i_item_desc, i_current_price
 from item, inventory, date_dim, catalog_sales
 where i_current_price between 68 and 68 + 30
   and inv_item_sk = i_item_sk
   and d_date_sk=inv_date_sk
   and d_date between cast(&apos;2000-02-01&apos; as date) and (cast(&apos;2000-02-01&apos; as date) + interval &apos;60&apos; day)
   and i_manufact_id in (677,940,694,808)
   and inv_quantity_on_hand between 100 and 500
   and cs_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q38.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q38.sql 

 select count(*) count_1 from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1200 and  1200 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between  1200 and  1200 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between  1200 and  1200 + 11
 ) hot_cust
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q39a.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q39a.sql

 with inv as
 (select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
        ,stdev,mean, case mean when 0 then null else stdev/mean end cov
  from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
             ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
       from inventory, item, warehouse, date_dim
       where inv_item_sk = i_item_sk
         and inv_warehouse_sk = w_warehouse_sk
         and inv_date_sk = d_date_sk
         and d_year = 2001
       group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
  where case mean when 0 then 0 else stdev/mean end &gt; 1)
 select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
         ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
 from inv inv1,inv inv2
 where inv1.i_item_sk = inv2.i_item_sk
   and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
   and inv1.d_moy=1
   and inv2.d_moy=1+1
 order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
         ,inv2.d_moy,inv2.mean, inv2.cov</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q39b.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q39b.sql

 with inv as
 (select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
        ,stdev,mean, case mean when 0 then null else stdev/mean end cov
  from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
             ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
       from inventory, item, warehouse, date_dim
       where inv_item_sk = i_item_sk
         and inv_warehouse_sk = w_warehouse_sk
         and inv_date_sk = d_date_sk
         and d_year = 2001
       group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
  where case mean when 0 then 0 else stdev/mean end &gt; 1)
 select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
         ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
 from inv inv1,inv inv2
 where inv1.i_item_sk = inv2.i_item_sk
   and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
   and inv1.d_moy=1
   and inv2.d_moy=1+1
   and inv1.cov &gt; 1.5
 order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
         ,inv2.d_moy,inv2.mean, inv2.cov</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q40.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q40.sql 

select
   w_state
  ,i_item_id
  ,sum(case when (cast(d_date as date) &lt; cast(&apos;2000-03-11&apos; as date))
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
  ,sum(case when (cast(d_date as date) &gt;= cast(&apos;2000-03-11&apos; as date))
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
 from
   catalog_sales left outer join catalog_returns on
       (cs_order_number = cr_order_number
        and cs_item_sk = cr_item_sk)
  ,warehouse, item, date_dim
 where
     i_current_price between 0.99 and 1.49
 and i_item_sk          = cs_item_sk
 and cs_warehouse_sk    = w_warehouse_sk
 and cs_sold_date_sk    = d_date_sk
 and d_date between (cast(&apos;2000-03-11&apos; as date) - interval &apos;30&apos; day)
                and (cast(&apos;2000-03-11&apos; as date) + interval &apos;30&apos; day)
 group by w_state,i_item_id
 order by w_state,i_item_id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q41.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q41.sql

select distinct(i_product_name)
 from item i1
 where i_manufact_id between 738 and 738+40
   and (select count(*) as item_cnt
        from item
        where (i_manufact = i1.i_manufact and
        ((i_category = &apos;Women&apos; and 
        (i_color = &apos;powder&apos; or i_color = &apos;khaki&apos;) and
        (i_units = &apos;Ounce&apos; or i_units = &apos;Oz&apos;) and
        (i_size = &apos;medium&apos; or i_size = &apos;extra large&apos;)
        ) or
        (i_category = &apos;Women&apos; and
        (i_color = &apos;brown&apos; or i_color = &apos;honeydew&apos;) and
        (i_units = &apos;Bunch&apos; or i_units = &apos;Ton&apos;) and
        (i_size = &apos;N/A&apos; or i_size = &apos;small&apos;)
        ) or
        (i_category = &apos;Men&apos; and
        (i_color = &apos;floral&apos; or i_color = &apos;deep&apos;) and
        (i_units = &apos;N/A&apos; or i_units = &apos;Dozen&apos;) and
        (i_size = &apos;petite&apos; or i_size = &apos;large&apos;)
        ) or
        (i_category = &apos;Men&apos; and
        (i_color = &apos;light&apos; or i_color = &apos;cornflower&apos;) and
        (i_units = &apos;Box&apos; or i_units = &apos;Pound&apos;) and
        (i_size = &apos;medium&apos; or i_size = &apos;extra large&apos;)
        ))) or
       (i_manufact = i1.i_manufact and
        ((i_category = &apos;Women&apos; and 
        (i_color = &apos;midnight&apos; or i_color = &apos;snow&apos;) and
        (i_units = &apos;Pallet&apos; or i_units = &apos;Gross&apos;) and
        (i_size = &apos;medium&apos; or i_size = &apos;extra large&apos;)
        ) or
        (i_category = &apos;Women&apos; and
        (i_color = &apos;cyan&apos; or i_color = &apos;papaya&apos;) and
        (i_units = &apos;Cup&apos; or i_units = &apos;Dram&apos;) and
        (i_size = &apos;N/A&apos; or i_size = &apos;small&apos;)
        ) or
        (i_category = &apos;Men&apos; and
        (i_color = &apos;orange&apos; or i_color = &apos;frosted&apos;) and
        (i_units = &apos;Each&apos; or i_units = &apos;Tbl&apos;) and
        (i_size = &apos;petite&apos; or i_size = &apos;large&apos;)
        ) or
        (i_category = &apos;Men&apos; and
        (i_color = &apos;forest&apos; or i_color = &apos;ghost&apos;) and
        (i_units = &apos;Lb&apos; or i_units = &apos;Bundle&apos;) and
        (i_size = &apos;medium&apos; or i_size = &apos;extra large&apos;)
        )))) &gt; 0
 order by i_product_name
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q42.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q42.sql 

 select dt.d_year, item.i_category_id, item.i_category, sum(ss_ext_sales_price) sum_sales
 from 	date_dim dt, store_sales, item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 	and store_sales.ss_item_sk = item.i_item_sk
 	and item.i_manager_id = 1
 	and dt.d_moy=11
 	and dt.d_year=2000
 group by 	dt.d_year
 		,item.i_category_id
 		,item.i_category
 order by       sum(ss_ext_sales_price) desc,dt.d_year
 		,item.i_category_id
 		,item.i_category
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q43.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q43.sql 

 select s_store_name, s_store_id,
        sum(case when (d_day_name=&apos;Sunday&apos;) then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name=&apos;Monday&apos;) then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name=&apos;Tuesday&apos;) then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name=&apos;Wednesday&apos;) then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name=&apos;Thursday&apos;) then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name=&apos;Friday&apos;) then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name=&apos;Saturday&apos;) then ss_sales_price else null end) sat_sales
 from date_dim, store_sales, store
 where d_date_sk = ss_sold_date_sk and
       s_store_sk = ss_store_sk and
       s_gmt_offset = -5 and
       d_year = 2000
 group by s_store_name, s_store_id
 order by s_store_name, s_store_id,sun_sales,mon_sales,tue_sales,wed_sales,
          thu_sales,fri_sales,sat_sales
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q44.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q44.sql 

select asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
 from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 4
                 group by ss_item_sk
                 having avg(ss_net_profit) &gt; 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 4
                                                    and ss_addr_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  &lt; 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 4
                 group by ss_item_sk
                 having avg(ss_net_profit) &gt; 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 4
                                                    and ss_addr_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  &lt; 11) descending,
 item i1, item i2
 where asceding.rnk = descending.rnk
   and i1.i_item_sk=asceding.item_sk
   and i2.i_item_sk=descending.item_sk
 order by asceding.rnk
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q45.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q45.sql 

select ca_zip, ca_city, sum(ws_sales_price) sum_sales
 from web_sales, customer, customer_address, date_dim, item
 where ws_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk
 	and ws_item_sk = i_item_sk
 	and ( substr(ca_zip,1,5) in (&apos;85669&apos;, &apos;86197&apos;,&apos;88274&apos;,&apos;83405&apos;,&apos;86475&apos;, &apos;85392&apos;, &apos;85460&apos;, &apos;80348&apos;, &apos;81792&apos;)
 	      or
 	      i_item_id in (select i_item_id
                             from item
                             where i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
                             )
 	    )
 	and ws_sold_date_sk = d_date_sk
 	and d_qoy = 2 and d_year = 2001
 group by ca_zip, ca_city
 order by ca_zip, ca_city
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q46.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q46.sql 

 select c_last_name, c_first_name, ca_city, bought_city, ss_ticket_number, amt,profit
 from
   (select ss_ticket_number
          ,ss_customer_sk
          ,ca_city bought_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales, date_dim, store, household_demographics, customer_address
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and store_sales.ss_addr_sk = customer_address.ca_address_sk
    and (household_demographics.hd_dep_count = 4 or
         household_demographics.hd_vehicle_count= 3)
    and date_dim.d_dow in (6,0)
    and date_dim.d_year in (1999,1999+1,1999+2)
    and store.s_city in (&apos;Fairview&apos;,&apos;Midway&apos;,&apos;Fairview&apos;,&apos;Fairview&apos;,&apos;Fairview&apos;) 
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr
    where ss_customer_sk = c_customer_sk
      and customer.c_current_addr_sk = current_addr.ca_address_sk
      and current_addr.ca_city &lt;&gt; bought_city
  order by c_last_name, c_first_name, ca_city, bought_city, ss_ticket_number
  limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q47.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q47.sql 

with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 1999 or
         ( d_year = 1999-1 and d_moy =12) or
         ( d_year = 1999+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand, v1.s_store_name, v1.s_company_name, v1.d_year, 
                     v1.d_moy, v1.avg_monthly_sales ,v1.sum_sales, v1_lag.sum_sales psum, 
                     v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
 select * from v2
 where  d_year = 1999 and
        avg_monthly_sales &gt; 0 and
        case when avg_monthly_sales &gt; 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end &gt; 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q48.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q48.sql 

select sum (ss_quantity) sum_quan
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2000
 and
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and
   cd_marital_status = &apos;M&apos;
   and 
   cd_education_status = &apos;4 yr Degree&apos;
   and
   ss_sales_price between 100.00 and 150.00
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and
   cd_marital_status = &apos;D&apos;
   and 
   cd_education_status = &apos;2 yr Degree&apos;
   and
   ss_sales_price between 50.00 and 100.00
  )
 or
 (
  cd_demo_sk = ss_cdemo_sk
   and
   cd_marital_status = &apos;S&apos;
   and 
   cd_education_status = &apos;College&apos;
   and
   ss_sales_price between 150.00 and 200.00
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = &apos;United States&apos;
  and
  ca_state in (&apos;CO&apos;, &apos;OH&apos;, &apos;TX&apos;)
  and ss_net_profit between 0 and 2000
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = &apos;United States&apos;
  and
  ca_state in (&apos;OR&apos;, &apos;MN&apos;, &apos;KY&apos;)
  and ss_net_profit between 150 and 3000
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = &apos;United States&apos;
  and
  ca_state in (&apos;VA&apos;, &apos;CA&apos;, &apos;MS&apos;)
  and ss_net_profit between 50 and 25000
  )
 );</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q49.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q49.sql 

select &apos;web&apos; as channel, web.item, web.return_ratio, web.return_rank, web.currency_rank
 from (
 	select
    item, return_ratio, currency_ratio,
 	  rank() over (order by return_ratio) as return_rank,
 	  rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as decimal(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as decimal(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as decimal(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as decimal(15,4) )) as currency_ratio
 		from
 		 web_sales ws left outer join web_returns wr
 			on (ws.ws_order_number = wr.wr_order_number and
 			ws.ws_item_sk = wr.wr_item_sk)
        ,date_dim
 		where
 			wr.wr_return_amt &gt; 10000
 			and ws.ws_net_profit &gt; 1
                         and ws.ws_net_paid &gt; 0
                         and ws.ws_quantity &gt; 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2001
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where (web.return_rank &lt;= 10 or web.currency_rank &lt;= 10)
 union
 select
    &apos;catalog&apos; as channel, catalog.item, catalog.return_ratio,
    catalog.return_rank, catalog.currency_rank
 from (
 	select
    item, return_ratio, currency_ratio,
 	  rank() over (order by return_ratio) as return_rank,
 	  rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as decimal(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as decimal(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as decimal(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as decimal(15,4) )) as currency_ratio
 		from
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where
 			cr.cr_return_amount &gt; 10000
 			and cs.cs_net_profit &gt; 1
                         and cs.cs_net_paid &gt; 0
                         and cs.cs_quantity &gt; 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2001
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where (catalog.return_rank &lt;= 10 or catalog.currency_rank &lt;=10)
 union
 select
    &apos;store&apos; as channel, store.item, store.return_ratio,
    store.return_rank, store.currency_rank
 from (
 	select
      item, return_ratio, currency_ratio,
 	    rank() over (order by return_ratio) as return_rank,
 	    rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as decimal(15,4))/
               cast(sum(coalesce(sts.ss_quantity,0)) as decimal(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as decimal(15,4))/
               cast(sum(coalesce(sts.ss_net_paid,0)) as decimal(15,4) )) as currency_ratio
 		from
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where
 			sr.sr_return_amt &gt; 10000
 			and sts.ss_net_profit &gt; 1
                         and sts.ss_net_paid &gt; 0
                         and sts.ss_quantity &gt; 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2001
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where (store.return_rank &lt;= 10 or store.currency_rank &lt;= 10)
 order by 1,4,5
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q50.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q50.sql 

select
    s_store_name, s_company_id, s_street_number, s_street_name, s_street_type,
    s_suite_number, s_city, s_county, s_state, s_zip
   ,sum(case when (sr_returned_date_sk - ss_sold_date_sk &lt;= 30 ) then 1 else 0 end)  as &quot;30 days&quot;
   ,sum(case when (sr_returned_date_sk - ss_sold_date_sk &gt; 30) and
                  (sr_returned_date_sk - ss_sold_date_sk &lt;= 60) then 1 else 0 end )  as &quot;31-60 days&quot;
   ,sum(case when (sr_returned_date_sk - ss_sold_date_sk &gt; 60) and
                  (sr_returned_date_sk - ss_sold_date_sk &lt;= 90) then 1 else 0 end)  as &quot;61-90 days&quot;
   ,sum(case when (sr_returned_date_sk - ss_sold_date_sk &gt; 90) and
                  (sr_returned_date_sk - ss_sold_date_sk &lt;= 120) then 1 else 0 end)  as &quot;91-120 days&quot;
   ,sum(case when (sr_returned_date_sk - ss_sold_date_sk  &gt; 120) then 1 else 0 end)  as &quot;&gt;120 days&quot;
 from
    store_sales, store_returns, store, date_dim d1, date_dim d2
 where
     d2.d_year = 2001
 and d2.d_moy  = 8
 and ss_ticket_number = sr_ticket_number
 and ss_item_sk = sr_item_sk
 and ss_sold_date_sk   = d1.d_date_sk
 and sr_returned_date_sk   = d2.d_date_sk
 and ss_customer_sk = sr_customer_sk
 and ss_store_sk = s_store_sk
 group by
     s_store_name, s_company_id, s_street_number, s_street_name, s_street_type,
     s_suite_number, s_city, s_county, s_state, s_zip
  order by
     s_store_name, s_company_id, s_street_number, s_street_name, s_street_type,
     s_suite_number, s_city, s_county, s_state, s_zip
  limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q51.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q51.sql 

WITH web_v1 as (
 select
   ws_item_sk item_sk, d_date,
   sum(sum(ws_sales_price))
       over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
 from web_sales, date_dim
 where ws_sold_date_sk=d_date_sk
   and d_month_seq between 1200 and 1200+11
   and ws_item_sk is not NULL
 group by ws_item_sk, d_date),
 store_v1 as (
 select
   ss_item_sk item_sk, d_date,
   sum(sum(ss_sales_price))
       over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
 from store_sales, date_dim
 where ss_sold_date_sk=d_date_sk
   and d_month_seq between 1200 and 1200+11
   and ss_item_sk is not NULL
 group by ss_item_sk, d_date)
 select *
 from (select item_sk, d_date, web_sales, store_sales
      ,max(web_sales)
          over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
      ,max(store_sales)
          over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
      from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                  ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                  ,web.cume_sales web_sales
                  ,store.cume_sales store_sales
            from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                           and web.d_date = store.d_date)
           )x )y
 where web_cumulative &gt; store_cumulative
 order by item_sk, d_date
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q52.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q52.sql 

 select dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt, store_sales, item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
    and store_sales.ss_item_sk = item.i_item_sk
    and item.i_manager_id = 1
    and dt.d_moy=11
    and dt.d_year=2000
 group by dt.d_year, item.i_brand, item.i_brand_id
 order by dt.d_year, ext_price desc, brand_id
limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q53.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q53.sql 

select * from
   (select i_manufact_id,
           sum(ss_sales_price) sum_sales,
           avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
     from item, store_sales, date_dim, store
     where ss_item_sk = i_item_sk and
           ss_sold_date_sk = d_date_sk and
           ss_store_sk = s_store_sk and
           d_month_seq in (1200,1200+1,1200+2,1200+3,1200+4,1200+5,1200+6,
                           1200+7,1200+8,1200+9,1200+10,1200+11) and
     ((i_category in (&apos;Books&apos;,&apos;Children&apos;,&apos;Electronics&apos;) and
       i_class in (&apos;personal&apos;,&apos;portable&apos;,&apos;reference&apos;,&apos;self-help&apos;) and
       i_brand in (&apos;scholaramalgamalg #14&apos;,&apos;scholaramalgamalg #7&apos;,
 		  &apos;exportiunivamalg #9&apos;,&apos;scholaramalgamalg #9&apos;))
     or
     (i_category in (&apos;Women&apos;,&apos;Music&apos;,&apos;Men&apos;) and
      i_class in (&apos;accessories&apos;,&apos;classical&apos;,&apos;fragrances&apos;,&apos;pants&apos;) and
      i_brand in (&apos;amalgimporto #1&apos;,&apos;edu packscholar #1&apos;,&apos;exportiimporto #1&apos;,
 		&apos;importoamalg #1&apos;)))
     group by i_manufact_id, d_qoy ) tmp1
 where case when avg_quarterly_sales &gt; 0
 	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
 	else null end &gt; 0.1
 order by avg_quarterly_sales,
  	 sum_sales,
 	 i_manufact_id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q54.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q54.sql 

with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = &apos;Women&apos;
         and i_class = &apos;maternity&apos;
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 12
         and d_year = 1998
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1998 and d_moy = 12)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1998 and d_moy = 12)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as integer) as segment from my_revenue)
 select segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q55.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q55.sql 

select i_brand_id brand_id, i_brand brand,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item
 where d_date_sk = ss_sold_date_sk
 	and ss_item_sk = i_item_sk
 	and i_manager_id=28
 	and d_moy=11
 	and d_year=1999
 group by i_brand, i_brand_id
 order by ext_price desc, brand_id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q56.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q56.sql


 with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	  store_sales, date_dim, customer_address, item
 where
    i_item_id in (select i_item_id from item where i_color in (&apos;slate&apos;,&apos;blanched&apos;,&apos;burnished&apos;))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 2001
 and     d_moy                   = 2
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -5
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	  catalog_sales, date_dim, customer_address, item
 where
    i_item_id in (select i_item_id from item where i_color in (&apos;slate&apos;,&apos;blanched&apos;,&apos;burnished&apos;))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 2001
 and     d_moy                   = 2
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -5
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	  web_sales, date_dim, customer_address, item
 where
    i_item_id in (select i_item_id from item where i_color in (&apos;slate&apos;,&apos;blanched&apos;,&apos;burnished&apos;))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 2001 
 and     d_moy                   = 2
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -5
 group by i_item_id)
 select i_item_id ,sum(total_sales) total_sales
 from  (select * from ss
        union all
        select * from cs
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q57.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q57.sql 

with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand, cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand, cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 1999 or
         ( d_year = 1999-1 and d_moy =12) or
         ( d_year = 1999+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand, v1.cc_name, v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
 select * from v2
 where  d_year = 1999 and
        avg_monthly_sales &gt; 0 and
        case when avg_monthly_sales &gt; 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end &gt; 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q58.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q58.sql 

with ss_items as
 (select i_item_id item_id, sum(ss_ext_sales_price) ss_item_rev
 from store_sales, item, date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq
                                      from date_dim
                                      where d_date = cast(&apos;2000-01-03&apos; as date)))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales, item, date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq
                                      from date_dim
                                      where d_date = cast(&apos;2000-01-03&apos; as date)))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id, sum(ws_ext_sales_price) ws_item_rev
  from web_sales, item, date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq
                                     from date_dim
                                     where d_date = cast(&apos;2000-01-03&apos; as date)))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
 select ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by ss_items.item_id, ss_item_rev
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q59.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q59.sql 

 with wss as
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name=&apos;Sunday&apos;) then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name=&apos;Monday&apos;) then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name=&apos;Tuesday&apos;) then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name=&apos;Wednesday&apos;) then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name=&apos;Thursday&apos;) then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name=&apos;Friday&apos;) then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name=&apos;Saturday&apos;) then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
 select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales2,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and
        d_month_seq between 1212 and 1212 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and
        d_month_seq between 1212+ 12 and 1212 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q60.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q60.sql

with ss as (
    select i_item_id,sum(ss_ext_sales_price) total_sales
    from store_sales, date_dim, customer_address, item
    where
        i_item_id in (select i_item_id from item where i_category in (&apos;Music&apos;))
    and     ss_item_sk              = i_item_sk
    and     ss_sold_date_sk         = d_date_sk
    and     d_year                  = 1998
    and     d_moy                   = 9
    and     ss_addr_sk              = ca_address_sk
    and     ca_gmt_offset           = -5
    group by i_item_id),
  cs as (
    select i_item_id,sum(cs_ext_sales_price) total_sales
    from catalog_sales, date_dim, customer_address, item
    where
        i_item_id in (select i_item_id from item where i_category in (&apos;Music&apos;))
    and     cs_item_sk              = i_item_sk
    and     cs_sold_date_sk         = d_date_sk
    and     d_year                  = 1998
    and     d_moy                   = 9
    and     cs_bill_addr_sk         = ca_address_sk
    and     ca_gmt_offset           = -5
    group by i_item_id),
  ws as (
    select i_item_id,sum(ws_ext_sales_price) total_sales
    from web_sales, date_dim, customer_address, item
    where
        i_item_id in (select i_item_id from item where i_category in (&apos;Music&apos;))
    and     ws_item_sk              = i_item_sk
    and     ws_sold_date_sk         = d_date_sk
    and     d_year                  = 1998
    and     d_moy                   = 9
    and     ws_bill_addr_sk         = ca_address_sk
    and     ca_gmt_offset           = -5
    group by i_item_id)
 select i_item_id, sum(total_sales) total_sales
 from  (select * from ss
        union all
        select * from cs
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id, total_sales
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q61.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q61.sql 

select promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
 from
   (select sum(ss_ext_sales_price) promotions
     from  store_sales, store, promotion, date_dim, customer, customer_address, item
     where ss_sold_date_sk = d_date_sk
     and   ss_store_sk = s_store_sk
     and   ss_promo_sk = p_promo_sk
     and   ss_customer_sk= c_customer_sk
     and   ca_address_sk = c_current_addr_sk
     and   ss_item_sk = i_item_sk
     and   ca_gmt_offset = -5
     and   i_category = &apos;Jewelry&apos;
     and   (p_channel_dmail = &apos;Y&apos; or p_channel_email = &apos;Y&apos; or p_channel_tv = &apos;Y&apos;)
     and   s_gmt_offset = -5
     and   d_year = 1998
     and   d_moy  = 11) promotional_sales cross join
   (select sum(ss_ext_sales_price) total
     from  store_sales, store, date_dim, customer, customer_address, item
     where ss_sold_date_sk = d_date_sk
     and   ss_store_sk = s_store_sk
     and   ss_customer_sk= c_customer_sk
     and   ca_address_sk = c_current_addr_sk
     and   ss_item_sk = i_item_sk
     and   ca_gmt_offset = -5
     and   i_category = &apos;Jewelry&apos;
     and   s_gmt_offset = -5
     and   d_year = 1998
     and   d_moy  = 11) all_sales
 order by promotions, total
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q62.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q62.sql 

 select
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,web_name
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk &lt;= 30 ) then 1 else 0 end)  as &quot;30 days&quot;
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk &gt; 30) and
                 (ws_ship_date_sk - ws_sold_date_sk &lt;= 60) then 1 else 0 end )  as &quot;31-60 days&quot;
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk &gt; 60) and
                 (ws_ship_date_sk - ws_sold_date_sk &lt;= 90) then 1 else 0 end)  as &quot;61-90 days&quot;
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk &gt; 90) and
                 (ws_ship_date_sk - ws_sold_date_sk &lt;= 120) then 1 else 0 end)  as &quot;91-120 days&quot;
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk  &gt; 120) then 1 else 0 end)  as &quot;&gt;120 days&quot;
 from
    web_sales, warehouse, ship_mode, web_site, date_dim
 where
     d_month_seq between 1200 and 1200 + 11
 and ws_ship_date_sk   = d_date_sk
 and ws_warehouse_sk   = w_warehouse_sk
 and ws_ship_mode_sk   = sm_ship_mode_sk
 and ws_web_site_sk    = web_site_sk
 group by
    substr(w_warehouse_name,1,20), sm_type, web_name
 order by
    substr(w_warehouse_name,1,20), sm_type, web_name
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q63.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q63.sql 

select *
 from (select i_manager_id
              ,sum(ss_sales_price) sum_sales
              ,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales
       from item
           ,store_sales
           ,date_dim
           ,store
       where ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and ss_store_sk = s_store_sk
         and d_month_seq in (1200,1200+1,1200+2,1200+3,1200+4,1200+5,1200+6,1200+7,
                             1200+8,1200+9,1200+10,1200+11)
         and ((    i_category in (&apos;Books&apos;,&apos;Children&apos;,&apos;Electronics&apos;)
               and i_class in (&apos;personal&apos;,&apos;portable&apos;,&apos;reference&apos;,&apos;self-help&apos;)
               and i_brand in (&apos;scholaramalgamalg #14&apos;,&apos;scholaramalgamalg #7&apos;,
 		                  &apos;exportiunivamalg #9&apos;,&apos;scholaramalgamalg #9&apos;))
            or(    i_category in (&apos;Women&apos;,&apos;Music&apos;,&apos;Men&apos;)
               and i_class in (&apos;accessories&apos;,&apos;classical&apos;,&apos;fragrances&apos;,&apos;pants&apos;)
               and i_brand in (&apos;amalgimporto #1&apos;,&apos;edu packscholar #1&apos;,&apos;exportiimporto #1&apos;,
 		                 &apos;importoamalg #1&apos;)))
 group by i_manager_id, d_moy) tmp1
 where case when avg_monthly_sales &gt; 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end &gt; 0.1
 order by i_manager_id
         ,avg_monthly_sales
         ,sum_sales
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q64.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q64.sql 

with cs_ui as
  (select cs_item_sk
         ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
   from catalog_sales
       ,catalog_returns
   where cs_item_sk = cr_item_sk
     and cs_order_number = cr_order_number
   group by cs_item_sk
   having sum(cs_ext_list_price)&gt;2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
 cross_sales as
  (select i_product_name product_name, i_item_sk item_sk, s_store_name store_name, s_zip store_zip,
          ad1.ca_street_number b_street_number, ad1.ca_street_name b_streen_name, ad1.ca_city b_city,
          ad1.ca_zip b_zip, ad2.ca_street_number c_street_number, ad2.ca_street_name c_street_name,
          ad2.ca_city c_city, ad2.ca_zip c_zip, d1.d_year as syear, d2.d_year as fsyear, d3.d_year s2year,
          count(*) cnt, sum(ss_wholesale_cost) s1, sum(ss_list_price) s2, sum(ss_coupon_amt) s3
   FROM store_sales, store_returns, cs_ui, date_dim d1, date_dim d2, date_dim d3,
        store, customer, customer_demographics cd1, customer_demographics cd2,
        promotion, household_demographics hd1, household_demographics hd2,
        customer_address ad1, customer_address ad2, income_band ib1, income_band ib2, item
   WHERE  ss_store_sk = s_store_sk AND
          ss_sold_date_sk = d1.d_date_sk AND
          ss_customer_sk = c_customer_sk AND
          ss_cdemo_sk= cd1.cd_demo_sk AND
          ss_hdemo_sk = hd1.hd_demo_sk AND
          ss_addr_sk = ad1.ca_address_sk and
          ss_item_sk = i_item_sk and
          ss_item_sk = sr_item_sk and
          ss_ticket_number = sr_ticket_number and
          ss_item_sk = cs_ui.cs_item_sk and
          c_current_cdemo_sk = cd2.cd_demo_sk AND
          c_current_hdemo_sk = hd2.hd_demo_sk AND
          c_current_addr_sk = ad2.ca_address_sk and
          c_first_sales_date_sk = d2.d_date_sk and
          c_first_shipto_date_sk = d3.d_date_sk and
          ss_promo_sk = p_promo_sk and
          hd1.hd_income_band_sk = ib1.ib_income_band_sk and
          hd2.hd_income_band_sk = ib2.ib_income_band_sk and
          cd1.cd_marital_status &lt;&gt; cd2.cd_marital_status and
          i_color in (&apos;purple&apos;,&apos;burlywood&apos;,&apos;indian&apos;,&apos;spring&apos;,&apos;floral&apos;,&apos;medium&apos;) and
          i_current_price between 64 and 64 + 10 and
          i_current_price between 64 + 1 and 64 + 15
 group by i_product_name, i_item_sk, s_store_name, s_zip, ad1.ca_street_number,
          ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number,
          ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, d1.d_year, d2.d_year, d3.d_year
 )
 select cs1.product_name, cs1.store_name, cs1.store_zip, cs1.b_street_number,
        cs1.b_streen_name, cs1.b_city, cs1.b_zip, cs1.c_street_number, cs1.c_street_name,
        cs1.c_city, cs1.c_zip, cs1.syear, cs1.cnt, cs1.s1, cs1.s2, cs1.s3, cs2.s1,
        cs2.s2, cs2.s3, cs2.syear, cs2.cnt
 from cross_sales cs1,cross_sales cs2
 where cs1.item_sk=cs2.item_sk and
      cs1.syear = 1999 and
      cs2.syear = 1999 + 1 and
      cs2.cnt &lt;= cs1.cnt and
      cs1.store_name = cs2.store_name and
      cs1.store_zip = cs2.store_zip
 order by cs1.product_name, cs1.store_name, cs2.cnt;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q65.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q65.sql 

 select
	  s_store_name, i_item_desc, sc.revenue, i_current_price, i_wholesale_cost, i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk,
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1176 and 1176+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1176 and 1176+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and
       sc.revenue &lt;= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q66.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q66.sql 

select w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country,
    ship_carriers, year
 	  ,sum(jan_sales) as jan_sales
 	  ,sum(feb_sales) as feb_sales
 	  ,sum(mar_sales) as mar_sales
 	  ,sum(apr_sales) as apr_sales
 	  ,sum(may_sales) as may_sales
 	  ,sum(jun_sales) as jun_sales
 	  ,sum(jul_sales) as jul_sales
 	  ,sum(aug_sales) as aug_sales
 	  ,sum(sep_sales) as sep_sales
 	  ,sum(oct_sales) as oct_sales
 	  ,sum(nov_sales) as nov_sales
 	  ,sum(dec_sales) as dec_sales
 	  ,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
 	  ,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
 	  ,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
 	  ,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
 	  ,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
 	  ,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
 	  ,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
 	  ,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
 	  ,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
 	  ,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
 	  ,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
 	  ,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
 	  ,sum(jan_net) as jan_net
 	  ,sum(feb_net) as feb_net
 	  ,sum(mar_net) as mar_net
 	  ,sum(apr_net) as apr_net
 	  ,sum(may_net) as may_net
 	  ,sum(jun_net) as jun_net
 	  ,sum(jul_net) as jul_net
 	  ,sum(aug_net) as aug_net
 	  ,sum(sep_net) as sep_net
 	  ,sum(oct_net) as oct_net
 	  ,sum(nov_net) as nov_net
 	  ,sum(dec_net) as dec_net
 from (
    (select
 	    w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country
 	        ,concat(&apos;DHL&apos;, &apos;,&apos;, &apos;BARIAN&apos;) as ship_carriers
      ,d_year as year
 	    ,sum(case when d_moy = 1 then ws_ext_sales_price * ws_quantity else 0 end) as jan_sales
 	    ,sum(case when d_moy = 2 then ws_ext_sales_price * ws_quantity else 0 end) as feb_sales
 	    ,sum(case when d_moy = 3 then ws_ext_sales_price * ws_quantity else 0 end) as mar_sales
 	    ,sum(case when d_moy = 4 then ws_ext_sales_price * ws_quantity else 0 end) as apr_sales
 	    ,sum(case when d_moy = 5 then ws_ext_sales_price * ws_quantity else 0 end) as may_sales
 	    ,sum(case when d_moy = 6 then ws_ext_sales_price * ws_quantity else 0 end) as jun_sales
 	    ,sum(case when d_moy = 7 then ws_ext_sales_price * ws_quantity else 0 end) as jul_sales
 	    ,sum(case when d_moy = 8 then ws_ext_sales_price * ws_quantity else 0 end) as aug_sales
 	    ,sum(case when d_moy = 9 then ws_ext_sales_price * ws_quantity else 0 end) as sep_sales
 	    ,sum(case when d_moy = 10 then ws_ext_sales_price * ws_quantity else 0 end) as oct_sales
 	    ,sum(case when d_moy = 11 then ws_ext_sales_price * ws_quantity else 0 end) as nov_sales
 	    ,sum(case when d_moy = 12 then ws_ext_sales_price * ws_quantity else 0 end) as dec_sales
 	    ,sum(case when d_moy = 1 then ws_net_paid * ws_quantity else 0 end) as jan_net
 	    ,sum(case when d_moy = 2 then ws_net_paid * ws_quantity else 0 end) as feb_net
 	    ,sum(case when d_moy = 3 then ws_net_paid * ws_quantity else 0 end) as mar_net
 	    ,sum(case when d_moy = 4 then ws_net_paid * ws_quantity else 0 end) as apr_net
 	    ,sum(case when d_moy = 5 then ws_net_paid * ws_quantity else 0 end) as may_net
 	    ,sum(case when d_moy = 6 then ws_net_paid * ws_quantity else 0 end) as jun_net
 	    ,sum(case when d_moy = 7 then ws_net_paid * ws_quantity else 0 end) as jul_net
 	    ,sum(case when d_moy = 8 then ws_net_paid * ws_quantity else 0 end) as aug_net
 	    ,sum(case when d_moy = 9 then ws_net_paid * ws_quantity else 0 end) as sep_net
 	    ,sum(case when d_moy = 10 then ws_net_paid * ws_quantity else 0 end) as oct_net
 	    ,sum(case when d_moy = 11 then ws_net_paid * ws_quantity else 0 end) as nov_net
 	    ,sum(case when d_moy = 12 then ws_net_paid * ws_quantity else 0 end) as dec_net
    from
      web_sales, warehouse, date_dim, time_dim, ship_mode
    where
      ws_warehouse_sk =  w_warehouse_sk
      and ws_sold_date_sk = d_date_sk
      and ws_sold_time_sk = t_time_sk
 	    and ws_ship_mode_sk = sm_ship_mode_sk
      and d_year = 2001
 	    and t_time between 30838 and 30838+28800
 	    and sm_carrier in (&apos;DHL&apos;,&apos;BARIAN&apos;)
   group by
      w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year)
 union all
    (select w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country
 	        ,concat(&apos;DHL&apos;, &apos;,&apos;, &apos;BARIAN&apos;) as ship_carriers
      ,d_year as year
 	    ,sum(case when d_moy = 1 then cs_sales_price * cs_quantity else 0 end) as jan_sales
 	    ,sum(case when d_moy = 2 then cs_sales_price * cs_quantity else 0 end) as feb_sales
 	    ,sum(case when d_moy = 3 then cs_sales_price * cs_quantity else 0 end) as mar_sales
 	    ,sum(case when d_moy = 4 then cs_sales_price * cs_quantity else 0 end) as apr_sales
 	    ,sum(case when d_moy = 5 then cs_sales_price * cs_quantity else 0 end) as may_sales
 	    ,sum(case when d_moy = 6 then cs_sales_price * cs_quantity else 0 end) as jun_sales
 	    ,sum(case when d_moy = 7 then cs_sales_price * cs_quantity else 0 end) as jul_sales
 	    ,sum(case when d_moy = 8 then cs_sales_price * cs_quantity else 0 end) as aug_sales
 	    ,sum(case when d_moy = 9 then cs_sales_price * cs_quantity else 0 end) as sep_sales
 	    ,sum(case when d_moy = 10 then cs_sales_price * cs_quantity else 0 end) as oct_sales
 	    ,sum(case when d_moy = 11 then cs_sales_price * cs_quantity else 0 end) as nov_sales
 	    ,sum(case when d_moy = 12 then cs_sales_price * cs_quantity else 0 end) as dec_sales
 	    ,sum(case when d_moy = 1 then cs_net_paid_inc_tax * cs_quantity else 0 end) as jan_net
 	    ,sum(case when d_moy = 2 then cs_net_paid_inc_tax * cs_quantity else 0 end) as feb_net
 	    ,sum(case when d_moy = 3 then cs_net_paid_inc_tax * cs_quantity else 0 end) as mar_net
 	    ,sum(case when d_moy = 4 then cs_net_paid_inc_tax * cs_quantity else 0 end) as apr_net
 	    ,sum(case when d_moy = 5 then cs_net_paid_inc_tax * cs_quantity else 0 end) as may_net
 	    ,sum(case when d_moy = 6 then cs_net_paid_inc_tax * cs_quantity else 0 end) as jun_net
 	    ,sum(case when d_moy = 7 then cs_net_paid_inc_tax * cs_quantity else 0 end) as jul_net
 	    ,sum(case when d_moy = 8 then cs_net_paid_inc_tax * cs_quantity else 0 end) as aug_net
 	    ,sum(case when d_moy = 9 then cs_net_paid_inc_tax * cs_quantity else 0 end) as sep_net
 	    ,sum(case when d_moy = 10 then cs_net_paid_inc_tax * cs_quantity else 0 end) as oct_net
 	    ,sum(case when d_moy = 11 then cs_net_paid_inc_tax * cs_quantity else 0 end) as nov_net
 	    ,sum(case when d_moy = 12 then cs_net_paid_inc_tax * cs_quantity else 0 end) as dec_net
     from
        catalog_sales, warehouse, date_dim, time_dim, ship_mode
     where
        cs_warehouse_sk =  w_warehouse_sk
        and cs_sold_date_sk = d_date_sk
        and cs_sold_time_sk = t_time_sk
 	      and cs_ship_mode_sk = sm_ship_mode_sk
        and d_year = 2001
 	      and t_time between 30838 AND 30838+28800
 	      and sm_carrier in (&apos;DHL&apos;,&apos;BARIAN&apos;)
     group by
        w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
     )
 ) x
 group by
    w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country,
    ship_carriers, year
 order by w_warehouse_name
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q67.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q67.sql 

select * from
     (select i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id,
             sumsales, rank() over (partition by i_category order by sumsales desc) rk
      from
         (select i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,
                 s_store_id, sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
          from store_sales, date_dim, store, item
        where  ss_sold_date_sk=d_date_sk
           and ss_item_sk=i_item_sk
           and ss_store_sk = s_store_sk
           and d_month_seq between 1200 and 1200+11
        group by rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy,
                        d_moy,s_store_id))dw1) dw2
 where rk &lt;= 100
 order by
   i_category, i_class, i_brand, i_product_name, d_year,
   d_qoy, d_moy, s_store_id, sumsales, rk
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q68.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q68.sql 

select
    c_last_name, c_first_name, ca_city, bought_city, ss_ticket_number, extended_price,
    extended_tax, list_price
 from (select
        ss_ticket_number, ss_customer_sk, ca_city bought_city,
        sum(ss_ext_sales_price) extended_price,
        sum(ss_ext_list_price) list_price,
        sum(ss_ext_tax) extended_tax
     from store_sales, date_dim, store, household_demographics, customer_address
     where store_sales.ss_sold_date_sk = date_dim.d_date_sk
        and store_sales.ss_store_sk = store.s_store_sk
        and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
        and store_sales.ss_addr_sk = customer_address.ca_address_sk
        and date_dim.d_dom between 1 and 2
        and (household_demographics.hd_dep_count = 4 or
             household_demographics.hd_vehicle_count = 3)
        and date_dim.d_year in (1999,1999+1,1999+2)
        and store.s_city in (&apos;Midway&apos;,&apos;Fairview&apos;)
     group by ss_ticket_number, ss_customer_sk, ss_addr_sk,ca_city) dn,
    customer,
    customer_address current_addr
 where ss_customer_sk = c_customer_sk
   and customer.c_current_addr_sk = current_addr.ca_address_sk
   and current_addr.ca_city &lt;&gt; bought_city
 order by c_last_name, ss_ticket_number
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q69.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q69.sql 

select
    cd_gender, cd_marital_status, cd_education_status, count(*) cnt1,
    cd_purchase_estimate, count(*) cnt2, cd_credit_rating, count(*) cnt3
 from
    customer c,customer_address ca,customer_demographics
 where
    c.c_current_addr_sk = ca.ca_address_sk and
    ca_state in (&apos;KY&apos;, &apos;GA&apos;, &apos;NM&apos;) and
    cd_demo_sk = c.c_current_cdemo_sk and
    exists (select * from store_sales, date_dim
            where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 2001 and
                d_moy between 4 and 4+2) and
   (not exists (select * from web_sales, date_dim
                where c.c_customer_sk = ws_bill_customer_sk and
                    ws_sold_date_sk = d_date_sk and
                    d_year = 2001 and
                    d_moy between 4 and 4+2) and
    not exists (select * from catalog_sales, date_dim
                where c.c_customer_sk = cs_ship_customer_sk and
                    cs_sold_date_sk = d_date_sk and
                    d_year = 2001 and
                    d_moy between 4 and 4+2))
 group by cd_gender, cd_marital_status, cd_education_status,
          cd_purchase_estimate, cd_credit_rating
 order by cd_gender, cd_marital_status, cd_education_status,
          cd_purchase_estimate, cd_credit_rating
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q70.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q70.sql 

select
    sum(ss_net_profit) as total_sum, s_state, s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	    partition by grouping(s_state)+grouping(s_county),
 	    case when grouping(s_county) = 0 then s_state end
 	    order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales, date_dim d1, store
 where
    d1.d_month_seq between 1200 and 1200+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
    (select s_state from
        (select s_state as s_state,
 			      rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
         from store_sales, store, date_dim
         where  d_month_seq between 1200 and 1200+11
 			   and d_date_sk = ss_sold_date_sk
 			   and s_store_sk  = ss_store_sk
         group by s_state) tmp1
     where ranking &lt;= 5)
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q71.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q71.sql 

select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	  sum(ext_price) ext_price
 from item,
    (select
        ws_ext_sales_price as ext_price,
        ws_sold_date_sk as sold_date_sk,
        ws_item_sk as sold_item_sk,
        ws_sold_time_sk as time_sk
     from web_sales, date_dim
     where d_date_sk = ws_sold_date_sk
        and d_moy=11
        and d_year=1999
     union all
     select
        cs_ext_sales_price as ext_price,
        cs_sold_date_sk as sold_date_sk,
        cs_item_sk as sold_item_sk,
        cs_sold_time_sk as time_sk
      from catalog_sales, date_dim
      where d_date_sk = cs_sold_date_sk
          and d_moy=11
          and d_year=1999
     union all
     select
        ss_ext_sales_price as ext_price,
        ss_sold_date_sk as sold_date_sk,
        ss_item_sk as sold_item_sk,
        ss_sold_time_sk as time_sk
     from store_sales,date_dim
     where d_date_sk = ss_sold_date_sk
        and d_moy=11
        and d_year=1999
     ) tmp, time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = &apos;breakfast&apos; or t_meal_time = &apos;dinner&apos;)
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q72.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q72.sql 

select i_item_desc
       ,w_warehouse_name
       ,d1.d_week_seq
       ,sum(case when p_promo_sk is null then 1 else 0 end) no_promo
       ,sum(case when p_promo_sk is not null then 1 else 0 end) promo
       ,count(*) total_cnt
 from catalog_sales
 join inventory on (cs_item_sk = inv_item_sk)
 join warehouse on (w_warehouse_sk=inv_warehouse_sk)
 join item on (i_item_sk = cs_item_sk)
 join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
 join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
 join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
 join date_dim d2 on (inv_date_sk = d2.d_date_sk)
 join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
 left outer join promotion on (cs_promo_sk=p_promo_sk)
 left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
 where d1.d_week_seq = d2.d_week_seq
   and inv_quantity_on_hand &lt; cs_quantity
   and d3.d_date &gt; (cast(d1.d_date AS DATE) + interval &apos;5&apos; day)
   and hd_buy_potential = &apos;&gt;10000&apos;
   and d1.d_year = 1999
   and cd_marital_status = &apos;D&apos;
 group by i_item_desc,w_warehouse_name,d1.d_week_seq
 order by total_cnt desc, i_item_desc, w_warehouse_name, d1.d_week_seq
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q73.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q73.sql 

select
    c_last_name, c_first_name, c_salutation, c_preferred_cust_flag,
    ss_ticket_number, cnt from
   (select ss_ticket_number, ss_customer_sk, count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and date_dim.d_dom between 1 and 2
    and (household_demographics.hd_buy_potential = &apos;&gt;10000&apos; or
         household_demographics.hd_buy_potential = &apos;unknown&apos;)
    and household_demographics.hd_vehicle_count &gt; 0
    and case when household_demographics.hd_vehicle_count &gt; 0 then
             household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end &gt; 1
    and date_dim.d_year in (1999,1999+1,1999+2)
    and store.s_county in (&apos;Williamson County&apos;,&apos;Franklin Parish&apos;,&apos;Bronx County&apos;,&apos;Orange County&apos;)
    group by ss_ticket_number,ss_customer_sk) dj,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 1 and 5
    order by cnt desc, c_last_name asc;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q74.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q74.sql 

with year_total as (
 select
    c_customer_id customer_id, c_first_name customer_first_name,
    c_last_name customer_last_name, d_year as year,
    sum(ss_net_paid) year_total, &apos;s&apos; sale_type
 from
    customer, store_sales, date_dim
 where c_customer_sk = ss_customer_sk
    and ss_sold_date_sk = d_date_sk
    and d_year in (2001,2001+1)
 group by
    c_customer_id, c_first_name, c_last_name, d_year
 union all
 select
    c_customer_id customer_id, c_first_name customer_first_name,
    c_last_name customer_last_name, d_year as year,
    sum(ws_net_paid) year_total, &apos;w&apos; sale_type
 from
    customer, web_sales, date_dim
 where c_customer_sk = ws_bill_customer_sk
    and ws_sold_date_sk = d_date_sk
    and d_year in (2001,2001+1)
 group by
    c_customer_id, c_first_name, c_last_name, d_year)
 select
    t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from
    year_total t_s_firstyear, year_total t_s_secyear,
    year_total t_w_firstyear, year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
    and t_s_firstyear.customer_id = t_w_secyear.customer_id
    and t_s_firstyear.customer_id = t_w_firstyear.customer_id
    and t_s_firstyear.sale_type = &apos;s&apos;
    and t_w_firstyear.sale_type = &apos;w&apos;
    and t_s_secyear.sale_type = &apos;s&apos;
    and t_w_secyear.sale_type = &apos;w&apos;
    and t_s_firstyear.year = 2001
    and t_s_secyear.year = 2001+1
    and t_w_firstyear.year = 2001
    and t_w_secyear.year = 2001+1
    and t_s_firstyear.year_total &gt; 0
    and t_w_firstyear.year_total &gt; 0
    and case when t_w_firstyear.year_total &gt; 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
      &gt; case when t_s_firstyear.year_total &gt; 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 1, 1, 1
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q75.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q75.sql 

 WITH all_sales AS (
    SELECT
        d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id,
        SUM(sales_cnt) AS sales_cnt, SUM(sales_amt) AS sales_amt
    FROM (
        SELECT
            d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id,
            cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt,
            cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
        FROM catalog_sales
        JOIN item ON i_item_sk=cs_item_sk
        JOIN date_dim ON d_date_sk=cs_sold_date_sk
        LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number
                                      AND cs_item_sk=cr_item_sk)
        WHERE i_category=&apos;Books&apos;
        UNION
        SELECT
            d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id,
             ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt,
             ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
        FROM store_sales
        JOIN item ON i_item_sk=ss_item_sk
        JOIN date_dim ON d_date_sk=ss_sold_date_sk
        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number
                                    AND ss_item_sk=sr_item_sk)
        WHERE i_category=&apos;Books&apos;
        UNION
        SELECT
            d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id,
            ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt,
            ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
        FROM web_sales
        JOIN item ON i_item_sk=ws_item_sk
        JOIN date_dim ON d_date_sk=ws_sold_date_sk
        LEFT JOIN web_returns ON (ws_order_number=wr_order_number
                                  AND ws_item_sk=wr_item_sk)
        WHERE i_category=&apos;Books&apos;) sales_detail
    GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT
    prev_yr.d_year AS prev_year, curr_yr.d_year AS year, curr_yr.i_brand_id,
    curr_yr.i_class_id, curr_yr.i_category_id, curr_yr.i_manufact_id,
    prev_yr.sales_cnt AS prev_yr_cnt, curr_yr.sales_cnt AS curr_yr_cnt,
    curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff,
    curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))&lt;0.9
 ORDER BY sales_cnt_diff
 LIMIT 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q76.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q76.sql 

SELECT
    channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt,
    SUM(ext_sales_price) sales_amt
 FROM(
    SELECT
        &apos;store&apos; as channel, ss_store_sk col_name, d_year, d_qoy, i_category,
        ss_ext_sales_price ext_sales_price
    FROM store_sales, item, date_dim
    WHERE ss_store_sk IS NULL
      AND ss_sold_date_sk=d_date_sk
      AND ss_item_sk=i_item_sk
    UNION ALL
    SELECT
        &apos;web&apos; as channel, ws_ship_customer_sk col_name, d_year, d_qoy, i_category,
        ws_ext_sales_price ext_sales_price
    FROM web_sales, item, date_dim
    WHERE ws_ship_customer_sk IS NULL
      AND ws_sold_date_sk=d_date_sk
      AND ws_item_sk=i_item_sk
    UNION ALL
    SELECT
        &apos;catalog&apos; as channel, cs_ship_addr_sk col_name, d_year, d_qoy, i_category,
        cs_ext_sales_price ext_sales_price
    FROM catalog_sales, item, date_dim
    WHERE cs_ship_addr_sk IS NULL
      AND cs_sold_date_sk=d_date_sk
      AND cs_item_sk=i_item_sk) foo
 GROUP BY channel, col_name, d_year, d_qoy, i_category
 ORDER BY channel, col_name, d_year, d_qoy, i_category
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q77.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q77.sql 

with ss as
 (select s_store_sk, sum(ss_ext_sales_price) as sales, sum(ss_net_profit) as profit
  from store_sales, date_dim, store
  where ss_sold_date_sk = d_date_sk
    and d_date between cast(&apos;2000-08-23&apos; as date) and
                       (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
    and ss_store_sk = s_store_sk
  group by s_store_sk),
 sr as
 (select s_store_sk, sum(sr_return_amt) as returns, sum(sr_net_loss) as profit_loss
 from store_returns, date_dim, store
 where sr_returned_date_sk = d_date_sk
    and d_date between cast(&apos;2000-08-23&apos; as date) and
                       (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
    and sr_store_sk = s_store_sk
 group by s_store_sk),
 cs as
 (select cs_call_center_sk, sum(cs_ext_sales_price) as sales, sum(cs_net_profit) as profit
 from catalog_sales, date_dim
 where cs_sold_date_sk = d_date_sk
    and d_date between cast(&apos;2000-08-23&apos; as date) and
                       (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
 group by cs_call_center_sk),
 cr as
 (select cr_call_center_sk, sum(cr_return_amount) as returns, sum(cr_net_loss) as profit_loss
 from catalog_returns, date_dim
 where cr_returned_date_sk = d_date_sk
    and d_date between cast(&apos;2000-08-23&apos; as date) and
                       (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
	group by cr_call_center_sk),
 ws as
 (select wp_web_page_sk, sum(ws_ext_sales_price) as sales, sum(ws_net_profit) as profit
 from web_sales, date_dim, web_page
 where ws_sold_date_sk = d_date_sk
    and d_date between cast(&apos;2000-08-23&apos; as date) and
                       (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
    and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk),
 wr as
 (select wp_web_page_sk, sum(wr_return_amt) as returns, sum(wr_net_loss) as profit_loss
 from web_returns, date_dim, web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast(&apos;2000-08-23&apos; as date) and
                          (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
 select channel, id, sum(sales) as sales, sum(returns) as returns, sum(profit) as profit
 from
 (select
    &apos;store channel&apos; as channel, ss.s_store_sk as id, sales,
    coalesce(returns, 0) as returns, (profit - coalesce(profit_loss,0)) as profit
 from ss left join sr
      on  ss.s_store_sk = sr.s_store_sk
 union all
 select
    &apos;catalog channel&apos; as channel, cs_call_center_sk as id, sales,
    returns, (profit - profit_loss) as profit
 from cs cross join cr
 union all
 select
    &apos;web channel&apos; as channel, ws.wp_web_page_sk as id, sales,
    coalesce(returns, 0) returns, (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup(channel, id)
 order by channel, id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q78.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q78.sql 

with ws as
   (select d_year AS ws_sold_year, ws_item_sk,
     ws_bill_customer_sk ws_customer_sk,
     sum(ws_quantity) ws_qty,
     sum(ws_wholesale_cost) ws_wc,
     sum(ws_sales_price) ws_sp
    from web_sales
    left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
    join date_dim on ws_sold_date_sk = d_date_sk
    where wr_order_number is null
    group by d_year, ws_item_sk, ws_bill_customer_sk
    ),
 cs as
   (select d_year AS cs_sold_year, cs_item_sk,
     cs_bill_customer_sk cs_customer_sk,
     sum(cs_quantity) cs_qty,
     sum(cs_wholesale_cost) cs_wc,
     sum(cs_sales_price) cs_sp
    from catalog_sales
    left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
    join date_dim on cs_sold_date_sk = d_date_sk
    where cr_order_number is null
    group by d_year, cs_item_sk, cs_bill_customer_sk
    ),
 ss as
   (select d_year AS ss_sold_year, ss_item_sk,
     ss_customer_sk,
     sum(ss_quantity) ss_qty,
     sum(ss_wholesale_cost) ss_wc,
     sum(ss_sales_price) ss_sp
    from store_sales
    left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
    join date_dim on ss_sold_date_sk = d_date_sk
    where sr_ticket_number is null
    group by d_year, ss_item_sk, ss_customer_sk
    )
 select
   ss_sold_year, ss_item_sk, ss_customer_sk,
   round(ss_qty/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio,
   ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
   coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
   coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
   coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
 from ss
 left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
 left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk)
 where (coalesce(ws_qty,0)&gt;0 or coalesce(cs_qty, 0)&gt;0) and ss_sold_year=2000
 order by
   ss_sold_year, ss_item_sk, ss_customer_sk,
   ss_qty desc, ss_wc desc, ss_sp desc,
   other_chan_qty,
   other_chan_wholesale_cost,
   other_chan_sales_price,
   round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
  limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q79.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q79.sql 

 select
  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit
  from
   (select ss_ticket_number
          ,ss_customer_sk
          ,store.s_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (household_demographics.hd_dep_count = 6 or
        household_demographics.hd_vehicle_count &gt; 2)
    and date_dim.d_dow = 1
    and date_dim.d_year in (1999,1999+1,1999+2)
    and store.s_number_employees between 200 and 295
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
    where ss_customer_sk = c_customer_sk
 order by c_last_name,c_first_name,substr(s_city,1,30), profit
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q80.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q80.sql 

with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim, store, item, promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast(&apos;2000-08-23&apos; as date)
                  and (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price &gt; 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = &apos;N&apos;
 group by s_store_id),
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim, catalog_page, item, promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast(&apos;2000-08-23&apos; as date)
                  and (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price &gt; 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = &apos;N&apos;
 group by cp_catalog_page_id),
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim, web_site, item, promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast(&apos;2000-08-23&apos; as date)
                  and (cast(&apos;2000-08-23&apos; as date) + interval &apos;30&apos; day)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price &gt; 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = &apos;N&apos;
 group by web_site_id)
 select channel, id, sum(sales) as sales, sum(returns) as returns, sum(profit) as profit
 from (select
        &apos;store channel&apos; as channel, concat(&apos;store&apos;, store_id) as id, sales, returns, profit
      from ssr
      union all
      select
        &apos;catalog channel&apos; as channel, concat(&apos;catalog_page&apos;, catalog_page_id) as id,
        sales, returns, profit
      from csr
      union all
      select
        &apos;web channel&apos; as channel, concat(&apos;web_site&apos;, web_site_id) as id, sales, returns, profit
      from  wsr) x
 group by rollup (channel, id)
 order by channel, id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q81.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q81.sql 

 with customer_total_return as
 (select
    cr_returning_customer_sk as ctr_customer_sk, ca_state as ctr_state,
        sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns, date_dim, customer_address
 where cr_returned_date_sk = d_date_sk
   and d_year = 2000
   and cr_returning_addr_sk = ca_address_sk
 group by cr_returning_customer_sk, ca_state )
 select
    c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name,
    ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,
    ca_gmt_offset,ca_location_type,ctr_total_return
 from customer_total_return ctr1, customer_address, customer
 where ctr1.ctr_total_return &gt; (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = &apos;GA&apos;
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q82.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q82.sql 

 select i_item_id, i_item_desc, i_current_price
 from item, inventory, date_dim, store_sales
 where i_current_price between 62 and 62+30
   and inv_item_sk = i_item_sk
   and d_date_sk=inv_date_sk
   and d_date between cast(&apos;2000-05-25&apos; as date) and (cast(&apos;2000-05-25&apos; as date) + interval &apos;60&apos; day)
   and i_manufact_id in (129, 270, 821, 423)
   and inv_quantity_on_hand between 100 and 500
   and ss_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q83.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q83.sql 

with sr_items as
  (select i_item_id item_id, sum(sr_return_quantity) sr_item_qty
   from store_returns, item, date_dim
   where sr_item_sk = i_item_sk
      and  d_date in (select d_date from date_dim where d_week_seq in
		      (select d_week_seq from date_dim where d_date in (cast(&apos;2000-06-30&apos; as date),cast(&apos;2000-09-27&apos; as date),cast(&apos;2000-11-17&apos; as date))))
      and sr_returned_date_sk   = d_date_sk
   group by i_item_id),
 cr_items as
  (select i_item_id item_id, sum(cr_return_quantity) cr_item_qty
  from catalog_returns, item, date_dim
  where cr_item_sk = i_item_sk
      and d_date in (select d_date from date_dim where d_week_seq in
		      (select d_week_seq from date_dim where d_date in (cast(&apos;2000-06-30&apos; as date),cast(&apos;2000-09-27&apos; as date),cast(&apos;2000-11-17&apos; as date))))
      and cr_returned_date_sk   = d_date_sk
      group by i_item_id),
 wr_items as
  (select i_item_id item_id, sum(wr_return_quantity) wr_item_qty
  from web_returns, item, date_dim
  where wr_item_sk = i_item_sk and d_date in
      (select d_date	from date_dim	where d_week_seq in
		      (select d_week_seq from date_dim where d_date in (cast(&apos;2000-06-30&apos; as date),cast(&apos;2000-09-27&apos; as date),cast(&apos;2000-11-17&apos; as date))))
    and wr_returned_date_sk = d_date_sk
  group by i_item_id)
 select sr_items.item_id
       ,sr_item_qty
       ,sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev
       ,cr_item_qty
       ,cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev
       ,wr_item_qty
       ,wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev
       ,(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average
 from sr_items, cr_items, wr_items
 where sr_items.item_id=cr_items.item_id
   and sr_items.item_id=wr_items.item_id
 order by sr_items.item_id, sr_item_qty
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q84.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q84.sql 

 select c_customer_id as customer_id
       ,coalesce(c_last_name,&apos;&apos;) + &apos;, &apos; + coalesce(c_first_name,&apos;&apos;) as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  &apos;Edgewood&apos;
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   &gt;=  38128
   and ib_upper_bound   &lt;=  38128 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q85.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q85.sql 

select
    substr(r_reason_desc,1,20), avg(ws_quantity), avg(wr_refunded_cash), avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 2000
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = &apos;M&apos;
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = &apos;Advanced Degree&apos;
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = &apos;S&apos;
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = &apos;College&apos;
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = &apos;W&apos;
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = &apos;2 yr Degree&apos;
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = &apos;United States&apos;
     and
     ca_state in (&apos;IN&apos;, &apos;OH&apos;, &apos;NJ&apos;)
     and ws_net_profit between 100 and 200
    )
    or
    (
     ca_country = &apos;United States&apos;
     and
     ca_state in (&apos;WI&apos;, &apos;CT&apos;, &apos;KY&apos;)
     and ws_net_profit between 150 and 300
    )
    or
    (
     ca_country = &apos;United States&apos;
     and
     ca_state in (&apos;LA&apos;, &apos;IA&apos;, &apos;AR&apos;)
     and ws_net_profit between 50 and 250
    )
   )
 group by r_reason_desc
 order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q86.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q86.sql 

 select sum(ws_net_paid) as total_sum, i_category, i_class,
  grouping(i_category)+grouping(i_class) as lochierarchy,
  rank() over (
 	    partition by grouping(i_category)+grouping(i_class),
 	    case when grouping(i_class) = 0 then i_category end
 	    order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales, date_dim d1, item
 where
    d1.d_month_seq between 1200 and 1200+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q87.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q87.sql 

select count(*)
 from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1200 and 1200+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1200 and 1200+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1200 and 1200+11)
) cool_cust;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q88.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q88.sql 

select  *
 from
   (select count(*) h8_30_to_9
    from store_sales, household_demographics , time_dim, store
    where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute &gt;= 30
     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count&lt;=4+2) or
          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count&lt;=2+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count&lt;=0+2))
     and store.s_store_name = &apos;ese&apos;) s1 cross join
   (select count(*) h9_to_9_30
    from store_sales, household_demographics , time_dim, store
    where ss_sold_time_sk = time_dim.t_time_sk
      and ss_hdemo_sk = household_demographics.hd_demo_sk
      and ss_store_sk = s_store_sk
      and time_dim.t_hour = 9
      and time_dim.t_minute &lt; 30
      and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count&lt;=4+2) or
          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count&lt;=2+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count&lt;=0+2))
      and store.s_store_name = &apos;ese&apos;) s2 cross join
 (select count(*) h9_30_to_10
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute &gt;= 30
     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count&lt;=4+2) or
          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count&lt;=2+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count&lt;=0+2))
     and store.s_store_name = &apos;ese&apos;) s3 cross join
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10
     and time_dim.t_minute &lt; 30
     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count&lt;=4+2) or
          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count&lt;=2+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count&lt;=0+2))
     and store.s_store_name = &apos;ese&apos;) s4 cross join
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10
     and time_dim.t_minute &gt;= 30
     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count&lt;=4+2) or
          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count&lt;=2+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count&lt;=0+2))
     and store.s_store_name = &apos;ese&apos;) s5 cross join
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute &lt; 30
     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count&lt;=4+2) or
          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count&lt;=2+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count&lt;=0+2))
     and store.s_store_name = &apos;ese&apos;) s6 cross join
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute &gt;= 30
     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count&lt;=4+2) or
          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count&lt;=2+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count&lt;=0+2))
     and store.s_store_name = &apos;ese&apos;) s7 cross join
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute &lt; 30
     and ((household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count&lt;=4+2) or
          (household_demographics.hd_dep_count = 2 and household_demographics.hd_vehicle_count&lt;=2+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count&lt;=0+2))
     and store.s_store_name = &apos;ese&apos;) s8;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q89.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q89.sql 

select *
 from(
 select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (1999) and
       ((i_category in (&apos;Books&apos;,&apos;Electronics&apos;,&apos;Sports&apos;) and
          i_class in (&apos;computers&apos;,&apos;stereo&apos;,&apos;football&apos;))
      or (i_category in (&apos;Men&apos;,&apos;Jewelry&apos;,&apos;Women&apos;) and
           i_class in (&apos;shirts&apos;,&apos;birdal&apos;,&apos;dresses&apos;)))
 group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
 where case when (avg_monthly_sales &lt;&gt; 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end &gt; 0.1
 order by sum_sales - avg_monthly_sales, s_store_name
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q90.sql" enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q90.sql

 select cast(amc as decimal(15,4))/cast(pmc as decimal(15,4)) am_pm_ratio
 from ( select count(*) amc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 8 and 8+1
         and household_demographics.hd_dep_count = 6
         and web_page.wp_char_count between 5000 and 5200) at cross join
      ( select count(*) pmc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 19 and 19+1
         and household_demographics.hd_dep_count = 6
         and web_page.wp_char_count between 5000 and 5200) pt
 order by am_pm_ratio
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q91.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q91.sql 

select
        cc_call_center_id Call_Center, cc_name Call_Center_Name, cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
 from
        call_center, catalog_returns, date_dim, customer, customer_address,
        customer_demographics, household_demographics
 where
        cr_call_center_sk        = cc_call_center_sk
 and    cr_returned_date_sk      = d_date_sk
 and    cr_returning_customer_sk = c_customer_sk
 and    cd_demo_sk               = c_current_cdemo_sk
 and    hd_demo_sk               = c_current_hdemo_sk
 and    ca_address_sk            = c_current_addr_sk
 and    d_year                   = 1998
 and    d_moy                    = 11
 and    ( (cd_marital_status     = &apos;M&apos; and cd_education_status = &apos;Unknown&apos;)
        or(cd_marital_status     = &apos;W&apos; and cd_education_status = &apos;Advanced Degree&apos;))
 and    hd_buy_potential like &apos;Unknown%&apos;
 and    ca_gmt_offset            = -7
 group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
 order by sum(cr_net_loss) desc;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q92.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q92.sql 

 select sum(ws_ext_discount_amt) as &quot;Excess Discount Amount&quot;
 from web_sales, item, date_dim
 where i_manufact_id = 350
 and i_item_sk = ws_item_sk
 and d_date between cast (&apos;2000-01-27&apos; as date) and (cast(&apos;2000-01-27&apos; as date) + interval &apos;90&apos; day)
 and d_date_sk = ws_sold_date_sk
 and ws_ext_discount_amt &gt;
     (
       SELECT 1.3 * avg(ws_ext_discount_amt)
       FROM web_sales, date_dim
       WHERE ws_item_sk = i_item_sk
         and d_date between cast (&apos;2000-01-27&apos; as date) and (cast(&apos;2000-01-27&apos; as date) + interval &apos;90&apos; day)
         and d_date_sk = ws_sold_date_sk
     )
 order by sum(ws_ext_discount_amt)
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q93.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q93.sql 

 select ss_customer_sk, sum(act_sales) sumsales
 from (select
         ss_item_sk, ss_ticket_number, ss_customer_sk,
         case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                  else (ss_quantity*ss_sales_price) end act_sales
       from store_sales
       left outer join store_returns
       on (sr_item_sk = ss_item_sk and sr_ticket_number = ss_ticket_number),
       reason
       where sr_reason_sk = r_reason_sk and r_reason_desc = &apos;reason 28&apos;) t
 group by ss_customer_sk
 order by sumsales, ss_customer_sk
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q94.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q94.sql 

 select
    count(distinct ws_order_number) as &quot;order count&quot;
   ,sum(ws_ext_ship_cost) as &quot;total shipping cost&quot;
   ,sum(ws_net_profit) as &quot;total net profit&quot;
 from
    web_sales ws1, date_dim, customer_address, web_site
 where
     d_date between cast(&apos;1999-02-01&apos; as date) and
            (cast(&apos;1999-02-01&apos; as date) + interval &apos;60&apos; day)
 and ws1.ws_ship_date_sk = d_date_sk
 and ws1.ws_ship_addr_sk = ca_address_sk
 and ca_state = &apos;IL&apos;
 and ws1.ws_web_site_sk = web_site_sk
 and web_company_name = &apos;pri&apos;
 and exists (select *
             from web_sales ws2
             where ws1.ws_order_number = ws2.ws_order_number
               and ws1.ws_warehouse_sk &lt;&gt; ws2.ws_warehouse_sk)
 and not exists(select *
                from web_returns wr1
                where ws1.ws_order_number = wr1.wr_order_number)
 order by count(distinct ws_order_number)
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q95.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q95.sql 

with ws_wh as
 (select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
  from web_sales ws1,web_sales ws2
  where ws1.ws_order_number = ws2.ws_order_number
    and ws1.ws_warehouse_sk &lt;&gt; ws2.ws_warehouse_sk)
 select
    count(distinct ws_order_number) as &quot;order count&quot;
   ,sum(ws_ext_ship_cost) as &quot;total shipping cost&quot;
   ,sum(ws_net_profit) as &quot;total net profit&quot;
 from
    web_sales ws1, date_dim, customer_address, web_site
 where
     d_date between cast (&apos;1999-02-01&apos; as date) and
            (cast(&apos;1999-02-01&apos; as date) + interval &apos;60&apos; day)
 and ws1.ws_ship_date_sk = d_date_sk
 and ws1.ws_ship_addr_sk = ca_address_sk
 and ca_state = &apos;IL&apos;
 and ws1.ws_web_site_sk = web_site_sk
 and web_company_name = &apos;pri&apos;
 and ws1.ws_order_number in (select ws_order_number
                             from ws_wh)
 and ws1.ws_order_number in (select wr_order_number
                             from web_returns,ws_wh
                             where wr_order_number = ws_wh.ws_order_number)
 order by count(distinct ws_order_number)
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q96.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q96.sql 

 select count(*)
 from store_sales, household_demographics, time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 20
     and time_dim.t_minute &gt;= 30
     and household_demographics.hd_dep_count = 7
     and store.s_store_name = &apos;ese&apos;
 order by count(*)
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q97.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q97.sql 

 with ssci as (
 select ss_customer_sk customer_sk, ss_item_sk item_sk
 from store_sales,date_dim
 where ss_sold_date_sk = d_date_sk
   and d_month_seq between 1200 and 1200 + 11
 group by ss_customer_sk, ss_item_sk),
 csci as(
  select cs_bill_customer_sk customer_sk, cs_item_sk item_sk
 from catalog_sales,date_dim
 where cs_sold_date_sk = d_date_sk
   and d_month_seq between 1200 and 1200 + 11
 group by cs_bill_customer_sk, cs_item_sk)
 select sum(case when ssci.customer_sk is not null and csci.customer_sk is null then 1 else 0 end) store_only
       ,sum(case when ssci.customer_sk is null and csci.customer_sk is not null then 1 else 0 end) catalog_only
       ,sum(case when ssci.customer_sk is not null and csci.customer_sk is not null then 1 else 0 end) store_and_catalog
 from ssci full outer join csci on (ssci.customer_sk=csci.customer_sk
                                and ssci.item_sk = csci.item_sk)
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q98.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q98.sql 

select i_item_desc, i_category, i_class, i_current_price
      ,sum(ss_ext_sales_price) as itemrevenue
      ,sum(ss_ext_sales_price)*100/sum(sum(ss_ext_sales_price)) over
          (partition by i_class) as revenueratio
from
	 store_sales, item, date_dim
where
	ss_item_sk = i_item_sk
  	and i_category in (&apos;Sports&apos;, &apos;Books&apos;, &apos;Home&apos;)
  	and ss_sold_date_sk = d_date_sk
	and d_date between cast(&apos;1999-02-22&apos; as date)
				and (cast(&apos;1999-02-22&apos; as date) + interval &apos;30&apos; day)
group by
	i_item_id, i_item_desc, i_category, i_class, i_current_price
order by
	i_category, i_class, i_item_id, i_item_desc, revenueratio</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q99.sql " enabled="true">
            <stringProp name="dataSource">${a}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">--q99.sql 

 select
    substr(w_warehouse_name,1,20), sm_type, cc_name
   ,sum(case when (cs_ship_date_sk - cs_sold_date_sk &lt;= 30 ) then 1 else 0 end)  as &quot;30 days&quot;
   ,sum(case when (cs_ship_date_sk - cs_sold_date_sk &gt; 30) and
                  (cs_ship_date_sk - cs_sold_date_sk &lt;= 60) then 1 else 0 end )  as &quot;31-60 days&quot;
   ,sum(case when (cs_ship_date_sk - cs_sold_date_sk &gt; 60) and
                  (cs_ship_date_sk - cs_sold_date_sk &lt;= 90) then 1 else 0 end)  as &quot;61-90 days&quot;
   ,sum(case when (cs_ship_date_sk - cs_sold_date_sk &gt; 90) and
                  (cs_ship_date_sk - cs_sold_date_sk &lt;= 120) then 1 else 0 end)  as &quot;91-120 days&quot;
   ,sum(case when (cs_ship_date_sk - cs_sold_date_sk  &gt; 120) then 1 else 0 end)  as &quot;&gt;120 days&quot;
 from
    catalog_sales, warehouse, ship_mode, call_center, date_dim
 where
     d_month_seq between 1200 and 1200 + 11
 and cs_ship_date_sk   = d_date_sk
 and cs_warehouse_sk   = w_warehouse_sk
 and cs_ship_mode_sk   = sm_ship_mode_sk
 and cs_call_center_sk = cc_call_center_sk
 group by
    substr(w_warehouse_name,1,20), sm_type, cc_name
 order by substr(w_warehouse_name,1,20), sm_type, cc_name
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
