SQLCli Release 0.0.61
SQL> connect admin/123456
Database connected.
SQL> start CORE_单行语句与基本游标支持.sql
SQL> --    Description: 测试单行语句与基本游标支持
   > --    Date:         2020-06-10
   > --    Author:       丁婷
   > 
   > --256 E111 Single row SELECT statement
SQL> drop table if exists Test_Single_Row_001;
0 rows affected
SQL> drop table if exists Test_Single_Row_002;
0 rows affected
SQL> CREATE TABLE Test_Single_Row_001 (
   > 	EMPNO INT,
   > 	ENAME VARCHAR(20),
   > 	JOB VARCHAR(20),
   > 	MGR INT,
   > 	HIREDATE DATE,
   > 	SAL INT,
   > 	COMM INT,
   > 	DEPTNO INT
   > );
0 rows affected
SQL> INSERT INTO Test_Single_Row_001 VALUES 
   > (7369,'SMITH','CLERK',7902,'1980-12-17',800,NULL,20),
   > (7499,'ALLEN','SALESMAN',7698,'1981-2-20',1600,300,30),
   > (7521,'WARD','SALESMAN',7698,'1981-2-22',1250,500,30),
   > (7566,'JONES','MANAGER',7839,'1981-4-2',2975,NULL,20),
   > (7654,'MARTIN','SALESMAN',7698,'1981-9-28',1150,1400,30),
   > (7698,'BLAKE','MANAGER',7839,'1981-5-1',2850,NULL,30),
   > (7782,'CLARK','MANAGER',7839,'1981-6-9',2450,NULL,10),
   > (7839,'KING','PRESIDENT',NULL,'1981-11-17',5000,NULL,10),
   > (7844,'TURNER','SALESMAN',7698,'1981-9-8',1500,0,30),
   > (7900,'JAMES','CLERK',7698,'1981-12-8',950,NULL,30),
   > (7902,'FORD','ANALYST',7566,'1981-12-8',3000,NULL,20),
   > (7934,'MILLER','CLERK',7782,'1982-1-23',1300,NULL,10);
12 rows affected
SQL> CREATE TABLE Test_Single_Row_002 (
   > DEPTNO INT,
   > DNAME VARCHAR(20),
   > LOC VARCHAR(20)
   > );
0 rows affected
SQL> INSERT INTO Test_Single_Row_002 VALUES 
   > (10,'ACCOUNTING','NEW YORK'),
   > (20,'RESEARCH','DALLAS'),
   > (30,'SALES','CHICAGO'),
   > (40,'OPERATIONS','BOSTON');
4 rows affected
SQL> SELECT sal + (SELECT max(DEPTNO) FROM Test_Single_Row_002) FROM Test_Single_Row_001;
+------+
| C1   |
+------+
| 3015 |
| 1190 |
| 2890 |
| 840  |
| 1640 |
| 1290 |
| 2490 |
| 5040 |
| 1540 |
| 990  |
| 3040 |
| 1340 |
+------+
12 rows selected.
SQL> drop table if exists Test_Single_Row_001;
0 rows affected
SQL> drop table if exists Test_Single_Row_002;
0 rows affected
SQL> 
SQL> --1276 E121-01 DECLARE CURSOR
SQL> DROP PROCEDURE sp_opencursor_test_001 IF EXISTS CASCADE;
0 rows affected
SQL> drop table t_procedure_test_001 IF EXISTS ;
0 rows affected
SQL> drop table t_procedure_test_002 IF EXISTS;
0 rows affected
SQL> create table t_procedure_test_001(
   >   projid int, 
   >   projectdesc VARCHAR(30), 
   >   projectstatus varchar(50)
   >   );
0 rows affected
SQL> insert into t_procedure_test_001 values 
   >  (1,'a','1'),
   >  (2,'b','0'),
   >  (3,'c','1'),
   >  (4,'d','0'),
   >  (5,'e','1'),
   >  (6,'f','0');
6 rows affected
SQL> create table t_procedure_test_002(
   > c1 int, 
   > c2 varchar(30), 
   > c3 int
   > );
0 rows affected
SQL> CREATE PROCEDURE sp_opencursor_test_001()
   >  BEGIN
   >  DECLARE var1 INTEGER DEFAULT 0;
   >  DECLARE var2 CHARACTER(30);
   >  DECLARE projcursor CURSOR FOR
   >  SELECT projid, projectdesc FROM t_procedure_test_001 ORDER BY projid;
   >  OPEN projcursor;
   >  L1: WHILE (SQLSTATE = '00000')
   >  DO
   >  FETCH projcursor INTO var1, var2;
   >  insert into t_procedure_test_002 values(var1, var2,SQLCODE);
   >  IF VAR1 = 6 THEN
   >    insert into t_procedure_test_002 values(100, SQLSTATE,SQLCODE);
   >   LEAVE L1;
   >   END IF;
   >  END WHILE;
   >  CLOSE projcursor;
   >  END;
   > /
0 rows affected
SQL> delete from t_procedure_test_002;
0 rows affected
SQL> CALL  sp_opencursor_test_001();
0 rows affected
SQL> SELECT * FROM t_procedure_test_002 ORDER BY C1;
+-----+--------------------------------+----+
| C1  | C2                             | C3 |
+-----+--------------------------------+----+
| 1   | a                              | 0  |
| 2   | b                              | 0  |
| 3   | c                              | 0  |
| 4   | d                              | 0  |
| 5   | e                              | 0  |
| 6   | f                              | 0  |
| 100 | 00000                          | 0  |
+-----+--------------------------------+----+
7 rows selected.
SQL> 
SQL> 
SQL> --1277 E121-02 ORDER BY columns need not be in select list
SQL> drop procedure sp_opencursor_test_002 if exists cascade;
0 rows affected
SQL> drop table t_procedure_test_003 if exists cascade;
0 rows affected
SQL> create table t_procedure_test_003(
   > id int,
   > name varchar(200)
   > );
0 rows affected
SQL> insert into t_procedure_test_003 values
   > (1,'qq'),
   > (2,'aa'),
   > (3,'zz'),
   > (4,'ww'),
   > (5,'ss'),
   > (6,'xx');
6 rows affected
SQL> CREATE PROCEDURE sp_opencursor_test_002()
   >  BEGIN
   >  DECLARE var1 INTEGER DEFAULT 0;
   >  DECLARE var2 CHARACTER(30);
   >  DECLARE projcursor CURSOR FOR
   >  SELECT id FROM t_procedure_test_003 ORDER BY name;
   >  open projcursor;
   >  insert into t_procedure_test_003 values(100,'qqqaaazzz');
   >  close projcursor;
   >  END;
   > /
0 rows affected
SQL>  call sp_opencursor_test_002();
0 rows affected
SQL> drop procedure sp_opencursor_test_002 if exists cascade;
0 rows affected
SQL> drop table t_procedure_test_003 if exists cascade;
0 rows affected
SQL> 
SQL> 
SQL> --1280 E121-06 Positioned UPDATE statement and E121-07 Positioned DELETE STATEMENT
SQL> DROP PROCEDURE sp_opencursor_test_003 IF EXISTS CASCADE;
0 rows affected
SQL> DROP PROCEDURE sp_opencursor_test_004 IF EXISTS CASCADE;
0 rows affected
SQL> DROP TABLE t_procedure_test_004 IF EXISTS CASCADE;
0 rows affected
SQL> create table t_procedure_test_004 (col1 int primary key, col2 int) ;
0 rows affected
SQL> insert into t_procedure_test_004 values
   > (1,2),
   > (3,4),
   > (5,6),
   > (7,8),
   > (9,10);
5 rows affected
SQL> create procedure sp_opencursor_test_003()
   >   modifies sql data
   >   label_1: begin atomic
   >     for_label: for for_variable as cursor1 cursor for select * from t_procedure_test_004 for update do
   >       update t_procedure_test_004 set col2 = 1000  where current of cursor1;
   >     end for for_label;
   >   end label_1;
   > /
0 rows affected
SQL> call sp_opencursor_test_003();
0 rows affected
SQL> select * from t_procedure_test_004 order by col1;
+------+------+
| COL1 | COL2 |
+------+------+
| 1    | 1000 |
| 3    | 1000 |
| 5    | 1000 |
| 7    | 1000 |
| 9    | 1000 |
+------+------+
5 rows selected.
SQL> create procedure sp_opencursor_test_004()
   >   modifies sql data
   >   label_1: begin atomic
   >     for_label: for for_variable as cursor1 cursor for select * from t_procedure_test_004 for update do
   >       delete from t_procedure_test_004  where current of cursor1;
   >     end for for_label;
   >   end label_1;
   > /
0 rows affected
SQL> call sp_opencursor_test_004();
0 rows affected
SQL> select count(*) from t_procedure_test_004;
+----+
| C1 |
+----+
| 0  |
+----+
1 row selected.
SQL> DROP PROCEDURE sp_opencursor_test_003 IF EXISTS CASCADE;
0 rows affected
SQL> DROP PROCEDURE sp_opencursor_test_004 IF EXISTS CASCADE;
0 rows affected
SQL> DROP TABLE t_procedure_test_004 IF EXISTS CASCADE;
0 rows affected
SQL> 
SQL> --1283 E121-10 FETCH statement: implicit NEXT
SQL> DROP PROCEDURE sp_opencursor_test_005 IF EXISTS CASCADE;
0 rows affected
SQL> drop table if exists t_procedure_test_005;
0 rows affected
SQL> drop table if exists t_procedure_test_006;
0 rows affected
SQL> create table t_procedure_test_005(
   > c1 int, 
   > c2 varchar(30), 
   > sqlcode int, 
   > sqlstate varchar(30), 
   > activity int
   > );
0 rows affected
SQL> create table t_procedure_test_006(
   >   projid int, 
   >   projectdesc VARCHAR(30), 
   >   projectstatus varchar(50)
   >  );
0 rows affected
SQL> insert into t_procedure_test_006 values 
   > (1,'a','1'),
   > (2,'b','0'),
   > (3,'c','1'),
   > (4,'d','0'),
   > (5,'e','1'),
   > (6,'f','0');
6 rows affected
SQL> CREATE PROCEDURE sp_opencursor_test_005 (INOUT par1 INTEGER, INOUT par2 VARCHAR(30))
   >  BEGIN
   >  DECLARE var1 INTEGER DEFAULT 0;
   >  DECLARE projcursor CURSOR FOR
   >  SELECT projid, projectdesc FROM t_procedure_test_006 ORDER BY projid;
   >  OPEN projcursor;
   >  Label1:LOOP
   >  set var1 = var1 + 1;
   >  FETCH projcursor INTO par1, par2;
   >  insert into t_procedure_test_005  values(var1, par2, :SQLCODE, :SQLSTATE, :ACTIVITY_COUNT);
   >  IF (SQLSTATE = '02000') THEN
   >  insert into t_procedure_test_005  values(666, par2, :SQLCODE, :SQLSTATE, :ACTIVITY_COUNT);
   >  LEAVE label1;
   >  END IF;
   >  IF (var1 >= 7) THEN
   >   insert into t_procedure_test_005  values(888, par2, :SQLCODE, :SQLSTATE, :ACTIVITY_COUNT);
   >   LEAVE label1;
   >   END IF;
   >  END LOOP label1;
   >  insert into t_procedure_test_005  values(1000, 'QQQ', :SQLCODE, :SQLSTATE, :ACTIVITY_COUNT);
   >  CLOSE projcursor;
   >  END;
   > /
0 rows affected
SQL>  delete from t_procedure_test_005;
0 rows affected
SQL>  call sp_opencursor_test_005(1,'0');
0 rows affected
SQL>  SELECT * FROM t_procedure_test_005 ORDER BY C1;
+------+-----+---------+----------+----------+
| C1   | C2  | SQLCODE | SQLSTATE | ACTIVITY |
+------+-----+---------+----------+----------+
| 1    | a   | 0       | 00000    | 1        |
| 2    | b   | 0       | 00000    | 1        |
| 3    | c   | 0       | 00000    | 1        |
| 4    | d   | 0       | 00000    | 1        |
| 5    | e   | 0       | 00000    | 1        |
| 6    | f   | 0       | 00000    | 1        |
| 7    | f   | 0       | 02000    | 0        |
| 888  | f   | 0       | 00000    | 0        |
| 1000 | QQQ | 0       | 00000    | 0        |
+------+-----+---------+----------+----------+
9 rows selected.
SQL> exit
Disconnected.
