SQLCli Release 0.0.45
SQL> start varchar/external_table_basic_type-varchar.sql
SQL> loaddriver E:\pycharmProject\driver\linkoopdb-jdbc-2.2.2.jar com.datapps.linkoopdb.jdbc.JdbcDriver
driver file [E:\pycharmProject\driver\linkoopdb-jdbc-2.2.2.jar] does not exist.
SQL> connect admin/123456@jdbc:linkoopdb:tcp://192.168.1.73:9105/ldb
Database connected.
SQL> set echo on
SQL> 
SQL> 
SQL> --    Description: varchar边界值测试,varchar的范围64000
   > --    Date:         2020-05-28
   > --    Author:       丁婷
   > --    hdfs external csv格式
   > 
   > 
   > -- 删除t_external_hdfs_csv_varchar_001表
SQL> drop table if exists t_external_hdfs_csv_varchar_001;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_001，测试创建长度大于64000，实际创建成功
SQL> create external table t_external_hdfs_csv_varchar_001(
   > a1 varchar(64001)
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_001.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_002表
SQL> drop table if exists t_external_hdfs_csv_varchar_002;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_002，测试长度为64000，数据大小为100000，使用成功
SQL> create external table t_external_hdfs_csv_varchar_002(
   > a1 varchar(64000) 
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_001.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_002的数据
SQL> select length(a1) from t_external_hdfs_csv_varchar_002;
+--------+
| C1     |
+--------+
| 100000 |
+--------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_003表
SQL> drop table if exists t_external_hdfs_csv_varchar_003;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_003，测试值带双引号,"asdf"
SQL> create external table t_external_hdfs_csv_varchar_003(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_003.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_003的数据,实际结果返回asdf
SQL> select * from t_external_hdfs_csv_varchar_003;
+------+
| A1   |
+------+
| asdf |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_004表
SQL> drop table if exists t_external_hdfs_csv_varchar_004;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_004，测试值为单引号，值为'asdf'
SQL> create external table t_external_hdfs_csv_varchar_004(
   > a1 varchar(30)   
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_004.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_004的数据,返回结果为'asdf'
SQL> select * from t_external_hdfs_csv_varchar_004;
+--------+
| A1     |
+--------+
| 'asdf' |
+--------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_005表
SQL> drop table if exists t_external_hdfs_csv_varchar_005;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_005，测试值不带引号，为asdf
SQL> create external table t_external_hdfs_csv_varchar_005(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_005.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_005的数据,实际返回结果为asdf
SQL> select * from t_external_hdfs_csv_varchar_005;
+------+
| A1   |
+------+
| asdf |
+------+
1 row selected.
SQL> 
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_007表
SQL> drop table if exists t_external_hdfs_csv_varchar_007;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_007，测试varvarchar中文字符，值为'你好'
SQL> create external table t_external_hdfs_csv_varchar_007(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_zhongwen.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_007的数据,实际返回你好
SQL> select * from t_external_hdfs_csv_varchar_007;
+------+
| A1   |
+------+
| 你好 |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_008表
SQL> drop table if exists t_external_hdfs_csv_varchar_008;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_008，测试varvarchar中英文字符，值为'你好asdf'
SQL> create external table t_external_hdfs_csv_varchar_008(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_zhongyinghunhe.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_008的数据，返回值为你好asdf
SQL> select * from t_external_hdfs_csv_varchar_008;
+----------+
| A1       |
+----------+
| 你好asdf |
+----------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_009表
SQL> drop table if exists t_external_hdfs_csv_varchar_009;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_009，测试varvarchar英文特殊字符，值为'#$%^'
SQL> create external table t_external_hdfs_csv_varchar_009(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_yingwenzifu.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_009的数据，实际返回为#$%^
SQL> select * from t_external_hdfs_csv_varchar_009;
+------+
| A1   |
+------+
| #$%^ |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_010表
SQL> drop table if exists t_external_hdfs_csv_varchar_010;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_010，测试varvarchar中文特殊字符，值为'@#￥%……'
SQL> create external table t_external_hdfs_csv_varchar_010(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_zhongwenzifu.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_010的数据，实际返回为@#￥%……
SQL> select * from t_external_hdfs_csv_varchar_010;
+---------+
| A1      |
+---------+
| @#￥%…… |
+---------+
1 row selected.
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_011表
SQL> drop table if exists t_external_hdfs_csv_varchar_011;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_011，测试varchar为数字，值为'123456789'
SQL> create external table t_external_hdfs_csv_varchar_011(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_007.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_011的数据，实际返回为'123456789'
SQL> select * from t_external_hdfs_csv_varchar_011;
+-------------+
| A1          |
+-------------+
| '123456789' |
+-------------+
1 row selected.
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_012，测试date类型，时间为2020-05-08
SQL> create external table t_external_hdfs_csv_varchar_012(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/type_date.csv')
   > format 'csv' (delimiter ',');
java.sql.SQLSyntaxErrorException: object name already exists: T_EXTERNAL_HDFS_CSV_VARCHAR_012 in statement [create external table t_external_hdfs_csv_varchar_012(
a1 varchar(30)  
)location('hdfs://node73:8020/user/testdb73/external_file/csv_type/type_date.csv')
format 'csv' (delimiter ',')]
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_012的数据，实际返回为2020-05-08
SQL> select * from t_external_hdfs_csv_varchar_012;
+------------+
| A1         |
+------------+
| 2020-05-08 |
+------------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_013表
SQL> drop table if exists t_external_hdfs_csv_varchar_013;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_013，测试timestamp类型,时间为2020-01-01 00:00:01
SQL> create external table t_external_hdfs_csv_varchar_013(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/type_timestamp.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_013的数据，实际返回 为2020-05-08 12:19:01
SQL> select * from t_external_hdfs_csv_varchar_013;
+---------------------+
| A1                  |
+---------------------+
| 2020-05-08 12:19:01 |
+---------------------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_015表
SQL> drop table if exists t_external_hdfs_csv_varchar_015;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_015，测试空值
SQL> create external table t_external_hdfs_csv_varchar_015(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/type_kongzhi.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_015的数据，实际返回为''
SQL> select * from t_external_hdfs_csv_varchar_015;
+----+
| A1 |
+----+
| '' |
+----+
1 row selected.
SQL>  
SQL>  
SQL> -- 删除t_external_hdfs_csv_varchar_016表
SQL> drop table if exists t_external_hdfs_csv_varchar_016;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_016，测试空格 
SQL> create external table t_external_hdfs_csv_varchar_016(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/type_kongge.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_016的数据,实际返回为' '
SQL> select * from t_external_hdfs_csv_varchar_016;
+-----+
| A1  |
+-----+
| ' ' |
+-----+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_017表
SQL> drop table if exists t_external_hdfs_csv_varchar_017;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_017，测试null 
SQL> create external table t_external_hdfs_csv_varchar_017(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/type_null.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_017的数据，实际返回为null
SQL> select * from t_external_hdfs_csv_varchar_017;
+------+
| A1   |
+------+
| null |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_018表
SQL> drop table if exists t_external_hdfs_csv_varchar_018;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_018，测试NULL  
SQL> create external table t_external_hdfs_csv_varchar_018(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/type_NULL.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_018的数据，实际返回为NULL
SQL> select * from t_external_hdfs_csv_varchar_018;
+------+
| A1   |
+------+
| NULL |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_019表
SQL> drop table if exists t_external_hdfs_csv_varchar_019;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_019，测试int类型，值为1147483647
SQL> create external table t_external_hdfs_csv_varchar_019(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_008.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_019的数据,实际返回为1147483647
SQL> select * from t_external_hdfs_csv_varchar_019;
+------------+
| A1         |
+------------+
| 1147483647 |
+------------+
1 row selected.
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_020表
SQL> drop table if exists t_external_hdfs_csv_varchar_020;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_020，测试double类型，值为 1147483647.2
SQL> create external table t_external_hdfs_csv_varchar_020(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_009.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_020的数据，实际返回为 1147483647.2
SQL> select * from t_external_hdfs_csv_varchar_020;
+--------------+
| A1           |
+--------------+
| 1147483647.2 |
+--------------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_021表
SQL> drop table if exists t_external_hdfs_csv_varchar_021;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_021，测试boolean类型，值为false
SQL> create external table t_external_hdfs_csv_varchar_021(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/boolean_false.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_021的数据，实际返回为false
SQL> select * from t_external_hdfs_csv_varchar_021;
+-------+
| A1    |
+-------+
| false |
+-------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_hdfs_csv_varchar_022表
SQL> drop table if exists t_external_hdfs_csv_varchar_022;
0 rows affected
SQL> 
SQL> -- 创建表t_external_hdfs_csv_varchar_022，测试boolean类型，值为true
SQL> create external table t_external_hdfs_csv_varchar_022(
   > a1 varchar(30)  
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/boolean_true.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_hdfs_csv_varchar_022的数据,实际返回为true
SQL> select * from t_external_hdfs_csv_varchar_022;
+------+
| A1   |
+------+
| true |
+------+
1 row selected.
SQL> 
SQL> -- 删除 t_external_hdfs_csv_varchar_023 表
SQL> drop table if exists t_external_hdfs_csv_varchar_023;
0 rows affected
SQL> 
SQL> -- 创建表 t_external_hdfs_csv_varchar_023，测试长度为10，字符长度为20
SQL> create external table t_external_hdfs_csv_varchar_023(
   > a1 varchar(10)
   > )location('hdfs://node73:8020/user/testdb73/external_file/csv_type/varchar_002.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询 t_external_hdfs_csv_varchar_023 的数据,实际返回1234567890
SQL> select * from t_external_hdfs_csv_varchar_023;
+------------+
| A1         |
+------------+
| 1234567890 |
+------------+
1 row selected.
SQL> 
SQL> 
SQL> -- ldbdist external  csv 
   > -- 删除t_external_ldbdist_csv_varchar_001表
SQL> drop table if exists t_external_ldbdist_csv_varchar_001;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_001，测试创建长度大于64000，实际创建成功
SQL> create external table t_external_ldbdist_csv_varchar_001(
   > a1 varchar(64001)
   > )location('ldbdist://node74:54321/csv/varchar_001.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_002表
SQL> drop table if exists t_external_ldbdist_csv_varchar_002;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_002，测试长度为64000，数据大小为100000，使用成功
SQL> create external table t_external_ldbdist_csv_varchar_002(
   > a1 varchar(10) 
   > )location('ldbdist://node74:54321/csv/varchar_001.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_002的数据
SQL> select * from t_external_ldbdist_csv_varchar_002;
+------------+
| A1         |
+------------+
| KOWjsLYXdn |
+------------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_003表
SQL> drop table if exists t_external_ldbdist_csv_varchar_003;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_003，测试值带双引号,"asdf"
SQL> create external table t_external_ldbdist_csv_varchar_003(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_003.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_003的数据,实际结果返回asdf
SQL> select * from t_external_ldbdist_csv_varchar_003;
+------+
| A1   |
+------+
| asdf |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_004表
SQL> drop table if exists t_external_ldbdist_csv_varchar_004;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_004，测试值为单引号，值为'asdf'
SQL> create external table t_external_ldbdist_csv_varchar_004(
   > a1 varchar(30)   
   > )location('ldbdist://node74:54321/csv/varchar_004.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_004的数据,返回结果为'asdf'
SQL> select * from t_external_ldbdist_csv_varchar_004;
+--------+
| A1     |
+--------+
| 'asdf' |
+--------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_005表
SQL> drop table if exists t_external_ldbdist_csv_varchar_005;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_005，测试值不带引号，为asdf
SQL> create external table t_external_ldbdist_csv_varchar_005(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_005.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_005的数据,实际返回结果为asdf
SQL> select * from t_external_ldbdist_csv_varchar_005;
+------+
| A1   |
+------+
| asdf |
+------+
1 row selected.
SQL> 
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_007表
SQL> drop table if exists t_external_ldbdist_csv_varchar_007;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_007，测试varvarchar中文字符，值为'你好'
SQL> create external table t_external_ldbdist_csv_varchar_007(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_zhongwen.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_007的数据,实际返回你好
SQL> select * from t_external_ldbdist_csv_varchar_007;
+------+
| A1   |
+------+
| 你好 |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_008表
SQL> drop table if exists t_external_ldbdist_csv_varchar_008;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_008，测试varvarchar中英文字符，值为'你好asdf'
SQL> create external table t_external_ldbdist_csv_varchar_008(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_zhongyinghunhe.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_008的数据，返回值为你好asdf
SQL> select * from t_external_ldbdist_csv_varchar_008;
+----------+
| A1       |
+----------+
| 你好asdf |
+----------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_009表
SQL> drop table if exists t_external_ldbdist_csv_varchar_009;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_009，测试varvarchar英文特殊字符，值为'#$%^'
SQL> create external table t_external_ldbdist_csv_varchar_009(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_yingwenzifu.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_009的数据，实际返回为#$%^
SQL> select * from t_external_ldbdist_csv_varchar_009;
+------+
| A1   |
+------+
| #$%^ |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_010表
SQL> drop table if exists t_external_ldbdist_csv_varchar_010;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_010，测试varvarchar中文特殊字符，值为'@#￥%……'
SQL> create external table t_external_ldbdist_csv_varchar_010(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_zhongwenzifu.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_010的数据，实际返回为@#￥%……
SQL> select * from t_external_ldbdist_csv_varchar_010;
+---------+
| A1      |
+---------+
| @#￥%…… |
+---------+
1 row selected.
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_011表
SQL> drop table if exists t_external_ldbdist_csv_varchar_011;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_011，测试varchar为数字，值为'123456789'
SQL> create external table t_external_ldbdist_csv_varchar_011(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_007.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_011的数据，实际返回为'123456789'
SQL> select * from t_external_ldbdist_csv_varchar_011;
+-------------+
| A1          |
+-------------+
| '123456789' |
+-------------+
1 row selected.
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_012，测试date类型，时间为2020-05-08
SQL> create external table t_external_ldbdist_csv_varchar_012(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/type_date.csv')
   > format 'csv' (delimiter ',');
java.sql.SQLSyntaxErrorException: object name already exists: T_EXTERNAL_LDBDIST_CSV_VARCHAR_012 in statement [create external table t_external_ldbdist_csv_varchar_012(
a1 varchar(30)  
)location('ldbdist://node74:54321/csv/type_date.csv')
format 'csv' (delimiter ',')]
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_012的数据，实际返回为2020-05-08
SQL> select * from t_external_ldbdist_csv_varchar_012;
+------------+
| A1         |
+------------+
| 2020-05-08 |
+------------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_013表
SQL> drop table if exists t_external_ldbdist_csv_varchar_013;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_013，测试timestamp类型,时间为2020-01-01 00:00:01
SQL> create external table t_external_ldbdist_csv_varchar_013(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/type_timestamp.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_013的数据，实际返回 为2020-05-08 12:19:01
SQL> select * from t_external_ldbdist_csv_varchar_013;
+---------------------+
| A1                  |
+---------------------+
| 2020-05-08 12:19:01 |
+---------------------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_015表
SQL> drop table if exists t_external_ldbdist_csv_varchar_015;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_015，测试空值
SQL> create external table t_external_ldbdist_csv_varchar_015(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/type_kongzhi.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_015的数据，实际返回为''
SQL> select * from t_external_ldbdist_csv_varchar_015;
+----+
| A1 |
+----+
| '' |
+----+
1 row selected.
SQL>  
SQL>  
SQL> -- 删除t_external_ldbdist_csv_varchar_016表
SQL> drop table if exists t_external_ldbdist_csv_varchar_016;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_016，测试空格 
SQL> create external table t_external_ldbdist_csv_varchar_016(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/type_kongge.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_016的数据,实际返回为' '
SQL> select * from t_external_ldbdist_csv_varchar_016;
+-----+
| A1  |
+-----+
| ' ' |
+-----+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_017表
SQL> drop table if exists t_external_ldbdist_csv_varchar_017;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_017，测试null 
SQL> create external table t_external_ldbdist_csv_varchar_017(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/type_null.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_017的数据，实际返回为null
SQL> select * from t_external_ldbdist_csv_varchar_017;
+------+
| A1   |
+------+
| null |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_018表
SQL> drop table if exists t_external_ldbdist_csv_varchar_018;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_018，测试NULL  
SQL> create external table t_external_ldbdist_csv_varchar_018(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/type_NULL.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_018的数据，实际返回为NULL
SQL> select * from t_external_ldbdist_csv_varchar_018;
+------+
| A1   |
+------+
| NULL |
+------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_019表
SQL> drop table if exists t_external_ldbdist_csv_varchar_019;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_019，测试int类型，值为1147483647
SQL> create external table t_external_ldbdist_csv_varchar_019(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_008.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_019的数据,实际返回为1147483647
SQL> select * from t_external_ldbdist_csv_varchar_019;
+------------+
| A1         |
+------------+
| 1147483647 |
+------------+
1 row selected.
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_020表
SQL> drop table if exists t_external_ldbdist_csv_varchar_020;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_020，测试double类型，值为 1147483647.2
SQL> create external table t_external_ldbdist_csv_varchar_020(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/varchar_009.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_020的数据，实际返回为 1147483647.2
SQL> select * from t_external_ldbdist_csv_varchar_020;
+--------------+
| A1           |
+--------------+
| 1147483647.2 |
+--------------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_021表
SQL> drop table if exists t_external_ldbdist_csv_varchar_021;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_021，测试boolean类型，值为false
SQL> create external table t_external_ldbdist_csv_varchar_021(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/boolean_false.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_021的数据，实际返回为false
SQL> select * from t_external_ldbdist_csv_varchar_021;
+-------+
| A1    |
+-------+
| false |
+-------+
1 row selected.
SQL> 
SQL> 
SQL> -- 删除t_external_ldbdist_csv_varchar_022表
SQL> drop table if exists t_external_ldbdist_csv_varchar_022;
0 rows affected
SQL> 
SQL> -- 创建表t_external_ldbdist_csv_varchar_022，测试boolean类型，值为true
SQL> create external table t_external_ldbdist_csv_varchar_022(
   > a1 varchar(30)  
   > )location('ldbdist://node74:54321/csv/boolean_true.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询t_external_ldbdist_csv_varchar_022的数据,实际返回为true
SQL> select * from t_external_ldbdist_csv_varchar_022;
+------+
| A1   |
+------+
| true |
+------+
1 row selected.
SQL> 
SQL> -- 删除 t_external_ldbdist_csv_varchar_023 表
SQL> drop table if exists t_external_ldbdist_csv_varchar_023;
0 rows affected
SQL> 
SQL> -- 创建表 t_external_ldbdist_csv_varchar_023，测试长度为10，字符长度为20
SQL> create external table t_external_ldbdist_csv_varchar_023(
   > a1 varchar(10)
   > )location('ldbdist://node74:54321/csv/varchar_002.csv')
   > format 'csv' (delimiter ',');
0 rows affected
SQL>   
SQL> --查询 t_external_ldbdist_csv_varchar_023 的数据,实际返回1234567890
SQL> select * from t_external_ldbdist_csv_varchar_023;
+------------+
| A1         |
+------------+
| 1234567890 |
+------------+
1 row selected.
SQL> 
SQL> 
SQL> 
SQL> 
SQL> -- hdfs external parquet 
   > 
   > -- 删除表
SQL> drop table if exists t_external_hdfs_parquet_varchar_001;
0 rows affected
SQL> drop table if exists t_external_hdfs_parquet_varchar_002;
0 rows affected
SQL> drop table if exists t_external_hdfs_parquet_varchar_003;
0 rows affected
SQL> drop table if exists t_external_hdfs_parquet_varchar_004;
0 rows affected
SQL> 
SQL> -- 测试创建长度大于64000,创建报错
SQL> create external table t_external_hdfs_parquet_varchar_001(
   > a1 varchar(64001)
   > )location('hdfs://node73:8020/user/testdb73/external_file/type_parquet/varchar1')
   > FORMAT 'parquet';
0 rows affected
SQL> 
SQL> -- 测试长度为64000，数据大小为100000
SQL> create external table t_external_hdfs_parquet_varchar_002(
   > a1 varchar(10) 
   > )location('hdfs://node73:8020/user/testdb73/external_file/type_parquet/varchar1')
   > FORMAT 'parquet';
0 rows affected
SQL> 
SQL> -- 返回10个字符
SQL> select * from t_external_hdfs_parquet_varchar_002;
java.sql.SQLException: Worker execution: ldb worker caused error: db catalyst: adapt to spark error: cache error : java.util.concurrent.ExecutionException: org.apache.spark.sql.AnalysisException: Unable to infer schema for Parquet. It must be specified manually.;
	at com.google.common.util.concurrent.AbstractFuture.getDoneValue(AbstractFuture.java:503)
	at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:462)
	at com.google.common.util.concurrent.AbstractFuture$TrustedFuture.get(AbstractFuture.java:79)
	at com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:142)
	at com.google.common.cache.LocalCache$Segment.getAndRecordStats(LocalCache.java:2453)
	at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2417)
	at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2299)
	at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2212)
	at com.google.common.cache.LocalCache.get(LocalCache.java:4147)
	at com.google.common.cache.LocalCache$LocalManualCache.get(LocalCache.java:5053)
	at com.datapps.linkoopdb.worker.spark.converter.LogicalPlanConverter.convertLogicalRelation(LogicalPlanConverter.java:1256)
	at com.datapps.linkoopdb.worker.spark.converter.LogicalPlanConverter.convert(LogicalPlanConverter.java:217)
	at com.datapps.linkoopdb.worker.spark.converter.LogicalPlanConverter.convertProject(LogicalPlanConverter.java:1671)
	at com.datapps.linkoopdb.worker.spark.converter.LogicalPlanConverter.convert(LogicalPlanConverter.java:203)
	at com.datapps.linkoopdb.worker.spark.SparkWorker.buildDatasetByRelNode(SparkWorker.java:2491)
	at com.datapps.linkoopdb.worker.spark.SparkWorker.lambda$getIterByRelNode$29(SparkWorker.java:2452)
	at com.datapps.linkoopdb.worker.spark.SparkSessionManager.submitStatement(SparkSessionManager.java:193)
	at com.datapps.linkoopdb.worker.spark.SparkWorker.getIterByRelNode(SparkWorker.java:2449)
	at com.datapps.linkoopdb.worker.spark.SparkWorker.receiveMessage(SparkWorker.java:623)
	at sun.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.caucho.hessian.server.HessianSkeleton.invoke(HessianSkeleton.java:302)
	at com.caucho.hessian.server.HessianSkeleton.invoke(HessianSkeleton.java:198)
	at com.caucho.hessian.server.HessianServlet.invoke(HessianServlet.java:423)
	at com.caucho.hessian.server.HessianServlet.service(HessianServlet.java:403)
	at org.spark_project.jetty.servlet.ServletHolder.handle(ServletHolder.java:848)
	at org.spark_project.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:584)
	at org.spark_project.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)
	at org.spark_project.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)
	at org.spark_project.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)
	at org.spark_project.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.spark_project.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)
	at org.spark_project.jetty.server.Server.handle(Server.java:539)
	at org.spark_project.jetty.server.HttpChannel.handle(HttpChannel.java:333)
	at org.spark_project.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)
	at org.spark_project.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:283)
	at org.spark_project.jetty.io.FillInterest.fillable(FillInterest.java:108)
	at org.spark_project.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)
	at org.spark_project.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)
	at org.spark_project.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)
	at org.spark_project.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)
	at org.spark_project.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)
	at org.spark_project.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.spark.sql.AnalysisException: Unable to infer schema for Parquet. It must be specified manually.;
	at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$7.apply(DataSource.scala:185)
	at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$7.apply(DataSource.scala:185)
	at scala.Option.getOrElse(Option.scala:121)
	at org.apache.spark.sql.execution.datasources.DataSource.getOrInferFileFormatSchema(DataSource.scala:184)
	at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:373)
	at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:225)
	at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:212)
	at org.apache.spark.sql.DataFrameReader.parquet(DataFrameReader.scala:643)
	at org.apache.spark.sql.DataFrameReader.parquet(DataFrameReader.scala:642)
	at com.datapps.linkoopdb.worker.spark.converter.LogicalPlanConverter.lambda$convertLogicalRelation$85(LogicalPlanConverter.java:1271)
	at com.google.common.cache.LocalCache$LocalManualCache$1.load(LocalCache.java:5058)
	at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3708)
	at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2416)
	... 39 more

SQL> CREATE EXTERNAL TABLE t_external_hdfs_parquet_varchar_003(
   > a1 varchar(30),
   > a2 varchar(30),
   > a3 varchar(30),
   > a4 varchar(30)
   > a5 varchar(30)
   > )
   > LOCATION ('hdfs://node73:8020/user/testdb73/external_file/type_parquet/char1') FORMAT 'parquet';
java.sql.SQLSyntaxErrorException: unexpected token: A5 : line: 6 in statement [CREATE EXTERNAL TABLE t_external_hdfs_parquet_varchar_003(
a1 varchar(30),
a2 varchar(30),
a3 varchar(30),
a4 varchar(30)
a5 varchar(30)
)
LOCATION ('hdfs://node73:8020/user/testdb73/external_file/type_parquet/char1') FORMAT 'parquet']
SQL> select * from t_external_hdfs_parquet_char_003;
java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: T_EXTERNAL_HDFS_PARQUET_CHAR_003 in statement [select * from t_external_hdfs_parquet_char_003]
SQL> 
SQL> 
SQL> -- 测试varchar，date,timestamp,boolean以及''等异常值
SQL> CREATE EXTERNAL TABLE t_external_hdfs_parquet_varchar_004(
   > a1 varchar(30),
   > a2 varchar(30),
   > a3 varchar(30),
   > a4 varchar(30),
   > a5 varchar(30),
   > a6 varchar(30),
   > a7 varchar(30),
   > a8 varchar(30),
   > a9 varchar(30),
   > a10 varchar(30),
   > a11 varchar(30),
   > a12 varchar(30),
   > a13 varchar(30)
   > )
   > LOCATION ('hdfs://node73:8020/user/testdb73/external_file/type_parquet/common1') FORMAT'parquet';
0 rows affected
SQL> select * from t_external_hdfs_parquet_varchar_004;
+------+------+----------+------+---------+----+----+--------+--------+------------+---------------------+------+-------+
| A1   | A2   | A3       | A4   | A5      | A6 | A7 | A8     | A9     | A10        | A11                 | A12  | A13   |
+------+------+----------+------+---------+----+----+--------+--------+------------+---------------------+------+-------+
| asdf | 你好 | 你好asdf | #$%^ | @#￥%…… |    |    | <null> | <null> | 2020-05-08 | 2020-05-08 12:19:01 | true | false |
+------+------+----------+------+---------+----+----+--------+--------+------------+---------------------+------+-------+
1 row selected.
SQL> exit
Disconnected.
