SQLCli Release 0.0.70
SQL> connect admin/123456
Database connected.
SQL> start OLAP_function/OLAP_function.sql
SQL> --Description:OLAP函数补充测试用例
   > --Date：2020-06-22
   > --Author：贾路遥
SQL> set echo on
SQL> set timing on
Running time elapsed:      0.00 Seconds
SQL> 
SQL> --数据准备
SQL> DROP TABLE Test_Window_Fun_4 IF EXISTS;
0 rows affected
Running time elapsed:      0.09 Seconds
SQL> create table Test_Window_Fun_4 (com varchar(20),depname varchar(100), empno int, salary double);
0 rows affected
Running time elapsed:      0.08 Seconds
SQL> insert into Test_Window_Fun_4 values(
   >  ('BAIDU','develop' , 11 , 5200),
   >  ('BAIDU','develop' , 7 , 4200),
   >  ('BAIDU','develop' , 9 , 4500),
   >  ('ALI','develop' , 8 , 6000),
   >  ('ALI','develop' , 10 , 5200),
   >  ('ALI','personnel' , 5 , 3500),
   >  ('GOOGLE','personnel' , 2 , 3900),
   >  ('GOOGLE','sales' , 3 , 4800),
   >  ('GOOGLE','sales' , 1 , 5000),
   >  ('BAIDU','sales' , 4 , 4800),
   >  ('ALI','sales' , 4 , NULL)
   > );
11 rows affected
Running time elapsed:      0.78 Seconds
SQL> 
SQL> --排序函数
   > --rank()
SQL> SELECT 
   >     rank() OVER(PARTITION BY depname ORDER BY salary ),
   > 	depname,salary
   > FROM Test_Window_Fun_4 ;
+----+-----------+--------+
| C1 | DEPNAME   | SALARY |
+----+-----------+--------+
| 1  | develop   | 4200   |
| 2  | develop   | 4500   |
| 3  | develop   | 5200   |
| 3  | develop   | 5200   |
| 5  | develop   | 6000   |
| 1  | sales     | <null> |
| 2  | sales     | 4800   |
| 2  | sales     | 4800   |
| 4  | sales     | 5000   |
| 1  | personnel | 3500   |
| 2  | personnel | 3900   |
+----+-----------+--------+
11 rows selected.
Running time elapsed:      5.82 Seconds
SQL> 
SQL> --报错，oracle支持
SQL> SELECT 
   > 	com,
   > 	depname,
   > 	rank() OVER(PARTITION BY depname ORDER BY salary DESC NULLS LAST) AS c1,
   > 	salary
   > FROM Test_Window_Fun_4;
+-----+-----------+--------+--------+
| COM | DEPNAME   |   C1   | SALARY |
+-----+-----------+--------+--------+
Running time elapsed:      0.00 Seconds
SQL> 
SQL> --报错，oracle支持
SQL> SELECT 
   > 	com,
   > 	depname,
   > 	rank() OVER(PARTITION BY depname ORDER BY salary DESC NULLS FIRST ) AS c1,
   > 	salary
   > FROM Test_Window_Fun_4 ORDER BY c1;
+-----+-----------+--------+--------+
| COM | DEPNAME   |   C1   | SALARY |
+-----+-----------+--------+--------+
Running time elapsed:      0.00 Seconds
SQL> 
SQL> --rank,order by
SQL> SELECT 
   >   depname, 
   >   empno, 
   >   salary, 
   >   rank() OVER (PARTITION BY depname ORDER BY salary DESC) c1 
   > FROM Test_Window_Fun_4 
   > order by depname, empno, salary,c1;
+-----------+-------+--------+----+
| DEPNAME   | EMPNO | SALARY | C1 |
+-----------+-------+--------+----+
| develop   | 7     | 4200   | 5  |
| develop   | 8     | 6000   | 1  |
| develop   | 9     | 4500   | 4  |
| develop   | 10    | 5200   | 2  |
| develop   | 11    | 5200   | 2  |
| personnel | 2     | 3900   | 1  |
| personnel | 5     | 3500   | 2  |
| sales     | 1     | 5000   | 1  |
| sales     | 3     | 4800   | 2  |
| sales     | 4     | <null> | 4  |
| sales     | 4     | 4800   | 2  |
+-----------+-------+--------+----+
11 rows selected.
Running time elapsed:      2.22 Seconds
SQL> 
SQL> --异常测试
   > --ROWS between unbounded preceding and current row
SQL> SELECT 
   > 	com,
   > 	depname,
   > 	rank() OVER(PARTITION BY depname ORDER BY salary DESC ROWS between unbounded preceding and current row )
   > FROM Test_Window_Fun_4;
+--------+-----------+----+
| COM    | DEPNAME   | C3 |
+--------+-----------+----+
| ALI    | develop   | 1  |
| ALI    | develop   | 2  |
| BAIDU  | develop   | 2  |
| BAIDU  | develop   | 4  |
| BAIDU  | develop   | 5  |
| GOOGLE | sales     | 1  |
| BAIDU  | sales     | 2  |
| GOOGLE | sales     | 2  |
| ALI    | sales     | 4  |
| GOOGLE | personnel | 1  |
| ALI    | personnel | 2  |
+--------+-----------+----+
11 rows selected.
Running time elapsed:      5.20 Seconds
SQL> 
SQL> --ROWS between unbounded preceding and UNBOUNDED FOLLOWING,rank()
SQL> SELECT 
   > 	com,
   > 	depname,
   > 	rank() OVER(PARTITION BY depname,com ORDER BY salary DESC ROWS between unbounded preceding and UNBOUNDED FOLLOWING  )
   > FROM Test_Window_Fun_4;
java.sql.SQLException: Worker execution: ldb worker caused error: Window Frame specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$()) must match the required frame specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$());
Running time elapsed:      0.17 Seconds
SQL> 
SQL> 
SQL> --DENSE_RANK()
SQL> SELECT  
   > 	depname, 
   > 	empno, 
   > 	salary,
   > 	dense_rank() OVER (PARTITION BY depname order by empno) c1 
   > FROM Test_Window_Fun_4 
   > order by depname, empno, salary,c1;
+-----------+-------+--------+----+
| DEPNAME   | EMPNO | SALARY | C1 |
+-----------+-------+--------+----+
| develop   | 7     | 4200   | 1  |
| develop   | 8     | 6000   | 2  |
| develop   | 9     | 4500   | 3  |
| develop   | 10    | 5200   | 4  |
| develop   | 11    | 5200   | 5  |
| personnel | 2     | 3900   | 1  |
| personnel | 5     | 3500   | 2  |
| sales     | 1     | 5000   | 1  |
| sales     | 3     | 4800   | 2  |
| sales     | 4     | <null> | 3  |
| sales     | 4     | 4800   | 3  |
+-----------+-------+--------+----+
11 rows selected.
Running time elapsed:      1.30 Seconds
SQL> SELECT 
   >     DENSE_RANK() OVER(PARTITION BY depname ORDER BY salary ),
   > 	depname,salary
   > FROM Test_Window_Fun_4 ;
+----+-----------+--------+
| C1 | DEPNAME   | SALARY |
+----+-----------+--------+
| 1  | develop   | 4200   |
| 2  | develop   | 4500   |
| 3  | develop   | 5200   |
| 3  | develop   | 5200   |
| 4  | develop   | 6000   |
| 1  | sales     | <null> |
| 2  | sales     | 4800   |
| 2  | sales     | 4800   |
| 3  | sales     | 5000   |
| 1  | personnel | 3500   |
| 2  | personnel | 3900   |
+----+-----------+--------+
11 rows selected.
Running time elapsed:      4.76 Seconds
SQL> 
SQL> 
SQL> --row_number()
SQL> SELECT 
   >   depname, 
   >   row_number()
   > FROM Test_Window_Fun_4;
java.sql.SQLException: Worker execution: ldb worker caused error: Cannot evaluate expression: row_number()
Running time elapsed:      0.18 Seconds
SQL> 
SQL> --函数row_number,partition,order
SQL> SELECT 
   > 	depname,
   > 	row_number() OVER (PARTITION BY depname order by empno) c1 
   > FROM Test_Window_Fun_4 
   > order by depname,c1;
+-----------+----+
| DEPNAME   | C1 |
+-----------+----+
| develop   | 1  |
| develop   | 2  |
| develop   | 3  |
| develop   | 4  |
| develop   | 5  |
| personnel | 1  |
| personnel | 2  |
| sales     | 1  |
| sales     | 2  |
| sales     | 3  |
| sales     | 4  |
+-----------+----+
11 rows selected.
Running time elapsed:      1.26 Seconds
SQL> 
SQL> 
SQL> --lag(),lead()
   > --offset为1，default为0
SQL> SELECT 
   > 	depname,salary,
   > 	lag(salary,1,0) OVER (PARTITION BY depname ORDER BY salary),
   > 	lead(salary,1,0) OVER (PARTITION BY depname ORDER BY salary)
   > FROM Test_Window_Fun_4;
+-----------+--------+--------+------+
| DEPNAME   | SALARY | C3     | C4   |
+-----------+--------+--------+------+
| develop   | 4200   | 0      | 4500 |
| develop   | 4500   | 4200   | 5200 |
| develop   | 5200   | 4500   | 5200 |
| develop   | 5200   | 5200   | 6000 |
| develop   | 6000   | 5200   | 0    |
| sales     | <null> | 0      | 4800 |
| sales     | 4800   | <null> | 4800 |
| sales     | 4800   | 4800   | 5000 |
| sales     | 5000   | 4800   | 0    |
| personnel | 3500   | 0      | 3900 |
| personnel | 3900   | 3500   | 0    |
+-----------+--------+--------+------+
11 rows selected.
Running time elapsed:      4.27 Seconds
SQL> 
SQL> --offset为1，default为null
SQL> SELECT 
   > 	depname,salary,
   > 	lag(salary,1) OVER (PARTITION BY depname ORDER BY salary),
   > 	lead(salary,1) OVER (PARTITION BY depname ORDER BY salary)
   > FROM Test_Window_Fun_4;
+-----------+--------+--------+--------+
| DEPNAME   | SALARY | C3     | C4     |
+-----------+--------+--------+--------+
| develop   | 4200   | <null> | 4500   |
| develop   | 4500   | 4200   | 5200   |
| develop   | 5200   | 4500   | 5200   |
| develop   | 5200   | 5200   | 6000   |
| develop   | 6000   | 5200   | <null> |
| sales     | <null> | <null> | 4800   |
| sales     | 4800   | <null> | 4800   |
| sales     | 4800   | 4800   | 5000   |
| sales     | 5000   | 4800   | <null> |
| personnel | 3500   | <null> | 3900   |
| personnel | 3900   | 3500   | <null> |
+-----------+--------+--------+--------+
11 rows selected.
Running time elapsed:      4.24 Seconds
SQL> 
SQL> --offset为0，default为null
SQL> SELECT 
   > 	depname,salary,
   > 	lag(salary,0) OVER (PARTITION BY depname ORDER BY salary),
   > 	lead(salary,0) OVER (PARTITION BY depname ORDER BY salary)
   > FROM Test_Window_Fun_4;
+-----------+--------+--------+--------+
| DEPNAME   | SALARY | C3     | C4     |
+-----------+--------+--------+--------+
| develop   | 4200   | 4200   | 4200   |
| develop   | 4500   | 4500   | 4500   |
| develop   | 5200   | 5200   | 5200   |
| develop   | 5200   | 5200   | 5200   |
| develop   | 6000   | 6000   | 6000   |
| sales     | <null> | <null> | <null> |
| sales     | 4800   | 4800   | 4800   |
| sales     | 4800   | 4800   | 4800   |
| sales     | 5000   | 5000   | 5000   |
| personnel | 3500   | 3500   | 3500   |
| personnel | 3900   | 3900   | 3900   |
+-----------+--------+--------+--------+
11 rows selected.
Running time elapsed:      4.34 Seconds
SQL> 
SQL> --offset为-1，default为null
SQL> SELECT 
   > 	depname,salary,
   > 	lag(salary,-1) OVER (PARTITION BY depname ORDER BY salary),
   > 	lead(salary,-1) OVER (PARTITION BY depname ORDER BY salary)
   > FROM Test_Window_Fun_4;
+-----------+--------+--------+--------+
| DEPNAME   | SALARY | C3     | C4     |
+-----------+--------+--------+--------+
| develop   | 4200   | 4500   | <null> |
| develop   | 4500   | 5200   | 4200   |
| develop   | 5200   | 5200   | 4500   |
| develop   | 5200   | 6000   | 5200   |
| develop   | 6000   | <null> | 5200   |
| sales     | <null> | 4800   | <null> |
| sales     | 4800   | 4800   | <null> |
| sales     | 4800   | 5000   | 4800   |
| sales     | 5000   | <null> | 4800   |
| personnel | 3500   | 3900   | <null> |
| personnel | 3900   | <null> | 3500   |
+-----------+--------+--------+--------+
11 rows selected.
Running time elapsed:      4.31 Seconds
SQL> 
SQL> --嵌套使用
SQL> SELECT depname,salary,empno,lastsal,salary-lastsal AS addsal FROM 
   > (SELECT 
   > 	depname,salary,
   > 	empno,
   > 	lead(salary,1) OVER (PARTITION BY depname ORDER BY salary) AS lastsal
   > FROM Test_Window_Fun_4) ORDER BY empno;
+-----------+--------+-------+---------+--------+
| DEPNAME   | SALARY | EMPNO | LASTSAL | ADDSAL |
+-----------+--------+-------+---------+--------+
| sales     | 5000   | 1     | <null>  | <null> |
| personnel | 3900   | 2     | <null>  | <null> |
| sales     | 4800   | 3     | 4800    | 0      |
| sales     | <null> | 4     | 4800    | <null> |
| sales     | 4800   | 4     | 5000    | -200   |
| personnel | 3500   | 5     | 3900    | -400   |
| develop   | 4200   | 7     | 4500    | -300   |
| develop   | 6000   | 8     | <null>  | <null> |
| develop   | 4500   | 9     | 5200    | -700   |
| develop   | 5200   | 10    | 5200    | 0      |
| develop   | 5200   | 11    | 6000    | -800   |
+-----------+--------+-------+---------+--------+
11 rows selected.
Running time elapsed:      1.25 Seconds
SQL> 
SQL> --异常测试
   > --null,oracle报错
SQL> SELECT 
   > 	depname,salary,
   > 	lag(salary,12,'lag') OVER (PARTITION BY depname ORDER BY salary),
   > 	lead(salary,12,'lead') OVER (PARTITION BY depname ORDER BY salary)
   > FROM Test_Window_Fun_4;
+-----------+--------+--------+--------+
| DEPNAME   | SALARY | C3     | C4     |
+-----------+--------+--------+--------+
| develop   | 4200   | <null> | <null> |
| develop   | 4500   | <null> | <null> |
| develop   | 5200   | <null> | <null> |
| develop   | 5200   | <null> | <null> |
| develop   | 6000   | <null> | <null> |
| sales     | <null> | <null> | <null> |
| sales     | 4800   | <null> | <null> |
| sales     | 4800   | <null> | <null> |
| sales     | 5000   | <null> | <null> |
| personnel | 3500   | <null> | <null> |
| personnel | 3900   | <null> | <null> |
+-----------+--------+--------+--------+
11 rows selected.
Running time elapsed:      4.11 Seconds
SQL> 
SQL> 
SQL> --FIRST_VALUE()，LAST_VALUE()
   > --FIRST_VALUE()
SQL> SELECT 
   > 	depname,empno,
   > 	SUM(salary), 
   > 	FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(salary) DESC) 
   > FROM Test_Window_Fun_4 
   > GROUP BY depname,empno 
   > ORDER BY depname,empno;
+-----------+-------+------+------+
| DEPNAME   | EMPNO | C3   | C4   |
+-----------+-------+------+------+
| develop   | 7     | 4200 | 6000 |
| develop   | 8     | 6000 | 6000 |
| develop   | 9     | 4500 | 6000 |
| develop   | 10    | 5200 | 6000 |
| develop   | 11    | 5200 | 6000 |
| personnel | 2     | 3900 | 3900 |
| personnel | 5     | 3500 | 3900 |
| sales     | 1     | 5000 | 5000 |
| sales     | 3     | 4800 | 5000 |
| sales     | 4     | 4800 | 5000 |
+-----------+-------+------+------+
10 rows selected.
Running time elapsed:      2.06 Seconds
SQL> 
SQL> --LAST_VALUE()
SQL> select 
   >   depname,empno,salary, LAST_VALUE(empno) OVER (partition by depname order by salary desc) as highest_sal_name 
   > from Test_Window_Fun_4 order by depname,empno;
+-----------+-------+--------+------------------+
| DEPNAME   | EMPNO | SALARY | HIGHEST_SAL_NAME |
+-----------+-------+--------+------------------+
| develop   | 7     | 4200   | 7                |
| develop   | 8     | 6000   | 8                |
| develop   | 9     | 4500   | 9                |
| develop   | 10    | 5200   | 11               |
| develop   | 11    | 5200   | 11               |
| personnel | 2     | 3900   | 2                |
| personnel | 5     | 3500   | 5                |
| sales     | 1     | 5000   | 1                |
| sales     | 3     | 4800   | 4                |
| sales     | 4     | 4800   | 4                |
| sales     | 4     | <null> | 4                |
+-----------+-------+--------+------------------+
11 rows selected.
Running time elapsed:      1.64 Seconds
SQL> 
SQL> --FIRST_VALUE(SUM(salary))
SQL> SELECT 
   > 	depname,  SUM(salary), FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(salary)) 
   > FROM Test_Window_Fun_4  GROUP BY depname ORDER BY depname;
+-----------+-------+-------+
| DEPNAME   | C2    | C3    |
+-----------+-------+-------+
| develop   | 25100 | 25100 |
| personnel | 7400  | 7400  |
| sales     | 14600 | 14600 |
+-----------+-------+-------+
3 rows selected.
Running time elapsed:      1.36 Seconds
SQL> 
SQL> --FIRST_VALUE()
SQL> SELECT 
   > 	depname,
   > 	empno, 
   > 	SUM(salary),
   > 	FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(salary) ) 
   > FROM Test_Window_Fun_4 
   > GROUP BY depname,empno 
   > ORDER BY depname,empno;
+-----------+-------+------+------+
| DEPNAME   | EMPNO | C3   | C4   |
+-----------+-------+------+------+
| develop   | 7     | 4200 | 4200 |
| develop   | 8     | 6000 | 4200 |
| develop   | 9     | 4500 | 4200 |
| develop   | 10    | 5200 | 4200 |
| develop   | 11    | 5200 | 4200 |
| personnel | 2     | 3900 | 3500 |
| personnel | 5     | 3500 | 3500 |
| sales     | 1     | 5000 | 4800 |
| sales     | 3     | 4800 | 4800 |
| sales     | 4     | 4800 | 4800 |
+-----------+-------+------+------+
10 rows selected.
Running time elapsed:      1.62 Seconds
SQL> 
SQL> --FIRST_VALUE(),LAST_VALUE()
SQL> select 
   >   depname,empno,salary,
   >   SUM(salary) AS sums,
   >   FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(salary) ) AS c1 ,
   >   LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name 
   > from Test_Window_Fun_4 GROUP BY depname,empno,salary order by depname,salary;
+-----------+-------+--------+--------+--------+------------------+
| DEPNAME   | EMPNO | SALARY | SUMS   | C1     | HIGHEST_SAL_NAME |
+-----------+-------+--------+--------+--------+------------------+
| develop   | 7     | 4200   | 4200   | 4200   | 8                |
| develop   | 9     | 4500   | 4500   | 4200   | 8                |
| develop   | 11    | 5200   | 5200   | 4200   | 8                |
| develop   | 10    | 5200   | 5200   | 4200   | 8                |
| develop   | 8     | 6000   | 6000   | 4200   | 8                |
| personnel | 5     | 3500   | 3500   | 3500   | 2                |
| personnel | 2     | 3900   | 3900   | 3500   | 2                |
| sales     | 4     | <null> | <null> | <null> | 1                |
| sales     | 4     | 4800   | 4800   | <null> | 1                |
| sales     | 3     | 4800   | 4800   | <null> | 1                |
| sales     | 1     | 5000   | 5000   | <null> | 1                |
+-----------+-------+--------+--------+--------+------------------+
11 rows selected.
Running time elapsed:      2.13 Seconds
SQL> 
SQL> 
SQL> --VAR_POP(),VAR_SAMP()
SQL> select 
   >   VAR_POP(salary) OVER (PARTITION BY depname) AS c2,
   >   VAR_SAMP(salary) OVER (PARTITION BY depname) AS c3
   > from Test_Window_Fun_4 WHERE depname='develop';
+--------+--------+
| C2     | C3     |
+--------+--------+
| 393600 | 492000 |
| 393600 | 492000 |
| 393600 | 492000 |
| 393600 | 492000 |
| 393600 | 492000 |
+--------+--------+
5 rows selected.
Running time elapsed:      5.92 Seconds
SQL> 
SQL> 
SQL> --CUME_DIST()
SQL> SELECT 
   > 	depname, 
   > 	CUME_DIST() OVER (PARTITION BY depname order by empno) c1 
   > FROM Test_Window_Fun_4 
   > order by depname,c1;
+-----------+------+
| DEPNAME   | C1   |
+-----------+------+
| develop   | 0.2  |
| develop   | 0.4  |
| develop   | 0.6  |
| develop   | 0.8  |
| develop   | 1    |
| personnel | 0.5  |
| personnel | 1    |
| sales     | 0.25 |
| sales     | 0.5  |
| sales     | 1    |
| sales     | 1    |
+-----------+------+
11 rows selected.
Running time elapsed:      1.25 Seconds
SQL> 
SQL> --CUME_DIST()
SQL> SELECT 
   >   empno,
   >   CUME_DIST() OVER (PARTITION BY depname order by nvl(salary,0) ) 
   > FROM Test_Window_Fun_4 
   > ORDER BY empno;
+-------+------+
| EMPNO | C2   |
+-------+------+
| 1     | 1    |
| 2     | 1    |
| 3     | 0.75 |
| 4     | 0.25 |
| 4     | 0.75 |
| 5     | 0.5  |
| 7     | 0.2  |
| 8     | 1    |
| 9     | 0.4  |
| 10    | 0.8  |
| 11    | 0.8  |
+-------+------+
11 rows selected.
Running time elapsed:      1.37 Seconds
SQL> 
SQL> 
SQL> --NTILE
SQL> SELECT 
   > 	depname,
   > 	NTILE(4) OVER (PARTITION BY depname order by empno) c1 
   > FROM Test_Window_Fun_4 
   > order by depname,c1;
+-----------+----+
| DEPNAME   | C1 |
+-----------+----+
| develop   | 1  |
| develop   | 1  |
| develop   | 2  |
| develop   | 3  |
| develop   | 4  |
| personnel | 1  |
| personnel | 2  |
| sales     | 1  |
| sales     | 2  |
| sales     | 3  |
| sales     | 4  |
+-----------+----+
11 rows selected.
Running time elapsed:      1.27 Seconds
SQL> 
SQL> --NTILE()不支持参数为表达式
SQL> select 
   >   depname,empno,NVL(salary,0),
   >   NTILE(3.1415) OVER (PARTITION BY depname order by nvl(salary,0)) AS c3,
   > from Test_Window_Fun_4  order by depname,salary;
java.sql.SQLSyntaxErrorException: incompatible data type in operation in statement [select 
  depname,empno,NVL(salary,0),
  NTILE(3.1415) OVER (PARTITION BY depname order by nvl(salary,0)) AS c3,
from Test_Window_Fun_4  order by depname,salary]
Running time elapsed:      0.00 Seconds
SQL> 
SQL> --NTILE(3)
SQL> select 
   > depname,empno,NVL(salary,0),
   > NTILE(3) OVER (PARTITION BY depname order by nvl(salary,0)) AS c3
   > from Test_Window_Fun_4  order by depname,salary;
+-----------+-------+------+----+
| DEPNAME   | EMPNO | C3   | C3 |
+-----------+-------+------+----+
| develop   | 7     | 4200 | 1  |
| develop   | 9     | 4500 | 1  |
| develop   | 10    | 5200 | 2  |
| develop   | 11    | 5200 | 2  |
| develop   | 8     | 6000 | 3  |
| personnel | 5     | 3500 | 1  |
| personnel | 2     | 3900 | 2  |
| sales     | 4     | 0    | 1  |
| sales     | 4     | 4800 | 1  |
| sales     | 3     | 4800 | 2  |
| sales     | 1     | 5000 | 3  |
+-----------+-------+------+----+
11 rows selected.
Running time elapsed:      1.42 Seconds
SQL> 
SQL> --NTILE(0)
SQL> select 
   > depname,empno,NVL(salary,0),
   > NTILE(0) OVER (PARTITION BY depname order by salary) AS c3
   > from Test_Window_Fun_4  order by depname,salary;
java.sql.SQLException: Worker execution: ldb worker caused error: cannot resolve 'ntile(0)' due to data type mismatch: Buckets expression must be positive, but got: 0;;
'Sort [DEPNAME#38812 ASC NULLS FIRST, SALARY#38814 ASC NULLS FIRST], true
+- 'Project [DEPNAME#38812, EMPNO#38813, C3#38815, C3#38816]
   +- 'Project [DEPNAME#38812, EMPNO#38813, C3#38815, SALARY#38814, C3#38816]
      +- 'Window [ntile(0) windowspecdefinition(DEPNAME#38812, SALARY#38814 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS C3#38816], [DEPNAME#38812], [SALARY#38814 ASC NULLS FIRST]
         +- Project [DEPNAME#38812, EMPNO#38813, CASE WHEN isnull(SALARY#38814) THEN cast(0 as double) ELSE SALARY#38814 END AS C3#38815, SALARY#38814]
            +- Project [COM#229626 AS COM#38811, DEPNAME#229627 AS DEPNAME#38812, EMPNO#229628 AS EMPNO#38813, SALARY#229629 AS SALARY#38814]
               +- Relation[COM#229626,DEPNAME#229627,EMPNO#229628,SALARY#229629] parquet

Running time elapsed:      0.11 Seconds
SQL> 
SQL> --NTILE(10000)
SQL> select 
   >   depname,empno,NVL(salary,0),
   >   NTILE(10000) OVER (PARTITION BY depname order by salary) AS c3
   > from Test_Window_Fun_4  order by depname,salary;
+-----------+-------+------+----+
| DEPNAME   | EMPNO | C3   | C3 |
+-----------+-------+------+----+
| develop   | 7     | 4200 | 1  |
| develop   | 9     | 4500 | 2  |
| develop   | 10    | 5200 | 3  |
| develop   | 11    | 5200 | 4  |
| develop   | 8     | 6000 | 5  |
| personnel | 5     | 3500 | 1  |
| personnel | 2     | 3900 | 2  |
| sales     | 4     | 0    | 1  |
| sales     | 3     | 4800 | 2  |
| sales     | 4     | 4800 | 3  |
| sales     | 1     | 5000 | 4  |
+-----------+-------+------+----+
11 rows selected.
Running time elapsed:      1.36 Seconds
SQL> 
SQL> 
SQL> --组合OLAP函数
   > --FIRST_VALUE(),LAST_VALUE(),VAR_POP(),VAR_SAMP()
SQL> select 
   >   depname,empno,NVL(salary,0),
   >   SUM(NVL(salary,0)) AS sums,
   >   FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(salary) ) AS c1 ,
   >   LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name,
   >   VAR_POP(salary) OVER (PARTITION BY depname) AS c2,
   >   VAR_SAMP(salary) OVER (PARTITION BY depname) AS c3
   > from Test_Window_Fun_4 GROUP BY depname,empno,salary order by depname,salary;
+-----------+-------+------+------+--------+------------------+-------------+-------------+
| DEPNAME   | EMPNO | C3   | SUMS | C1     | HIGHEST_SAL_NAME | C2          | C3          |
+-----------+-------+------+------+--------+------------------+-------------+-------------+
| develop   | 7     | 4200 | 4200 | 4200   | 8                | 393600      | 492000      |
| develop   | 9     | 4500 | 4500 | 4200   | 8                | 393600      | 492000      |
| develop   | 11    | 5200 | 5200 | 4200   | 8                | 393600      | 492000      |
| develop   | 10    | 5200 | 5200 | 4200   | 8                | 393600      | 492000      |
| develop   | 8     | 6000 | 6000 | 4200   | 8                | 393600      | 492000      |
| personnel | 5     | 3500 | 3500 | 3500   | 2                | 40000       | 80000       |
| personnel | 2     | 3900 | 3900 | 3500   | 2                | 40000       | 80000       |
| sales     | 4     | 0    | 0    | <null> | 1                | 8888.888889 | 13333.33333 |
| sales     | 4     | 4800 | 4800 | <null> | 1                | 8888.888889 | 13333.33333 |
| sales     | 3     | 4800 | 4800 | <null> | 1                | 8888.888889 | 13333.33333 |
| sales     | 1     | 5000 | 5000 | <null> | 1                | 8888.888889 | 13333.33333 |
+-----------+-------+------+------+--------+------------------+-------------+-------------+
11 rows selected.
Running time elapsed:      3.03 Seconds
SQL> 
SQL> --FIRST_VALUE(),LAST_VALUE(),VAR_POP(),VAR_SAMP()
SQL> select 
   >   depname,empno,NVL(salary,0),
   >   SUM(NVL(salary,0)) AS sums,
   >   FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(NVL(salary,0)) ) AS c1 ,
   >   LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name,
   >   VAR_POP(salary) OVER (PARTITION BY depname) AS c2,
   >   VAR_SAMP(salary) OVER (PARTITION BY depname) AS c3
   > from Test_Window_Fun_4 GROUP BY depname,empno,salary order by depname,salary;
+-----------+-------+------+------+--------+------------------+-------------+-------------+
| DEPNAME   | EMPNO | C3   | SUMS | C1     | HIGHEST_SAL_NAME | C2          | C3          |
+-----------+-------+------+------+--------+------------------+-------------+-------------+
| develop   | 7     | 4200 | 4200 | 4200   | 8                | 393600      | 492000      |
| develop   | 9     | 4500 | 4500 | 4200   | 8                | 393600      | 492000      |
| develop   | 11    | 5200 | 5200 | 4200   | 8                | 393600      | 492000      |
| develop   | 10    | 5200 | 5200 | 4200   | 8                | 393600      | 492000      |
| develop   | 8     | 6000 | 6000 | 4200   | 8                | 393600      | 492000      |
| personnel | 5     | 3500 | 3500 | 3500   | 2                | 40000       | 80000       |
| personnel | 2     | 3900 | 3900 | 3500   | 2                | 40000       | 80000       |
| sales     | 4     | 0    | 0    | <null> | 1                | 8888.888889 | 13333.33333 |
| sales     | 4     | 4800 | 4800 | <null> | 1                | 8888.888889 | 13333.33333 |
| sales     | 3     | 4800 | 4800 | <null> | 1                | 8888.888889 | 13333.33333 |
| sales     | 1     | 5000 | 5000 | <null> | 1                | 8888.888889 | 13333.33333 |
+-----------+-------+------+------+--------+------------------+-------------+-------------+
11 rows selected.
Running time elapsed:      2.96 Seconds
SQL> 
SQL> --FIRST_VALUE(),LAST_VALUE(),VAR_POP(),VAR_SAMP(),STDDEV_POP(),STDDEV_SAMP()
SQL> select 
   > depname,empno,NVL(salary,0),
   > SUM(NVL(salary,0)) AS sums,
   > FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(NVL(salary,0)) ) AS c1 ,
   > LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name,
   > VAR_POP(salary) OVER (PARTITION BY depname) AS c2,
   > VAR_SAMP(salary) OVER (PARTITION BY depname) AS c3,
   > STDDEV_POP(salary) OVER (PARTITION BY depname) AS c4,
   > STDDEV_SAMP(salary) OVER (PARTITION BY depname) AS c5
   > from Test_Window_Fun_4 GROUP BY depname,empno,salary order by depname,salary;
+-----------+-------+------+------+--------+------------------+-------------+-------------+-------------+-------------+
| DEPNAME   | EMPNO | C3   | SUMS | C1     | HIGHEST_SAL_NAME | C2          | C3          | C4          | C5          |
+-----------+-------+------+------+--------+------------------+-------------+-------------+-------------+-------------+
| develop   | 7     | 4200 | 4200 | 4200   | 8                | 393600      | 492000      | 627.3754857 | 701.4271167 |
| develop   | 9     | 4500 | 4500 | 4200   | 8                | 393600      | 492000      | 627.3754857 | 701.4271167 |
| develop   | 11    | 5200 | 5200 | 4200   | 8                | 393600      | 492000      | 627.3754857 | 701.4271167 |
| develop   | 10    | 5200 | 5200 | 4200   | 8                | 393600      | 492000      | 627.3754857 | 701.4271167 |
| develop   | 8     | 6000 | 6000 | 4200   | 8                | 393600      | 492000      | 627.3754857 | 701.4271167 |
| personnel | 5     | 3500 | 3500 | 3500   | 2                | 40000       | 80000       | 200         | 282.8427125 |
| personnel | 2     | 3900 | 3900 | 3500   | 2                | 40000       | 80000       | 200         | 282.8427125 |
| sales     | 4     | 0    | 0    | <null> | 1                | 8888.888889 | 13333.33333 | 94.28090416 | 115.4700538 |
| sales     | 4     | 4800 | 4800 | <null> | 1                | 8888.888889 | 13333.33333 | 94.28090416 | 115.4700538 |
| sales     | 3     | 4800 | 4800 | <null> | 1                | 8888.888889 | 13333.33333 | 94.28090416 | 115.4700538 |
| sales     | 1     | 5000 | 5000 | <null> | 1                | 8888.888889 | 13333.33333 | 94.28090416 | 115.4700538 |
+-----------+-------+------+------+--------+------------------+-------------+-------------+-------------+-------------+
11 rows selected.
Running time elapsed:      3.68 Seconds
SQL> 
SQL> --FIRST_VALUE(),LAST_VALUE(),VAR_POP(),VAR_SAMP(),STDDEV_POP(),STDDEV_SAMP()
SQL> select 
   > depname,empno,NVL(salary,0),
   > SUM(NVL(salary,0)) AS sums,
   > FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(NVL(salary,0))) AS c1 ,
   > LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name,
   > VAR_POP(salary) OVER (PARTITION BY depname) AS c2,
   > VAR_SAMP(salary) OVER (PARTITION BY depname) AS c3,
   > STDDEV_POP(salary) OVER (PARTITION BY depname) AS c4,
   > STDDEV_SAMP(salary) OVER (PARTITION BY depname) AS c5
   > from (SELECT * FROM Test_Window_Fun_4 WHERE depname='develop') GROUP BY depname,empno,salary order by depname,salary;
+---------+-------+------+------+------+------------------+--------+--------+-------------+-------------+
| DEPNAME | EMPNO | C3   | SUMS | C1   | HIGHEST_SAL_NAME | C2     | C3     | C4          | C5          |
+---------+-------+------+------+------+------------------+--------+--------+-------------+-------------+
| develop | 7     | 4200 | 4200 | 4200 | 8                | 393600 | 492000 | 627.3754857 | 701.4271167 |
| develop | 9     | 4500 | 4500 | 4200 | 8                | 393600 | 492000 | 627.3754857 | 701.4271167 |
| develop | 11    | 5200 | 5200 | 4200 | 8                | 393600 | 492000 | 627.3754857 | 701.4271167 |
| develop | 10    | 5200 | 5200 | 4200 | 8                | 393600 | 492000 | 627.3754857 | 701.4271167 |
| develop | 8     | 6000 | 6000 | 4200 | 8                | 393600 | 492000 | 627.3754857 | 701.4271167 |
+---------+-------+------+------+------+------------------+--------+--------+-------------+-------------+
5 rows selected.
Running time elapsed:      3.44 Seconds
SQL> 
SQL> --FIRST_VALUE(),LAST_VALUE(),CUME_DIST(),STDDEV_POP(),STDDEV_SAMP()
SQL> select 
   > depname,empno,NVL(salary,0),
   > SUM(NVL(salary,0)) AS sums,
   > FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(NVL(salary,0))) AS c1 ,
   > LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name,
   > CUME_DIST() OVER (PARTITION BY depname order by nvl(salary,0) ) AS c2,
   > STDDEV_POP(salary) OVER (PARTITION BY depname) AS c4,
   > STDDEV_SAMP(salary) OVER (PARTITION BY depname) AS c5
   > from (SELECT * FROM Test_Window_Fun_4 WHERE depname='develop') GROUP BY depname,empno,salary order by depname,salary;
+---------+-------+------+------+------+------------------+-----+-------------+-------------+
| DEPNAME | EMPNO | C3   | SUMS | C1   | HIGHEST_SAL_NAME | C2  | C4          | C5          |
+---------+-------+------+------+------+------------------+-----+-------------+-------------+
| develop | 7     | 4200 | 4200 | 4200 | 8                | 0.2 | 627.3754857 | 701.4271167 |
| develop | 9     | 4500 | 4500 | 4200 | 8                | 0.4 | 627.3754857 | 701.4271167 |
| develop | 11    | 5200 | 5200 | 4200 | 8                | 0.8 | 627.3754857 | 701.4271167 |
| develop | 10    | 5200 | 5200 | 4200 | 8                | 0.8 | 627.3754857 | 701.4271167 |
| develop | 8     | 6000 | 6000 | 4200 | 8                | 1   | 627.3754857 | 701.4271167 |
+---------+-------+------+------+------+------------------+-----+-------------+-------------+
5 rows selected.
Running time elapsed:      3.52 Seconds
SQL> 
SQL> --FIRST_VALUE(),LAST_VALUE(),CUME_DIST(),STDDEV_POP(),STDDEV_SAMP()
SQL> select 
   > depname,empno,NVL(salary,0),
   > SUM(NVL(salary,0)) AS sums,
   > FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(NVL(salary,0))) AS c1 ,
   > LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name,
   > CUME_DIST() OVER (PARTITION BY depname order by nvl(salary,0) ) AS c2,
   > STDDEV_POP(salary) OVER (PARTITION BY depname) AS c4,
   > STDDEV_SAMP(salary) OVER (PARTITION BY depname) AS c5
   > from Test_Window_Fun_4 GROUP BY depname,empno,salary order by depname,salary;
+-----------+-------+------+------+--------+------------------+------+-------------+-------------+
| DEPNAME   | EMPNO | C3   | SUMS | C1     | HIGHEST_SAL_NAME | C2   | C4          | C5          |
+-----------+-------+------+------+--------+------------------+------+-------------+-------------+
| develop   | 7     | 4200 | 4200 | 4200   | 8                | 0.2  | 627.3754857 | 701.4271167 |
| develop   | 9     | 4500 | 4500 | 4200   | 8                | 0.4  | 627.3754857 | 701.4271167 |
| develop   | 11    | 5200 | 5200 | 4200   | 8                | 0.8  | 627.3754857 | 701.4271167 |
| develop   | 10    | 5200 | 5200 | 4200   | 8                | 0.8  | 627.3754857 | 701.4271167 |
| develop   | 8     | 6000 | 6000 | 4200   | 8                | 1    | 627.3754857 | 701.4271167 |
| personnel | 5     | 3500 | 3500 | 3500   | 2                | 0.5  | 200         | 282.8427125 |
| personnel | 2     | 3900 | 3900 | 3500   | 2                | 1    | 200         | 282.8427125 |
| sales     | 4     | 0    | 0    | <null> | 1                | 0.25 | 94.28090416 | 115.4700538 |
| sales     | 4     | 4800 | 4800 | <null> | 1                | 0.75 | 94.28090416 | 115.4700538 |
| sales     | 3     | 4800 | 4800 | <null> | 1                | 0.75 | 94.28090416 | 115.4700538 |
| sales     | 1     | 5000 | 5000 | <null> | 1                | 1    | 94.28090416 | 115.4700538 |
+-----------+-------+------+------+--------+------------------+------+-------------+-------------+
11 rows selected.
Running time elapsed:      3.16 Seconds
SQL> 
SQL> --FIRST_VALUE(),LAST_VALUE(),CUME_DIST()
SQL> select 
   > depname,empno,NVL(salary,0),
   > SUM(NVL(salary,0)) AS sums,
   > LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name,
   > FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(NVL(salary,0))),
   > CUME_DIST() OVER (PARTITION BY depname order by nvl(salary,0) ) AS c2
   > from Test_Window_Fun_4 GROUP BY depname,empno,salary order by depname,salary;
+-----------+-------+------+------+------------------+--------+------+
| DEPNAME   | EMPNO | C3   | SUMS | HIGHEST_SAL_NAME | C6     | C2   |
+-----------+-------+------+------+------------------+--------+------+
| develop   | 7     | 4200 | 4200 | 8                | 4200   | 0.2  |
| develop   | 9     | 4500 | 4500 | 8                | 4200   | 0.4  |
| develop   | 10    | 5200 | 5200 | 8                | 4200   | 0.8  |
| develop   | 11    | 5200 | 5200 | 8                | 4200   | 0.8  |
| develop   | 8     | 6000 | 6000 | 8                | 4200   | 1    |
| personnel | 5     | 3500 | 3500 | 2                | 3500   | 0.5  |
| personnel | 2     | 3900 | 3900 | 2                | 3500   | 1    |
| sales     | 4     | 0    | 0    | 1                | <null> | 0.25 |
| sales     | 3     | 4800 | 4800 | 1                | <null> | 0.75 |
| sales     | 4     | 4800 | 4800 | 1                | <null> | 0.75 |
| sales     | 1     | 5000 | 5000 | 1                | <null> | 1    |
+-----------+-------+------+------+------------------+--------+------+
11 rows selected.
Running time elapsed:      2.69 Seconds
SQL> 
SQL> --FIRST_VALUE(),LAST_VALUE(),NTILE(),STDDEV_POP(),STDDEV_SAMP()
SQL> select 
   > depname,empno,NVL(salary,0),
   > SUM(NVL(salary,0)) AS sums,
   > FIRST_VALUE(SUM(salary)) OVER (PARTITION BY depname ORDER BY SUM(NVL(salary,0))) AS c1 ,
   > LAST_VALUE(empno) OVER (partition by depname order by nvl(salary,0) ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as highest_sal_name,
   > NTILE(3) OVER (PARTITION BY depname order by nvl(salary,0)) AS c3,
   > STDDEV_POP(salary) OVER (PARTITION BY depname) AS c4,
   > STDDEV_SAMP(salary) OVER (PARTITION BY depname) AS c5
   > from (SELECT * FROM Test_Window_Fun_4 WHERE depname='develop') GROUP BY depname,empno,salary order by depname,salary;
+---------+-------+------+------+------+------------------+----+-------------+-------------+
| DEPNAME | EMPNO | C3   | SUMS | C1   | HIGHEST_SAL_NAME | C3 | C4          | C5          |
+---------+-------+------+------+------+------------------+----+-------------+-------------+
| develop | 7     | 4200 | 4200 | 4200 | 8                | 1  | 627.3754857 | 701.4271167 |
| develop | 9     | 4500 | 4500 | 4200 | 8                | 1  | 627.3754857 | 701.4271167 |
| develop | 11    | 5200 | 5200 | 4200 | 8                | 2  | 627.3754857 | 701.4271167 |
| develop | 10    | 5200 | 5200 | 4200 | 8                | 2  | 627.3754857 | 701.4271167 |
| develop | 8     | 6000 | 6000 | 4200 | 8                | 3  | 627.3754857 | 701.4271167 |
+---------+-------+------+------+------+------------------+----+-------------+-------------+
5 rows selected.
Running time elapsed:      3.39 Seconds
SQL> 
SQL> 
SQL> --线性回归函数
   > --数据准备
SQL> DROP TABLE regr_test IF EXISTS ;
0 rows affected
Running time elapsed:      0.04 Seconds
SQL> CREATE TABLE regr_test (sals INT, ENAME VARCHAR(20), JOB VARCHAR(20), MGR INT, HIREDATE DATE, SAL INT, DEPTNO INT);
0 rows affected
Running time elapsed:      0.07 Seconds
SQL> INSERT INTO regr_test VALUES (34,'SMTH','CLERK',7902,TO_DATE('1980-12-17','yyyy-mm-dd'),28,30); 
1 row affected
Running time elapsed:      0.84 Seconds
SQL> INSERT INTO regr_test VALUES (66,'SMTH','CLERK',7902,TO_DATE('1980-12-17','yyyy-mm-dd'),99,20); 
1 row affected
Running time elapsed:      0.55 Seconds
SQL> INSERT INTO regr_test VALUES (12,'MITH','CLERK',7902,TO_DATE('1980-12-17','yyyy-mm-dd'),5,20); 
1 row affected
Running time elapsed:      0.50 Seconds
SQL> INSERT INTO regr_test VALUES (964,'MITH','CLERK',7902,TO_DATE('1980-12-17','yyyy-mm-dd'),800,30); 
1 row affected
Running time elapsed:      2.06 Seconds
SQL> INSERT INTO regr_test VALUES (964,'JAKE','CLERK',7902,TO_DATE('1980-12-17','yyyy-mm-dd'),310,10); 
1 row affected
Running time elapsed:      1.67 Seconds
SQL> INSERT INTO regr_test VALUES (964,'TOM','CLERK',7902,TO_DATE('1980-12-17','yyyy-mm-dd'),58900,60);
1 row affected
Running time elapsed:      1.55 Seconds
SQL> INSERT INTO regr_test VALUES (9064,'BOB','CLERK',7902,TO_DATE('1980-12-17','yyyy-mm-dd'),800,60);
1 row affected
Running time elapsed:      1.72 Seconds
SQL> 
SQL> --REGR_SLOPE
SQL> SELECT 
   >   DEPTNO, REGR_SLOPE(sals,sal) slope1, REGR_SLOPE(sals,sals) slope2    
   > FROM regr_test    
   > GROUP BY DEPTNO   
   > ORDER BY DEPTNO DESC;
+--------+---------------+--------+
| DEPTNO | SLOPE1        | SLOPE2 |
+--------+---------------+--------+
| 60     | -0.1394148021 | 1      |
| 30     | 1.204663212   | 1      |
| 20     | 0.5744680851  | 1      |
| 10     | <null>        | <null> |
+--------+---------------+--------+
4 rows selected.
Running time elapsed:      1.71 Seconds
SQL> 
SQL> --REGR_SLOPE
SQL> SELECT
   >   DEPTNO, 
   >   REGR_SLOPE(sals,sal) OVER (PARTITION BY DEPTNO,ENAME ORDER BY sals ) slope1, 
   >   REGR_SLOPE(sals,sals) OVER (PARTITION BY DEPTNO ORDER BY sal ) slope2,
   >   REGR_SLOPE(null,sals) OVER (PARTITION BY DEPTNO ORDER BY sal ) slope3,
   >    REGR_SLOPE(sal,null) OVER (PARTITION BY DEPTNO ORDER BY sal ) slope4
   > FROM regr_test    
   > ORDER BY DEPTNO DESC;
+--------+--------+--------+--------+--------+
| DEPTNO | SLOPE1 | SLOPE2 | SLOPE3 | SLOPE4 |
+--------+--------+--------+--------+--------+
| 60     | <null> | <null> | <null> | <null> |
| 60     | <null> | 1      | <null> | <null> |
| 30     | <null> | <null> | <null> | <null> |
| 30     | <null> | 1      | <null> | <null> |
| 20     | <null> | <null> | <null> | <null> |
| 20     | <null> | 1      | <null> | <null> |
| 10     | <null> | <null> | <null> | <null> |
+--------+--------+--------+--------+--------+
7 rows selected.
Running time elapsed:      4.78 Seconds
SQL> 
SQL> --REGR_SLOPE
SQL> SELECT
   >   DEPTNO, 
   >   REGR_SLOPE(sals,sal) OVER (PARTITION BY DEPTNO,ENAME ORDER BY sals ) slope1, 
   >   REGR_SLOPE(sals,sals) OVER (PARTITION BY DEPTNO ORDER BY sal ) slope2
   > FROM regr_test    
   > ORDER BY DEPTNO DESC;
+--------+--------+--------+
| DEPTNO | SLOPE1 | SLOPE2 |
+--------+--------+--------+
| 60     | <null> | <null> |
| 60     | <null> | 1      |
| 30     | <null> | 1      |
| 30     | <null> | <null> |
| 20     | <null> | <null> |
| 20     | <null> | 1      |
| 10     | <null> | <null> |
+--------+--------+--------+
7 rows selected.
Running time elapsed:      3.01 Seconds
SQL> 
SQL> --REGR_SLOPE
SQL> SELECT
   >   DEPTNO, 
   >   REGR_SLOPE(sals,sal) OVER (PARTITION BY DEPTNO ORDER BY sals ) slope1, 
   >   REGR_SLOPE(sals,sals) OVER (PARTITION BY DEPTNO ORDER BY sal ) slope2
   > FROM regr_test    
   > ORDER BY DEPTNO DESC;
+--------+---------------+--------+
| DEPTNO | SLOPE1        | SLOPE2 |
+--------+---------------+--------+
| 60     | <null>        | 1      |
| 60     | -0.1394148021 | <null> |
| 30     | <null>        | <null> |
| 30     | 1.204663212   | 1      |
| 20     | <null>        | <null> |
| 20     | 0.5744680851  | 1      |
| 10     | <null>        | <null> |
+--------+---------------+--------+
7 rows selected.
Running time elapsed:      3.01 Seconds
SQL> 
SQL> --REGR_SLOPE
SQL> SELECT
   >   DEPTNO, 
   >   REGR_SLOPE( sal, ( YEAR( NOW() ) - YEAR( HIREDATE ) ) )over(PARTITION BY DEPTNO)
   > FROM regr_test    
   > ORDER BY DEPTNO DESC;
+--------+--------+
| DEPTNO | C2     |
+--------+--------+
| 60     | <null> |
| 60     | <null> |
| 30     | <null> |
| 30     | <null> |
| 20     | <null> |
| 20     | <null> |
| 10     | <null> |
+--------+--------+
7 rows selected.
Running time elapsed:      1.99 Seconds
SQL> 
SQL> --REGR_SXX()
SQL> SELECT
   >   DEPTNO, 
   >   REGR_SXX(sal,( YEAR( NOW() ) - YEAR( HIREDATE ) ) )over(PARTITION BY DEPTNO) REGR_SXX1, 
   >   REGR_SXX(( YEAR( NOW() ) - YEAR( HIREDATE )), sal )over(PARTITION BY DEPTNO) REGR_SXX2
   >   FROM regr_test    
   > ORDER BY DEPTNO DESC;
+--------+-----------+------------+
| DEPTNO | REGR_SXX1 | REGR_SXX2  |
+--------+-----------+------------+
| 60     | 0         | 1687805000 |
| 60     | 0         | 1687805000 |
| 30     | 0         | 297992     |
| 30     | 0         | 297992     |
| 20     | 0         | 4418       |
| 20     | 0         | 4418       |
| 10     | 0         | 0          |
+--------+-----------+------------+
7 rows selected.
Running time elapsed:      2.45 Seconds
SQL> 
SQL> --所有线性函数
SQL> SELECT
   >   DEPTNO, 
   >   REGR_SLOPE(sals,sal) OVER (PARTITION BY DEPTNO ) slope1, 
   >   REGR_SLOPE(sals,sals) OVER (PARTITION BY DEPTNO ) slope2,
   >    REGR_SLOPE(null,sals) OVER (PARTITION BY DEPTNO ) slope3,
   >   REGR_INTERCEPT(sal,sals) OVER (PARTITION BY DEPTNO) AS intercept1, 
   >   REGR_INTERCEPT(sal,sal) OVER (PARTITION BY DEPTNO) AS intercept2,
   >   REGR_INTERCEPT(sal,null) OVER (PARTITION BY DEPTNO) AS intercept3,
   >   REGR_COUNT(sals,sal) OVER (PARTITION BY DEPTNO) AS REGR_COUNT1, 
   >   REGR_COUNT(sals,sals) OVER (PARTITION BY DEPTNO) AS REGR_COUNT2,
   >   REGR_COUNT(null,null) OVER (PARTITION BY DEPTNO) AS REGR_COUNT3,
   >   REGR_R2(sals,sal) over(PARTITION BY DEPTNO) REGR_1,
   >   REGR_R2(sals,sals)over(PARTITION BY DEPTNO) REGR_2,
   >   REGR_R2(null,sals)over(PARTITION BY DEPTNO) REGR_3,
   >   REGR_AVGX(( YEAR( NOW() ) - YEAR( HIREDATE ) ) ,sal)over(PARTITION BY DEPTNO) REGR_AVGX1,
   >   REGR_AVGX(sal,( YEAR( NOW() ) - YEAR( HIREDATE ) ) )over(PARTITION BY DEPTNO) REGR_AVGX2,
   >   REGR_AVGX(sals,sals)over(PARTITION BY DEPTNO) REGR_AVGX3,
   >   REGR_AVGY(( YEAR( NOW() ) - YEAR( HIREDATE ) ) ,sal) over(PARTITION BY DEPTNO) REGR_AVGY1,
   >   REGR_AVGY(sal,( YEAR( NOW() ) - YEAR( HIREDATE ) ) ) over(PARTITION BY DEPTNO) REGR_AVGY2,
   >   REGR_AVGY(sal,sal)over(PARTITION BY DEPTNO) REGR_AVGY3 ,
   >   REGR_SXX(sal,( YEAR( NOW() ) - YEAR( HIREDATE ) ) )over(PARTITION BY DEPTNO) REGR_SXX1, 
   >   REGR_SXX(( YEAR( NOW() ) - YEAR( HIREDATE )), sal )over(PARTITION BY DEPTNO) REGR_SXX2,
   >   REGR_SXX(sal,sal)over(PARTITION BY DEPTNO) REGR_SXX3,
   >   REGR_SXY(( YEAR( NOW() ) - YEAR( HIREDATE ) ) ,sal)over(PARTITION BY DEPTNO) REGR_SXY1, 
   >   REGR_SXY(sal,( YEAR( NOW() ) - YEAR( HIREDATE ) ) )over(PARTITION BY DEPTNO) REGR_SXY2, 
   >   REGR_SXY(sal,sal)over(PARTITION BY DEPTNO) REGR_SXY3,
   >   REGR_SYY(sal,sal)over(PARTITION BY DEPTNO) REGR_SYY1, 
   >   REGR_SYY(sals,sal)over(PARTITION BY DEPTNO) REGR_SYY2,
   >   REGR_SYY(sals,( YEAR( NOW() ) - YEAR( HIREDATE ) ))over(PARTITION BY DEPTNO) REGR_SYY3,
   >   REGR_SYY(( YEAR( NOW() ) - YEAR( HIREDATE ) ),sal)over(PARTITION BY DEPTNO) REGR_SYY4
   > FROM regr_test    
   > ORDER BY DEPTNO DESC;
+--------+---------------+--------+--------+--------------+------------+------------+------------------+------------------+-------------+--------+--------+--------+------------+------------+------------+------------+------------+------------+-----------+------------+------------+-----------+-----------+------------+------------+-----------+-----------+-----------+
| DEPTNO | SLOPE1        | SLOPE2 | SLOPE3 | INTERCEPT1   | INTERCEPT2 | INTERCEPT3 | REGR_COUNT1      | REGR_COUNT2      | REGR_COUNT3 | REGR_1 | REGR_2 | REGR_3 | REGR_AVGX1 | REGR_AVGX2 | REGR_AVGX3 | REGR_AVGY1 | REGR_AVGY2 | REGR_AVGY3 | REGR_SXX1 | REGR_SXX2  | REGR_SXX3  | REGR_SXY1 | REGR_SXY2 | REGR_SXY3  | REGR_SYY1  | REGR_SYY2 | REGR_SYY3 | REGR_SYY4 |
+--------+---------------+--------+--------+--------------+------------+------------+------------------+------------------+-------------+--------+--------+--------+------------+------------+------------+------------+------------+------------+-----------+------------+------------+-----------+-----------+------------+------------+-----------+-----------+-----------+
| 60     | -0.1394148021 | 1      | <null> | 65814.61728  | 0          | <null>     | 9.881312917e-324 | 9.881312917e-324 | 0           | 1      | 1      | <null> | 29850      | 40         | 5014       | 40         | 29850      | 29850      | 0         | 1687805000 | 1687805000 | 0         | 0         | 1687805000 | 1687805000 | 32805000  | 32805000  | 0         |
| 60     | -0.1394148021 | 1      | <null> | 65814.61728  | 0          | <null>     | 9.881312917e-324 | 9.881312917e-324 | 0           | 1      | 1      | <null> | 29850      | 40         | 5014       | 40         | 29850      | 29850      | 0         | 1687805000 | 1687805000 | 0         | 0         | 1687805000 | 1687805000 | 32805000  | 32805000  | 0         |
| 30     | 1.204663212   | 1      | <null> | -0.223655914 | 0          | <null>     | 9.881312917e-324 | 9.881312917e-324 | 0           | 1      | 1      | <null> | 414        | 40         | 499        | 40         | 414        | 414        | 0         | 297992     | 297992     | 0         | 0         | 297992     | 297992     | 432450    | 432450    | 0         |
| 30     | 1.204663212   | 1      | <null> | -0.223655914 | 0          | <null>     | 9.881312917e-324 | 9.881312917e-324 | 0           | 1      | 1      | <null> | 414        | 40         | 499        | 40         | 414        | 414        | 0         | 297992     | 297992     | 0         | 0         | 297992     | 297992     | 432450    | 432450    | 0         |
| 20     | 0.5744680851  | 1      | <null> | -15.88888889 | 0          | <null>     | 9.881312917e-324 | 9.881312917e-324 | 0           | 1      | 1      | <null> | 52         | 40         | 39         | 40         | 52         | 52         | 0         | 4418       | 4418       | 0         | 0         | 4418       | 4418       | 1458      | 1458      | 0         |
| 20     | 0.5744680851  | 1      | <null> | -15.88888889 | 0          | <null>     | 9.881312917e-324 | 9.881312917e-324 | 0           | 1      | 1      | <null> | 52         | 40         | 39         | 40         | 52         | 52         | 0         | 4418       | 4418       | 0         | 0         | 4418       | 4418       | 1458      | 1458      | 0         |
| 10     | <null>        | <null> | <null> | <null>       | <null>     | <null>     | 4.940656458e-324 | 4.940656458e-324 | 0           | <null> | <null> | <null> | 310        | 40         | 964        | 40         | 310        | 310        | 0         | 0          | 0          | 0         | 0         | 0          | 0          | 0         | 0         | 0         |
+--------+---------------+--------+--------+--------------+------------+------------+------------------+------------------+-------------+--------+--------+--------+------------+------------+------------+------------+------------+------------+-----------+------------+------------+-----------+-----------+------------+------------+-----------+-----------+-----------+
7 rows selected.
Running time elapsed:     13.39 Seconds
Running time elapsed:    131.11 Seconds
SQL> exit
Disconnected.
