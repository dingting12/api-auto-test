--Description: doc 9 chapter maintenance
--Date：2020-07-13
--Author：满意

-- 9.1
DROP RESOURCE GROUP TEST101 if exists;
CREATE RESOURCE GROUP TEST101 GLOBAL PERCENT 30;
DROP RESOURCE GROUP TEST101 if exists;

DROP RESOURCE GROUP TEST102 if exists;
CREATE RESOURCE GROUP TEST102 GLOBAL PERCENT 55, GLOBAL MIN PERCENT 10;
DROP RESOURCE GROUP TEST102 if exists;


DROP RESOURCE GROUP TEST103 if exists;
CREATE RESOURCE GROUP TEST103 GLOBAL PERCENT 55, GLOBAL MIN PERCENT 10, GLOBAL MAX
PERCENT 90;
DROP RESOURCE GROUP TEST103 if exists;

DROP RESOURCE GROUP TEST104 if exists;
CREATE RESOURCE GROUP TEST104 GLOBAL PERCENT 50, GLOBAL MIN PERCENT 15, MANAGER MEMORY
1g, EXECUTOR MEMORY 1g, EXECUTOR CPU 1;
DROP RESOURCE GROUP TEST104 if exists;

DROP RESOURCE GROUP TEST105 if exists;
CREATE RESOURCE GROUP TEST105 GLOBAL PERCENT 50, GLOBAL MIN PERCENT 15, GLOBAL MAX
PERCENT 100, MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR CPU 1;
DROP RESOURCE GROUP TEST105 if exists;

DROP RESOURCE GROUP TEST106 if exists;
CREATE RESOURCE GROUP TEST106 MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR CPU 1,
EXECUTOR NUMBER 1;
DROP RESOURCE GROUP TEST106 if exists;

DROP RESOURCE GROUP MULTI_HDP_TEST01 if exists;
CREATE RESOURCE GROUP MULTI_HDP_TEST01 MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR
CPU 1, EXECUTOR NUMBER 1, CONF 'hadoop02', QUEUE 'default', USER 'hadoop1', KEYTAB
'xxxxxx';
DROP RESOURCE GROUP MULTI_HDP_TEST01 if exists;

DROP RESOURCE GROUP MULTI_HDP_TEST02 if exists;
CREATE RESOURCE GROUP MULTI_HDP_TEST02 MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR
CPU 1, EXECUTOR NUMBER 1, CONF 'hadoop03', QUEUE 'default', USER 'hadoop2';
DROP RESOURCE GROUP MULTI_HDP_TEST02 if exists;


DROP RESOURCE GROUP TEST101 if exists;

CREATE RESOURCE GROUP TEST101 GLOBAL PERCENT 30;

ALTER RESOURCE GROUP TEST101 SET GLOBAL PERCENT 60, GLOBAL MIN PERCENT 5, GLOBAL MAX
PERCENT 0, MANAGER MEMORY 0, EXECUTOR MEMORY 0, EXECUTOR CPU 0, EXECUTOR NUMBER 0;
DROP RESOURCE GROUP TEST101 if exists;


drop user TEST_GROUP if exists cascade;

CREATE USER TEST_GROUP PASSWORD '123456' GLOBAL_SPACE 10T TEMP_SPACE 5T RESOURCE GROUP
'DEFAULT';

drop user TEST_GROUP if exists cascade;
DROP RESOURCE GROUP TEST1 if exists;
CREATE RESOURCE GROUP TEST1 GLOBAL PERCENT 30;

CREATE USER TEST_GROUP PASSWORD '123456' GLOBAL_SPACE 10T TEMP_SPACE 5T;

ALTER USER TEST_GROUP SET RESOURCE GROUP TEST1;

DROP RESOURCE GROUP TEST1 if exists;


drop user USER_TEST if exists cascade;

CREATE USER USER_TEST PASSWORD '123456' GLOBAL_SPACE 10T TEMP_SPACE 5T;

drop user USER_TEST if exists cascade;

CREATE USER USER_TEST PASSWORD '123456' GLOBAL_SPACE UNLIMITED TEMP_SPACE UNLIMITED;

ALTER USER USER_TEST SET GLOBAL_SPACE 10T TEMP_SPACE 5T;



SET SESSION JOB PRIORITY LOW;

SET SESSION JOB PRIORITY HIGH;

SET SESSION JOB PRIORITY EMERGENCY;

SET SESSION JOB PRIORITY MEDIUM;

DROP SCHEMA S1 IF EXISTS CASCADE;




drop user USER1 if exists cascade;

CREATE USER USER1 PASSWORD '123456';

ALTER USER USER1 SET PASSWORD '123456';

ALTER USER USER1 SET INITIAL SCHEMA PUBLIC;
SET PASSWORD '123456';

DROP USER USER1 if exists cascade;

SET INITIAL SCHEMA PUBLIC;


CREATE ROLE R1;
DROP ROLE R1;

DROP USER USER1 if exists cascade;
DROP USER USER2  if exists cascade;
CREATE USER USER1 PASSWORD '123456';
CREATE USER USER2 PASSWORD '123456';

drop table TABLE1 if exists ;
create table TABLE1(COLUMNA int,COLUMNB varchar(20));
--给user赋权
GRANT ALL ON TABLE1 TO USER1;
GRANT SELECT ON TABLE1 TO USER1;
GRANT SELECT, UPDATE ON TABLE1 TO USER1, USER2;
GRANT SELECT(COLUMNA, COLUMNB), UPDATE(COLUMNA, COLUMNB) ON TABLE1 TO USER1;

grant change_authorization to USER1; 

connect user USER1 password '123456';

drop PROCEDURE proc if exists;

CREATE PROCEDURE proc
(IN p1 INTEGER, OUT pmsg CHAR(30))
BEGIN
IF p1 > 0 THEN
SET pmsg = 'Positive value';
ELSEIF p1 = 0 THEN
SET pmsg = 'Zero Value';
ELSE
SET pmsg = 'Negative Value';
END IF;
END;
/

drop function  t_func if exists;

create function  t_func (a int)
returns int
return a+1;
/

disconnect USER1;

connect user admin password '123456';

--赋予使用其他用户的存储过程的权利
GRANT ALL ON PROCEDURE USER1.proc TO USER2;
--赋予使用其他用户的函数的权利
GRANT ALL ON FUNCTION USER1.t_func TO USER2;
--给role赋权
DROP ROLE ROLE1;
DROP ROLE ROLE2;

CREATE ROLE ROLE1;

CREATE ROLE ROLE2;


GRANT ALL ON TABLE1 TO ROLE1;
GRANT SELECT ON TABLE1 TO ROLE1;
GRANT SELECT, UPDATE ON TABLE1 TO ROLE1, ROLE2;
GRANT SELECT(COLUMNA, COLUMNB), UPDATE(COLUMNA, COLUMNB) ON TABLE1 TO ROLE1;
--将role的权限赋给user
GRANT ROLE1 TO USER1;


REVOKE ALL ON TABLE1 FROM USER1 RESTRICT;
REVOKE SELECT ON TABLE1 FROM USER1 RESTRICT;
REVOKE SELECT, UPDATE ON TABLE1 FROM USER1, USER2 RESTRICT;
REVOKE SELECT(COLUMNA, COLUMNB), UPDATE(COLUMNA, COLUMNB) ON TABLE1 FROM USER1 RESTRICT;

--收回role的权限
REVOKE ALL ON TABLE1 FROM ROLE1 RESTRICT;
REVOKE SELECT ON TABLE1 FROM ROLE1 RESTRICT;
REVOKE SELECT, UPDATE ON TABLE1 FROM ROLE1, ROLE2 RESTRICT;
REVOKE SELECT(COLUMNA, COLUMNB), UPDATE(COLUMNA, COLUMNB) ON TABLE1 FROM ROLE1 RESTRICT;

