SQLCli Release 0.0.97
SQL> connect admin/123456
Database connected.
SQL> start 9maintenance.sql
SQL> --Description: doc 9 chapter maintenance
   > --Date：2020-07-13
   > --Author：满意
   > 
   > -- 9.1
SQL> DROP RESOURCE GROUP TEST101 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP TEST101 GLOBAL PERCENT 30;
0 rows affected
SQL> DROP RESOURCE GROUP TEST101 if exists;
0 rows affected
SQL> DROP RESOURCE GROUP TEST102 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP TEST102 GLOBAL PERCENT 55, GLOBAL MIN PERCENT 10;
0 rows affected
SQL> DROP RESOURCE GROUP TEST102 if exists;
0 rows affected
SQL> DROP RESOURCE GROUP TEST103 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP TEST103 GLOBAL PERCENT 55, GLOBAL MIN PERCENT 10, GLOBAL MAX
   > PERCENT 90;
0 rows affected
SQL> DROP RESOURCE GROUP TEST103 if exists;
0 rows affected
SQL> DROP RESOURCE GROUP TEST104 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP TEST104 GLOBAL PERCENT 50, GLOBAL MIN PERCENT 15, MANAGER MEMORY
   > 1g, EXECUTOR MEMORY 1g, EXECUTOR CPU 1;
0 rows affected
SQL> DROP RESOURCE GROUP TEST104 if exists;
0 rows affected
SQL> DROP RESOURCE GROUP TEST105 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP TEST105 GLOBAL PERCENT 50, GLOBAL MIN PERCENT 15, GLOBAL MAX
   > PERCENT 100, MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR CPU 1;
0 rows affected
SQL> DROP RESOURCE GROUP TEST105 if exists;
0 rows affected
SQL> DROP RESOURCE GROUP TEST106 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP TEST106 MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR CPU 1,
   > EXECUTOR NUMBER 1;
0 rows affected
SQL> DROP RESOURCE GROUP TEST106 if exists;
0 rows affected
SQL> DROP RESOURCE GROUP MULTI_HDP_TEST01 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP MULTI_HDP_TEST01 MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR
   > CPU 1, EXECUTOR NUMBER 1, CONF 'hadoop02', QUEUE 'default', USER 'hadoop1', KEYTAB
   > 'xxxxxx';
java.sql.SQLSyntaxErrorException: can not get worker: MULTI_HDP_TEST01 in statement [CREATE RESOURCE GROUP MULTI_HDP_TEST01 MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR
CPU 1, EXECUTOR NUMBER 1, CONF 'hadoop02', QUEUE 'default', USER 'hadoop1', KEYTAB
'xxxxxx']
SQL> DROP RESOURCE GROUP MULTI_HDP_TEST01 if exists;
0 rows affected
SQL> DROP RESOURCE GROUP MULTI_HDP_TEST02 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP MULTI_HDP_TEST02 MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR
   > CPU 1, EXECUTOR NUMBER 1, CONF 'hadoop03', QUEUE 'default', USER 'hadoop2';
java.sql.SQLSyntaxErrorException: can not get worker: MULTI_HDP_TEST02 in statement [CREATE RESOURCE GROUP MULTI_HDP_TEST02 MANAGER MEMORY 1g, EXECUTOR MEMORY 1g, EXECUTOR
CPU 1, EXECUTOR NUMBER 1, CONF 'hadoop03', QUEUE 'default', USER 'hadoop2']
SQL> DROP RESOURCE GROUP MULTI_HDP_TEST02 if exists;
0 rows affected
SQL> DROP RESOURCE GROUP TEST101 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP TEST101 GLOBAL PERCENT 30;
0 rows affected
SQL> ALTER RESOURCE GROUP TEST101 SET GLOBAL PERCENT 60, GLOBAL MIN PERCENT 5, GLOBAL MAX
   > PERCENT 0, MANAGER MEMORY 0, EXECUTOR MEMORY 0, EXECUTOR CPU 0, EXECUTOR NUMBER 0;
0 rows affected
SQL> DROP RESOURCE GROUP TEST101 if exists;
0 rows affected
SQL> drop user TEST_GROUP if exists cascade;
0 rows affected
SQL> CREATE USER TEST_GROUP PASSWORD '123456' GLOBAL_SPACE 10T TEMP_SPACE 5T RESOURCE GROUP
   > 'DEFAULT';
0 rows affected
SQL> drop user TEST_GROUP if exists cascade;
0 rows affected
SQL> DROP RESOURCE GROUP TEST1 if exists;
0 rows affected
SQL> CREATE RESOURCE GROUP TEST1 GLOBAL PERCENT 30;
0 rows affected
SQL> CREATE USER TEST_GROUP PASSWORD '123456' GLOBAL_SPACE 10T TEMP_SPACE 5T;
0 rows affected
SQL> ALTER USER TEST_GROUP SET RESOURCE GROUP TEST1;
0 rows affected
SQL> DROP RESOURCE GROUP TEST1 if exists;
0 rows affected
SQL> drop user USER_TEST if exists cascade;
0 rows affected
SQL> CREATE USER USER_TEST PASSWORD '123456' GLOBAL_SPACE 10T TEMP_SPACE 5T;
0 rows affected
SQL> drop user USER_TEST if exists cascade;
0 rows affected
SQL> CREATE USER USER_TEST PASSWORD '123456' GLOBAL_SPACE UNLIMITED TEMP_SPACE UNLIMITED;
0 rows affected
SQL> ALTER USER USER_TEST SET GLOBAL_SPACE 10T TEMP_SPACE 5T;
0 rows affected
SQL> SET SESSION JOB PRIORITY LOW;
0 rows affected
SQL> SET SESSION JOB PRIORITY HIGH;
0 rows affected
SQL> SET SESSION JOB PRIORITY EMERGENCY;
0 rows affected
SQL> SET SESSION JOB PRIORITY MEDIUM;
0 rows affected
SQL> DROP SCHEMA S1 IF EXISTS CASCADE;
0 rows affected
SQL> drop user USER1 if exists cascade;
0 rows affected
SQL> CREATE USER USER1 PASSWORD '123456';
0 rows affected
SQL> ALTER USER USER1 SET PASSWORD '123456';
0 rows affected
SQL> ALTER USER USER1 SET INITIAL SCHEMA PUBLIC;
0 rows affected
SQL> SET PASSWORD '123456';
0 rows affected
SQL> DROP USER USER1 if exists cascade;
0 rows affected
SQL> SET INITIAL SCHEMA PUBLIC;
0 rows affected
SQL> CREATE ROLE R1;
0 rows affected
SQL> DROP ROLE R1;
0 rows affected
SQL> DROP USER USER1 if exists cascade;
0 rows affected
SQL> DROP USER USER2  if exists cascade;
0 rows affected
SQL> CREATE USER USER1 PASSWORD '123456';
0 rows affected
SQL> CREATE USER USER2 PASSWORD '123456';
0 rows affected
SQL> drop table TABLE1 if exists ;
0 rows affected
SQL> create table TABLE1(COLUMNA int,COLUMNB varchar(20));
0 rows affected
SQL> --给user赋权
SQL> GRANT ALL ON TABLE1 TO USER1;
0 rows affected
SQL> GRANT SELECT ON TABLE1 TO USER1;
0 rows affected
SQL> GRANT SELECT, UPDATE ON TABLE1 TO USER1, USER2;
0 rows affected
SQL> GRANT SELECT(COLUMNA, COLUMNB), UPDATE(COLUMNA, COLUMNB) ON TABLE1 TO USER1;
0 rows affected
SQL> grant change_authorization to USER1; 
0 rows affected
SQL> connect user USER1 password '123456';
Database connected.
SQL> drop PROCEDURE proc if exists;
0 rows affected
SQL> CREATE PROCEDURE proc
   > (IN p1 INTEGER, OUT pmsg CHAR(30))
   > BEGIN
   > IF p1 > 0 THEN
   > SET pmsg = 'Positive value';
   > ELSEIF p1 = 0 THEN
   > SET pmsg = 'Zero Value';
   > ELSE
   > SET pmsg = 'Negative Value';
   > END IF;
   > END;
   > /
0 rows affected
SQL> drop function  t_func if exists;
0 rows affected
SQL> create function  t_func (a int)
   > returns int
   > return a+1;
   > /
0 rows affected
SQL> disconnect USER1;
SQL> connect user admin password '123456';
Database connected.
SQL> 
SQL> --赋予使用其他用户的存储过程的权利
SQL> GRANT ALL ON PROCEDURE USER1.proc TO USER2;
0 rows affected
SQL> --赋予使用其他用户的函数的权利
SQL> GRANT ALL ON FUNCTION USER1.t_func TO USER2;
0 rows affected
SQL> --给role赋权
SQL> DROP ROLE ROLE1;
0 rows affected
SQL> DROP ROLE ROLE2;
0 rows affected
SQL> CREATE ROLE ROLE1;
0 rows affected
SQL> CREATE ROLE ROLE2;
0 rows affected
SQL> GRANT ALL ON TABLE1 TO ROLE1;
0 rows affected
SQL> GRANT SELECT ON TABLE1 TO ROLE1;
0 rows affected
SQL> GRANT SELECT, UPDATE ON TABLE1 TO ROLE1, ROLE2;
0 rows affected
SQL> GRANT SELECT(COLUMNA, COLUMNB), UPDATE(COLUMNA, COLUMNB) ON TABLE1 TO ROLE1;
0 rows affected
SQL> --将role的权限赋给user
SQL> GRANT ROLE1 TO USER1;
0 rows affected
SQL> REVOKE ALL ON TABLE1 FROM USER1 RESTRICT;
0 rows affected
SQL> REVOKE SELECT ON TABLE1 FROM USER1 RESTRICT;
0 rows affected
SQL> REVOKE SELECT, UPDATE ON TABLE1 FROM USER1, USER2 RESTRICT;
0 rows affected
SQL> REVOKE SELECT(COLUMNA, COLUMNB), UPDATE(COLUMNA, COLUMNB) ON TABLE1 FROM USER1 RESTRICT;
0 rows affected
SQL> 
SQL> --收回role的权限
SQL> REVOKE ALL ON TABLE1 FROM ROLE1 RESTRICT;
0 rows affected
SQL> REVOKE SELECT ON TABLE1 FROM ROLE1 RESTRICT;
0 rows affected
SQL> REVOKE SELECT, UPDATE ON TABLE1 FROM ROLE1, ROLE2 RESTRICT;
0 rows affected
SQL> REVOKE SELECT(COLUMNA, COLUMNB), UPDATE(COLUMNA, COLUMNB) ON TABLE1 FROM ROLE1 RESTRICT;
0 rows affected
SQL> exit
Disconnected.
