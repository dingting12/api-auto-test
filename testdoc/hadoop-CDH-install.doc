:numbered:
:toc:

= CDH5.14安装文档

== 背景

假设现在有三台物理服务器；每台都安装了Redhat7.2操作系统，三台机器的主机名分别是node1，node2和node3；

== 网络配置

=== 设置ip
编辑/etc/sysconfig/network-scripts/ifcfg-网卡名


.ip configation
[source,shell]
----
BOOTPROTO=static   #启用静态IP地址
ONBOOT=yes  #开启自动启用网络连接
IPADDR=192.168.1.112  #设置IP地址
NETMASK=255.255.255.0  #设置子网掩码
GATEWAY=192.168.1.1   #设置网关
DNS1=8.8.8.8 #设置主DNS
IPV6INIT=no  #禁止IPV6
----

重启网络服务


[source,shell]
----
service network restart
----

=== 设置hostname


[source,shell]
----
hostnamectl set-hostname node1
----

编辑/etc/hosts,增加一下内容

[source,shell]
----
192.168.1.112  node1
192.168.1.113  node2
192.168.1.114  node3
----

[TIP]
====
集群中所有服务器都需要配置
====

编辑/etc/sysconfig/network,增加一下内容

[source,shell]
----
NETWORKING=yes
HOSTNAME=node1
GATEWAY=192.168.1.1
----

== 环境准备

在实际的部署中，由于HDP的软件比较大，下载缓慢，故采用离线安装的方式进行。以下面组网为例进行讲解。

.ENV
[options="header"]
|=================================================
|主机IP|主机名|作用
|192.168.2.51|node1|部署CM
|192.168.2.52|node2|数据节点
|192.168.2.53|node3|数据节点
|=================================================

=== 配置本地源

mkdir -p /mnt/cdrom
mount -o loop /dev/cdrom /mnt/cdrom

备份原yum.repos.d

[source,shell]
----
cd /etc/yum.repos.d
mkdir bak
mv *.repo bak/
----

添加local.repo

[source,shell]
----
echo "[local]
name=local
baseurl=file:///mnt/cdrom
gpgcheck=0
enabled=1
" > /etc/yum.repos.d/local.repo
----

验证本地yum源是否生效，没有error且state非0，则表示正确

[source,shell]
----
yum repolist
----

=== 安装httpd服务

[source,shell]
----
yum install httpd -y
systemctl start httpd.service
systemctl enable httpd.service
systemctl status httpd.service
----
[TIP]
====
只在node1中安装httpd服务即可
====


=== 配置局域网yum源

[source,shell]
----
mkdir /var/www/html/redhat
mount -o loop /dev/cdrom /var/www/html/redhat/
echo "mount -o loop /dev/cdrom /var/www/html/redhat/" >> /etc/rc.local

chmod +x /etc/rc.local

echo "[linkoop-yum-http]
name=linkoop-yum-http
baseurl=http://node1/redhat/
gpgcheck=0
enabled=1
priority=1
" > /etc/yum.repos.d/linkoop-yum-http.repo
rm -rf /etc/yum.repos.d/linkoop-yum-file.repo
yum repolist
----

在其他机器(node2,node3)上进行yum源的设置

将node1上的/etc/yum.repos.d/linkoop-yum-http.repo文件拷贝到
每台机器的/etc/yum.repos.d/目录下，同时删除该目录下的其他文件。

机器所有机器(node1,node2,node3)都要执行下面的命令；
[source,shell]
----
[root@node1 ~]# yum install openssh-clients -y
[root@node1 ~]# yum install wget -y
[root@node1 ~]# yum install unzip -y
[root@node1 ~]# yum install ntp -y
----

=== 配置ssh无密码登录

因为在ambari和hdp部署过程中，ambari和hdp部署的节点都有可能互相访问，所以建议四个节点中的每个节点之间都可以ssh无密码登录，包括它们自己登录到自己。

[source,shell]
----
[root@node1 ~]# ssh-keygen
[root@node1 ~]# cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
[root@node1 ~]# chmod 700 ~/.ssh
[root@node1 ~]# chmod 600 ~/.ssh/authorized_keys
----
注：上述部署node2和node3上也要操作，都操作完成后，执行下面步骤

2、	设置多台机器相互之间免密登陆

[source,shell]
----
在node1机器上执行如下将命令：
[root@node1 ~]# for host in node{1,2,3};do echo $host; ssh-copy-id -i /root/.ssh/id_rsa root@$host;done
在node2机器上执行如下将命令：
[root@node2 ~]# for host in node{1,2,3};do echo $host; ssh-copy-id -i /root/.ssh/id_rsa root@$host;done
在node3机器上执行如下将命令：
[root@node3 ~]# for host in node{1,2,3};do echo $host; ssh-copy-id -i /root/.ssh/id_rsa root@$host;done
----

至此ssh免密设置完毕；

=== 关闭防火墙服务

[source,shell]
----
[root@node1 ~]# systemctl stop firewalld
[root@node1 ~]# systemctl disable firewalld
----
注意：每台机器上（node1,node2,node3）都执行上面四条命令

=== 配置selinux安全策略

在每台机器(node1,node2,node3)上执行下面的命令

[source,shell]
----
[root@node1 ~]# sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config
[root@node1 ~]# setenforce 0
[root@node2 ~]# sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config
[root@node2 ~]# setenforce 0
[root@node3 ~]# sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config
[root@node3 ~]# setenforce 0
----

=== 配置ntp服务

less /etc/localtime看最后一行是否是CST-8

如果不是，执行以下命令修改

cp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

因为hdp中有服务需要集群的时间同步，所以集群中的每一个机器需要安装启动ntp服务保证集群时间的一致，安装启动如下所示

[source,shell]
----
for host in node{1,2,3};do ssh root@$host yum install ntp -y; ssh root@$host; done
----

配置NTP服务端

[source,shell]
----
node1作为ntp server，其他节点与其同步
修改时间：date  -s "2017-3-13 09:58:00"
写入硬件：clock -w
配置服务端：
vi /etc/ntp.conf
在# Please consider joining the pool (http://www.pool.ntp.org/join.html)后添加两行：
server 127.127.1.0
fudge 127.127.1.0 stratum 10
把如下四行代码注释掉
----
#server 0.rhel.pool.ntp.org iburst
#server 1.rhel.pool.ntp.org iburst
#server 2.rhel.pool.ntp.org iburst
#server 3.rhel.pool.ntp.org iburst
----
systemctl start ntpd.service
systemctl enable ntpd.service  #设置为自启动

检查端口是否开启：如果正常可以看见123端口
netstat -unlnp
----

配置NTP客户端

[source,shell]
----
vi /etc/ntp.conf
在# Please consider joining the pool (http://www.pool.ntp.org/join.html)  后面添加：
server node1
保存
ntpdate -u node1   #client端ntp服务未启动时执行
service ntpd start    或者  /etc/init.d/ntpd start
chkconfig ntpd on   #设置为自启动
----

=== 关闭THP
在node1、node2、node3机器上均执行如下命令

[source,shell]
----
echo 'echo never > /sys/kernel/mm/redhat_transparent_hugepage/enabled' >> /etc/rc.d/rc.local
echo 'echo never > /sys/kernel/mm/redhat_transparent_hugepage/defrag' >> /etc/rc.d/rc.local
echo never > /sys/kernel/mm/transparent_hugepage/enabled
echo never > /sys/kernel/mm/transparent_hugepage/defrag
----

=== 调整Linux交换分区
在node1、node2、node3机器上均执行如下命令

[source,shell]
----
echo 'vm.swappiness=10' >> /etc/sysctl.conf
----

=== 修改Linux资源限制配置
在node1、node2、node3机器上均修改/etc/security/limits.conf配置文件，执行命令如下：
[source,shell]
----
echo "hadoop    -    nofile          32768" >> /etc/security/limits.conf
echo "hadoop    -    nproc           32000" >> /etc/security/limits.conf
----

=== 安装java环境

在node1、node2和node3上都要进行JDK安装部署。以node1机器为例，进行安装步骤讲解。

[source,shell]
----
1、在node1服务器上创建目录/usr/java
[root@node1 ~]# mkdir -p /usr/java
2、将下载的jdk-8u60-linux-x64.tar.gz上传至/usr/java目录；
3、解压jdk-8u60-linux-x64.tar.gz
[root@node1 java]# tar -zxvf jdk-8u60-linux-x64.tar.gz
4、解压生成后，设置环境变量，具体命令如下
[root@node1 ~]# echo "export JAVA_HOME=/usr/java/jdk1.8.0_60" >> /etc/profile
[root@node1 ~]# echo 'export PATH=$JAVA_HOME/bin:$PATH' >> /etc/profile
[root@node1 ~]# source /etc/profile
[root@node1 ~]# java -version
----

=== 安装MariaDB

==== 安装MariaDB

----
yum -y install mariadb
yum -y install mariadb-server
----

==== 启动并配置MariaDB

[source,shell]
----
[root@redhat1 ~]# systemctl start mariadb
[root@redhat1 ~]# /usr/bin/mysql_secure_installation
NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!
In order to log into MariaDB to secure it, we'll need the current
password for the root user.  If you've just installed MariaDB, and
you haven't set the root password yet, the password will be blank,
so you should just press enter here.
Enter current password for root (enter for none): 
OK, successfully used password, moving on...
Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.
Set root password? [Y/n] Y
New password: 
Re-enter new password: 
Password updated successfully!
Reloading privilege tables..
 ... Success!
By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.
Remove anonymous users? [Y/n] Y
 ... Success!
Normally, root should only be allowed to connect from 'localhost'.  This
ensures that someone cannot guess at the root password from the network.
Disallow root login remotely? [Y/n] n
 ... skipping.
By default, MariaDB comes with a database named 'test' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.
Remove test database and access to it? [Y/n] Y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!
Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.
Reload privilege tables now? [Y/n] Y
 ... Success!
Cleaning up...
All done!  If you've completed all of the above steps, your MariaDB
installation should now be secure.
Thanks for using MariaDB!
----

==== 建立CM，Hive等需要的表

[source,shell]
----
[root@redhat1 ~]# mysql -u root -p
Enter password: 
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 9
Server version: 5.5.56-MariaDB MariaDB Server
Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
MariaDB [(none)]> 
create database metastore default character set utf8; 
CREATE USER 'hive'@'%' IDENTIFIED BY 'password';  
GRANT ALL PRIVILEGES ON metastore. * TO 'hive'@'%';  
FLUSH PRIVILEGES; 
create database cm default character set utf8; 
CREATE USER 'cm'@'%' IDENTIFIED BY 'password';  
GRANT ALL PRIVILEGES ON cm. * TO 'cm'@'%';  
FLUSH PRIVILEGES;
create database am default character set utf8;  
CREATE USER 'am'@'%' IDENTIFIED BY 'password';   
GRANT ALL PRIVILEGES ON am. * TO 'am'@'%';   
FLUSH PRIVILEGES;    
create database rm default character set utf8;  
CREATE USER 'rm'@'%' IDENTIFIED BY 'password';   
GRANT ALL PRIVILEGES ON rm. * TO 'rm'@'%';   
FLUSH PRIVILEGES;
create database hue default character set utf8;  
CREATE USER 'hue'@'%' IDENTIFIED BY 'password';   
GRANT ALL PRIVILEGES ON hue. * TO 'hue'@'%';   
FLUSH PRIVILEGES;
create database oozie default character set utf8;  
CREATE USER 'oozie'@'%' IDENTIFIED BY 'password';   
GRANT ALL PRIVILEGES ON oozie. * TO 'oozie'@'%';   
FLUSH PRIVILEGES;
create database sentry default character set utf8;  
CREATE USER 'sentry'@'%' IDENTIFIED BY 'password';   
GRANT ALL PRIVILEGES ON sentry. * TO 'sentry'@'%';   
FLUSH PRIVILEGES;
create database nav_ms default character set utf8;  
CREATE USER 'nav_ms'@'%' IDENTIFIED BY 'password';   
GRANT ALL PRIVILEGES ON nav_ms. * TO 'nav_ms'@'%';   
FLUSH PRIVILEGES;
create database nav_as default character set utf8;  
CREATE USER 'nav_as'@'%' IDENTIFIED BY 'password';   
GRANT ALL PRIVILEGES ON nav_as. * TO 'nav_as'@'%';   
FLUSH PRIVILEGES;
----

==== 安装jdbc驱动

[source,shell]
----
[root@redhat1 ~]# mkdir -p /usr/share/java/
[root@redhat1 ~]# mv mysql-connector-java-5.1.42.jar /usr/share/java/
[root@redhat1 ~]# cd /usr/share/java
[root@redhat1 java]# ln -s mysql-connector-java-5.1.42.jar mysql-connector-java.jar
[root@redhat1 java]# ll
total 940
-rwxrwxr-x. 1 root     root     960372 Feb  1 08:31 mysql-connector-java-5.1.42.jar
lrwxrwxrwx  1 root     root         31 Feb  2 00:52 mysql-connector-java.jar -> mysql-connector-java-5.1.42.jar
----

=== 重启集群

建议整个集群机器全部重启；重启后检查防火墙，系统时间以及selinux是否正确

== Hadoop安装

现在开始安装hadoop集群，我们使用的是HDP的发布版本。

=== Cloudera Manager和CDH安装准备

[source,shell]
----
该章操作只在node1的机器上进行；

tar -zxvf CM-5.14.tar.gz -C /var/www/html/
cd /etc/yum.repo.d
echo "[cmrepo]
name = cm_repo
baseurl = http://redhat1/cm5
enable = true
gpgcheck = false" >> cm.repo

----

注意：用实际的redhat1的ip地址进行替换；

访问地址为http://redhat1/cm5/，如果可以看到对应内容表示设置成功。


=== CM安装部署

该章操作仅在node1上进行，具体步骤如下：

1.通过yum安装方式安装Cloudera Manager Server

[source,shell]
----
[root@node1 ~]# yum -y install cloudera-manager-server
[root@node1 ~]# ambari-server setup -j /usr/java/jdk1.8.0_60
----

2.初始化数据库

[source,shell]
----
[root@node1 ~]# /usr/share/cmf/schema/scm_prepare_database.sh mysql cm cm password
----

3.启动Cloudera Manager Server

[source,shell]
----
[root@node1 ~]# service ambari-server start
----

4.检查端口是否监听

[source,shell]
----
[root@redhat1 ~]# netstat -lnpt | grep 7180
tcp        0      0 0.0.0.0:7180            0.0.0.0:*               LISTEN      3331/java
----

5.通过http://192.168.1.112:7180/cmf/login访问CM

6.将CDH包解压至parcel
[source,shell]
----
[root@redhat1 ~]# tar -zxvf CDH-5.14.tar.gz -C /opt/cloudera/parcel-repo/



=== CDH安装

==== CDH集群安装向导

1.admin/admin登录到CM

2.同意license协议，点击继续

3.选择免费版，点击继续

4.点击“继续”

5.输入主机ip或者名称，点击搜索找到主机后点击继续

6.选择需要安装的CDH版本，点击“继续”

7.使用parcel选择，点击“更多选项”,点击“-”删除其它所有远程存储库，使用本地parcel存储库，保存更改

8.选择自定义存储库，输入cm的http地址 http://192.168.1.112/cm5,根据自己地址填

9.点击“继续”，跳过安装jdk，使用自己的jdk版本

10.点击“继续”，进入下一步，默认多用户模式

11.点击“继续”，进入下一步配置ssh账号密码

12.点击“继续”，进入下一步，安装Cloudera Manager相关到各个节点

13.点击“继续”，进入下一步安装cdh到各个节点

14.点击“继续”，进入下一步主机检查，确保所有检查项均通过


==== 4.2.集群设置安装向导

1.选择需要安装的服务

2.点击“继续”，进入集群角色分配

3.点击“继续”，进入下一步，测试数据库连接

4.测试成功，点击“继续”，进入目录设置，此处使用默认默认目录，根据实际情况进行目录修改

5.点击“继续”，进入各个服务启动

6.安装成功


